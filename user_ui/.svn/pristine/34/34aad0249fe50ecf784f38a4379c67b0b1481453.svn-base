package og

import (
	"encoding/json"
	"errors"
	"fmt"
	"game2/lib/game"
	"strings"
)

const (
	OPERATOR_KEY   = "D4NDSJujqQwkZvQaadBj"
	OPERATOR_NAME  = "mog074jk"
	RECORD_API_URL = "http://mucho.oriental-game.com:8057/"
	PROXYADDR      = "http://127.0.0.1:1080/"
	SERVER_API_URL = "http://api01.oriental-game.com:8085/"
	PreFix         = "OG"
	PRAMERROR      = "paramete invalid"
	ProviderId     = 1
)

type (
	// OG注单
	TransferActent struct {
		/*************以下是必选参数*************/
		SDate    string `json:"sDate"`
		EDate    string `json:"eDate"`
		Operator string `json:"operator"`
		Key      string `json:"key"`
		/*************以下是可选参数*************/
		Provider          string `json:"provider"`
		PlayerID          string `json:"playerid"`
		TransactionNumber string `json:"transactionNumber"`
		Exact             bool   `json:"exact"`
	}
	// 用户注册
	RegisterReq struct {
		UserName  string `json:"username"`
		Country   string `json:"country"`
		FullName  string `json:"fullname"`
		Email     string `json:"email"`
		Language  string `json:"language"`
		Birthdate string `json:"birthdate"`
	}

	//**** 获取余额&更新余额
	BalanceReq struct {
		UserName   string  //	用户名
		Balance    float64 //	被加或被减数大于0
		Action     string  //	允许值: "IN", "OUT"
		TransferId string  //	经营方转账交易单号
	}
	// 返回消息绑定JSON
	RespGloBal struct {
		Status string `json:"status"`
		Data   struct {
			Balance string `json:"balance"`
			Message string `json:"message"`
			Key     string `json:"key"`
			Url     string `json:"url"`
		} `json:"data"`
	}
	// 查询所有玩家
	QueryPlayer struct {
		Rows int    // 回传记录笔数  预设10
		Page int    // 页数 预设1
		Sidx string // 排序的栏位名称 预设ID
		Sord string // 允许值: "asc", "desc"
	}
	// get all player 消息绑定JSON
	Players struct {
		Username   string `json:"username"`
		Fullname   string `json:"fullname"`
		Email      string `json:"email"`
		Country    string `json:"country"`
		Currency   string `json:"currency"`
		Birthdata  string `json:"birthdata"`
		OperatorId int    `json:"operatorId"`
		CreatedAt  string `json:"createdAt"`
		UpdateAt   string `json:"updatedAt"`
	}
	Meta struct {
		TotalRecords int  `json:"totalRecords"`
		TotalPages   int  `json:"totalPages"`
		CurrentPage  int  `json:"currentPage"`
		HasPrevious  bool `json:"hasPrevious"`
		HasNext      bool `json:"hasNext"`
	}
	ResPlayer struct {
		Status string `json:"status"`
		Data   struct {
			List    []Players `json:"players"`
			Meta    `json:"meta"`
			Message string `json:"message"`
		} `json:"data"`
	}
)

//	获取KEY
func getGameKey(msg map[string]interface{}) (string, error) {
	_, ok := msg["X-Token"]
	if !ok {
		return "", errors.New(PRAMERROR)
	}
	url := fmt.Sprintf("%v%v/%v/%v/%v/%v?username=%v", SERVER_API_URL, "game-providers", ProviderId, "games", "oglive", "key", msg["username"])
	map_res, err := do_requestGet(url, msg)
	if err != nil {
		return "", err
	}
	return map_res.Data.Key, nil
}

// 获取token done 详细见TestRegister 案例
func GetToken() (interface{}, error) {
	var tonken RespToken
	url := fmt.Sprintf("%v%v", SERVER_API_URL, "token")
	cli, err := NewHttpClient()
	if err != nil {
		return nil, err
	}

	data, err := HttpGET(cli, url)
	if err != nil {
		return nil, err
	}

	json.Unmarshal(data, &tonken)
	return tonken.Data.Token, nil
}

//用户投注记录(10分钟内)
func QueryPutRecord(msg map[string]interface{}) ([]ResPutRecord, error) {

	url := fmt.Sprintf("%v%v", RECORD_API_URL, "Transaction")
	if _, ok := msg["SDate"]; !ok {
		return nil, errors.New("SDate param error")

	}
	if _, ok := msg["EDate"]; !ok {
		return nil, errors.New("EData param error")
	}
	if _, ok := msg["Operator"]; !ok {
		return nil, errors.New("Operator param error")
	}
	if _, ok := msg["key"]; !ok {
		return nil, errors.New("key param error")
	}

	res, err := HttpPOSTInquire(url, msg)
	if err != nil {
		return nil, err
	}

	var msgInfo []ResPutRecord
	//msgInfo := make([]string, 0)
	if res != nil {
		if err := json.Unmarshal(res, &msgInfo); err != nil {
			return nil, err
		}
	}

	return msgInfo, nil
}

//转账记录(10分钟内)
func QueryPayRecord(msg map[string]interface{}) ([]ResPayRecord, error) {
	url := fmt.Sprintf("%v%v", RECORD_API_URL, "Transfer")
	if _, ok := msg["SDate"]; !ok {
		return nil, errors.New("SDate param error")

	}
	if _, ok := msg["EDate"]; !ok {
		return nil, errors.New("EData param error")
	}
	if _, ok := msg["Operator"]; !ok {
		return nil, errors.New("Operator param error")
	}
	if _, ok := msg["key"]; !ok {
		return nil, errors.New("key param error")
	}

	res, err := HttpPOSTInquire(url, msg)
	if err != nil {
		return nil, err
	}
	fmt.Println("200:", string(res))
	var msgInfo []ResPayRecord
	//msgInfo := make([]string, 0)
	if res != nil {
		if err := json.Unmarshal(res, &msgInfo); err != nil {
			return nil, err
		}
	}
	return msgInfo, nil
}

// 获取key && 查询余额
func do_requestGet(api_url string, params map[string]interface{}) (*RespGloBal, error) {
	cli, err := NewHttpClient()
	if err != nil {
		return nil, err
	}
	str, err := HttpGETGlobal(cli, api_url, params)
	if err != nil {
		return nil, err
	}
	var msg RespGloBal
	if err := json.Unmarshal(str, &msg); err != nil {
		return nil, err
	}
	if msg.Data.Message != "" {
		return nil, errors.New(msg.Data.Message)
	}
	return &msg, nil
}

//  register POST请求
func do_requestRegister(apiUrl string, data map[string]interface{}) error {
	var msg RespGloBal
	cli, err := NewHttpClient()
	if err != nil {
		return err
	}
	//str, err := HttpPOST(cli, url, data)
	str, err := HttpPOST(cli, apiUrl, data)
	if err != nil {
		return err
	}
	json.Unmarshal([]byte(str), &msg)
	if msg.Data.Message != "" {
		return errors.New(msg.Data.Message)
	}
	return nil
}

// 注册
func (a *GameOG) Register(req map[string]interface{}) (interface{}, error) {
	url := fmt.Sprintf("%v%v", a.ServerHost, "register")
	RegisSuccessful := "you name is " + req["username"].(string)
	token, err := GetToken()
	if token == nil {
		return nil, errors.New(PRAMERROR + "token")
	}
	dataSend := req
	dataSend["username"] = req["username"].(string)

	_, ok := dataSend["country"]
	if !ok {
		return nil, errors.New(PRAMERROR + "country")
	}
	_, ok = dataSend["birthdate"]
	if !ok {
		return nil, errors.New(PRAMERROR + "birthdate")
	}
	_, ok = dataSend["email"]
	if !ok {
		return nil, errors.New(PRAMERROR + "email")
	}
	_, ok = dataSend["fullname"]
	if !ok {
		return nil, errors.New(PRAMERROR + "fullname")
	}
	_, ok = dataSend["username"]
	if !ok {
		return nil, errors.New(PRAMERROR + "username")
	}
	_, ok = dataSend["language"]
	if !ok {
		return nil, errors.New(PRAMERROR + "language")
	}

	dataSend["X-Token"] = token

	err = do_requestRegister(url, dataSend)
	if err != nil {
		return nil, err
	}
	return RegisSuccessful, nil
}

// 获取游戏的url
func (a *GameOG) Login(req map[string]interface{}) (interface{}, error) {
	var msg RespGloBal
	username, ok := req["game_user_name"]
	if !ok {
		return nil, errors.New(PRAMERROR + "user name is nil")
	}
	token, err := GetToken()
	if err != nil {
		return nil, err
	}
	deal := make(map[string]interface{})
	deal["X-Token"] = token
	deal["username"] = username
	deal["type"] = req["game_type"]

	key, err := getGameKey(deal)
	if err != nil {
		ok := strings.EqualFold(fmt.Sprintf("%v", err), "User not found.")
		if ok {
			deal["language"] = req["lang"]
			deal["country"] = "China"
			deal["fullname"] = "MyUser"
			deal["email"] = "myuser123@test.com"
			deal["birthdate"] = "1993-02-02"
			fmt.Println("req: url log user not ", err)
			_, err := a.Register(deal)
			if err != nil {
				return nil, err
			}
			key, err = getGameKey(deal)
			if err != nil {
				return nil, err
			}
		} else {
			return "", err
		}
	}
	url := fmt.Sprintf("%v%v/%v/%v?key=%v", a.ServerHost, "game-providers", ProviderId, "play", key)
	cli, err := NewHttpClient()
	if err != nil {
		return "", err
	}

	mapres, err := requestGetPlay(cli, url)
	if err != nil {
		return "", err
	}
	if err := json.Unmarshal(mapres, &msg); err != nil {
		return "", err
	}
	if msg.Data.Message != "" {
		return "", errors.New(msg.Data.Message)
	}
	return msg.Data.Url, nil
}

// 获取余额
func (a *GameOG) GetBalance(req map[string]interface{}) (interface{}, error) {

	_, ok := req["username"]
	if !ok {
		return nil, errors.New(PRAMERROR + "username")
	}
	_, ok = req["X-Token"]
	if !ok {
		return nil, errors.New(PRAMERROR + "token")
	}
	url := fmt.Sprintf("%v%v/%v/%v?username=%v", a.ServerHost, "game-providers", ProviderId, "balance", req["username"])
	res, err := do_requestGet(url, req)
	fmt.Println(url, res)
	if err != nil {
		return "", err
	}
	fmt.Println(res)
	return res.Data.Balance, nil
}

// 转账
func (a *GameOG) Account2GameTransfer(req map[string]interface{}) (interface{}, error) {
	url := fmt.Sprintf("%v%v/%v/%v", a.ServerHost, "game-providers", ProviderId, "balance")
	cli, err := NewHttpClient()
	if err != nil {
		return "", err
	}
	mapres, err := HttpPOST(cli, url, req)
	if err != nil {
		return "", err
	}
	var resp RespGloBal
	if err := json.Unmarshal(mapres, &resp); err != nil {
		return "", err
	}
	if resp.Data.Message != "" {
		return "", errors.New(resp.Data.Message)
	}
	return resp.Data.Balance, nil
}

// 没需求
func (a *GameOG) Game2AccountTransfer(req map[string]interface{}) (interface{}, error) {
	return nil, nil
}

// 查询玩家信息
func (a *GameOG) QueryRecord(req map[string]interface{}) (interface{}, error) {
	var url string
	var resp ResPlayer
	data := map[string]interface{}{}
	data["X-Token"] = req["X-Token"]
	url = fmt.Sprintf("%v%v?", a.ServerHost, "players")

	_, ok := req["X-Token"]
	if !ok {
		return nil, errors.New(PRAMERROR)
	}
	page, ok := req["page"]
	if ok {
		url += fmt.Sprintf("page=%v", page)
	}
	rows, ok := req["rows"]
	if ok {
		url += fmt.Sprintf("&rows=%v", rows)
	}
	//_, ok = req["sidx"]
	_, ok = req["sord"]
	if ok {
		url += fmt.Sprintf("&sidx=%v&sord=%v", req["sidx"], req["sord"])
	}
	cli, err := NewHttpClient()
	if err != nil {
		return nil, err
	}
	res, err := HttpGETGlobal(cli, url, data)

	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(res, &resp)
	if err != nil {
		return nil, err
	}
	return resp, nil
}

// 返回前缀
func (a *GameOG) GetPrefix() string {
	return PreFix
}

func NewOGGame() game.Game {
	return &GameOG{
		ServerHost: SERVER_API_URL,
		ReCordHost: RECORD_API_URL,
		Key:        OPERATOR_KEY,
		Operator:   OPERATOR_NAME,
	}
}

func init() {
	game.Register("og", NewOGGame)
}
