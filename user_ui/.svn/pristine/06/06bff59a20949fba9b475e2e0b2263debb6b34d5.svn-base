package crontab

import (
	"errors"
	"fmt"
	"game2/lib/game"
	"game2/lib/game/og"
	"game2/model"
	"strconv"
	"time"

	"github.com/sirupsen/logrus"
)

type GameOG struct {
	name string
}

func (g *GameOG) QueryRecord() (interface{}, error) {
	gameName, _ := game.NewGame(g.name)
	req := make(map[string]interface{})
	//todo: 各个游戏设置自己的查询参数
	req["start_time"] = "2018-11-29 06:50:46"
	req["end_time"] = "2018-11-29 06:59:46"
	logrus.Info("time:", req)
	return gameName.QueryRecord(req)
}

func (g *GameOG) RecordList2Db(src interface{}) error {
	fmt.Println("req:", src)
	timenow := time.Now().Unix()
	list := make([]model.GameRecordOg, 0)
	recordlist, ok := src.([]og.ResPutRecord)
	if !ok {
		return errors.New("not recordlist ")
	}
	for i := range recordlist {
		bet, err := strconv.ParseFloat(recordlist[i].Bet, 64)
		if err != nil {
			return err
		}
		lose, err := strconv.ParseFloat(recordlist[i].Bet, 64)
		if err != nil {
			return err
		}
		betdate, err := MatchDate(recordlist[i].BettingDate)
		if err != nil {
			return err
		}
		temp := model.GameRecordOg{
			GameProvider:   recordlist[i].GameProvider,
			MemberName:     recordlist[i].MemberName,
			GameName:       recordlist[i].GameName,
			BettingCode:    recordlist[i].BettingCode,
			BettingDate:    betdate,
			GameId:         recordlist[i].GameId,
			RoundNo:        recordlist[i].Roundno,
			Result:         recordlist[i].Result,
			Bet:            bet,
			Win_loseResult: lose,
			BettingAmount:  recordlist[i].BettinGamount,
			ValidBet:       recordlist[i].ValidBet,
			WinLoseAmount:  recordlist[i].Winloseamount,
			Balance:        recordlist[i].Balance,
			Currency:       recordlist[i].Currency,
			Handicap:       recordlist[i].Handicap,
			Status:         recordlist[i].Status,
			GameCategory:   recordlist[i].Gamecategory,
			SettleDate:     recordlist[i].Settledate,
			Remark:         recordlist[i].Remark,
			CreateTime:     timenow,
			UpdateTime:     timenow,
		}
		list = append(list, temp)
	}
	err := model.GameRecordOgAddInfo(model.Db, list)
	if err != nil {
		return err
	}
	return nil
}

func NewOGTask() Task {
	return &GameOG{
		name: "og",
	}
}

func init() {
	Register("og", NewOGTask)
}
func text() {
	fmt.Println("text")
}
