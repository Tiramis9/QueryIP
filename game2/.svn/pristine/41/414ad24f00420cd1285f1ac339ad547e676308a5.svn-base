package agin

import (
	"fmt"
	"game2/lib/encrypt"
	"game2/lib/game"
	"game2/lib/utils"
	"net/url"
	"strings"
)

/*
注意事项：
1.游戏账号必须少于20个字符，只能是数字，字母，下划线
2.密码必须少于20个字符，不支持以下字符：' , “ , \ , / , > , < , & , # , -- , % , ? , $, 空格, 双节字符(全角字), TAB键, NULL, 換行符(\N)
3.**BBIN平台的密码须为6~12码英文或数字且符合0~9及a~z字符
4.MG 平台的会员帐号(必须加上 cagent 前缀，如cagent=AAA_NMGE,会员账号必須加上前綴 AAA，賬號就是 AAAxxxx)
5.IPM 平台的会员帐号(不可超过 13 位元长度)
6.BBIN 平台在转入或转出额度时, 只能整数转入或转出,不能带小数
7.BBIN 平台的 billno，只可使用數字, 请使用 19 字符内, 例如:123456445676789098
8.MG 平台的 billno，只可使用數字, 请使用 8 字符内, 例如:12345678
9.OG 平台的 billno，序列为 13 位, 例如 1234567890953
*/

const (
	HostGI  = "https://gi.jkgsoft.com"
	HostGCI = "https://gci.jkgsoft.com"
	CAgent  = "DJ9_AGIN"
	MD5Key  = "Rr6GhEHqjJ4s"
	DESKey  = "SzNwjutz"

	AcTypeTryPlay   = "0" //试玩账号
	AcTypeRealMoney = "1" //真钱账号

	DoBusinessUrl = HostGI + "/doBusiness.do"
)

type GameAGin struct {
	HostGI  string
	HostGCI string
	Agent   string
	Md5Key  string
	DesKey  string
}

type BaseReq struct {
	Params string
	Key    string
}

func newGameAGin() *GameAGin {
	return &GameAGin{
		HostGI:  HostGI,
		HostGCI: HostGCI,
		Agent:   CAgent,
		Md5Key:  MD5Key,
		DesKey:  DESKey,
	}
}

func generateLoginSrcParam(agent, loginName, method, acType, password, oddType, cur string) string {
	return fmt.Sprintf("cagent=%v/\\\\/logginname=%v/\\\\/method=%v/\\\\/actype=%v/\\\\/password=%v/\\\\/oddtype=%v/\\\\/cur=%v",
		agent, loginName, method, acType, password, oddType, cur)
}

func generateGetBalanceSrcParam(agent, loginName, method, acType, password, cur string) string {
	return fmt.Sprintf("cagent=%v/\\\\/loginname=%v/\\\\/method=%v/\\\\/actype=%v/\\\\/password=%v/\\\\/cur=%v",
		agent, loginName, method, acType, password, cur)
}

func generateTransferSrcParams(agent, method, loginName, billNo, tp, credit, acType, password, cur string) string {
	return fmt.Sprintf("cagent=%v/\\\\/method=%v/\\\\/loginname=%v/\\\\/billno=%v/\\\\/type=%v/\\\\/credit=%v/\\\\/actype=%v/\\\\/password=%v/\\\\/cur=%v",
		agent, method, loginName, billNo, tp, credit, acType, password, cur)
}

func generateTransferConfirmSrcParams(agent, loginName, method, billNo, tp, credit, acType, flag, password, cur string) string {
	return fmt.Sprintf("cagent=%v/\\\\/loginname=%v/\\\\/method=%v/\\\\/billno=%v/\\\\/type=%v/\\\\/credit=%v/\\\\/actype=%v/\\\\/flag=%v/\\\\/password=%v/\\\\/cur=%v",
		agent, loginName, method, billNo, tp, credit, acType, flag, password, cur)
}

func generateQosSrcParams(agent, billNo, method, acType, cur string) string {
	return fmt.Sprintf("cagent=%v/\\\\/billno=%v/\\\\/method=%v/\\\\/actype=%v/\\\\/cur=%v",
		agent, billNo, method, acType, cur)
}

func generateUrlParam(params, key string) string {
	query := url.Values{}
	query.Add("params", params)
	query.Add("key", key)
	return query.Encode()
}

// req 参数列表：
// 参数名		|数据类型	|说明
// ---------------------------------------
// ac_type:		|string		|"0"-试玩账号，"1"-真钱账号
// login_name:	|string		|用户名
// password:	|string		|密码
func (g *GameAGin) checkOrCreateGameAccount(req map[string]interface{}) (interface{}, error) {
	method := "lg"                    //检测并创建游戏账号，login缩写
	acType := req["ac_type"].(string) //0-试玩账号，1-真钱账号
	loginName := req["login_name"].(string)
	password := req["password"].(string)
	oddType := "A" //盘口，即可下注范围，默认A盘口，A盘口可下注范围：20~50000
	cur := "CNY"   //人民币
	srcParams := generateLoginSrcParam(g.Agent, loginName, method, acType, password, oddType, cur)
	params := encrypt.DESEncrypt(srcParams, g.DesKey)
	fmt.Println(srcParams)
	fmt.Println(params)
	key := encrypt.MD5(params + g.Md5Key)
	fmt.Println(key)

	resp, err := utils.HttpGet(DoBusinessUrl + "?" + generateUrlParam(params, key))
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *GameAGin) Register(req map[string]interface{}) (resp interface{}, err error) {
	return g.checkOrCreateGameAccount(req)
}

func (g *GameAGin) Login(req map[string]interface{}) (resp interface{}, err error) {
	return g.checkOrCreateGameAccount(req)
}

// req 参数列表：
// 参数名		|数据类型	|说明
// ---------------------------------------
// ac_type:		|string		|"0"-试玩账号，"1"-真钱账号
// login_name:	|string		|用户名
// password:	|string		|密码
func (g *GameAGin) GetBalance(req map[string]interface{}) (interface{}, error) {
	method := "gb"                    //查询余额，GetBalance缩写
	acType := req["ac_type"].(string) //0-试玩账号，1-真钱账号
	loginName := req["login_name"].(string)
	password := req["password"].(string)
	cur := "CNY" //人民币
	srcParams := generateGetBalanceSrcParam(g.Agent, loginName, method, acType, password, cur)
	params := encrypt.DESEncrypt(srcParams, g.DesKey)
	fmt.Println(srcParams)
	fmt.Println(params)
	key := encrypt.MD5(params + g.Md5Key)
	fmt.Println(key)

	resp, err := utils.HttpGet(DoBusinessUrl + "?" + generateUrlParam(params, key))
	if err != nil {
		return nil, err
	}

	return resp, nil
}

// req 参数列表：
// 参数名		|数据类型	|说明
// ---------------------------------------
// ac_type:		|string		|"0"-试玩账号，"1"-真钱账号
// login_name:	|string		|用户名
// password:	|string		|密码
// bill_no:		|string		|序列号
// credit:		|string		|金额，整数转字符串
func (g *GameAGin) Account2GameTransfer(req map[string]interface{}) (interface{}, error) {
	req["type"] = "IN"
	//step1.预备转账
	resp1, err1 := g.prepareTransferCredit(req)
	if err1 != nil {
		fmt.Println(resp1)
		//todo: 应该根据resp1字段判断
		req["flag"] = "0"
	} else {
		req["flag"] = "1"
	}

	//step2.转账确认
	return g.transferCreditConfirm(req)
}

// req 参数列表：
// 参数名		|数据类型	|说明
// ---------------------------------------
// ac_type:		|string		|"0"-试玩账号，"1"-真钱账号
// login_name:	|string		|用户名
// password:	|string		|密码
// bill_no:		|string		|序列号
// credit:		|string		|金额，整数转字符串
func (g *GameAGin) Game2AccountTransfer(req map[string]interface{}) (interface{}, error) {
	req["type"] = "OUT"
	//step1.预备转账
	resp1, err1 := g.prepareTransferCredit(req)
	if err1 != nil {
		fmt.Println(resp1)
		//todo: 应该根据resp1字段判断
		req["flag"] = "0"
	} else {
		req["flag"] = "1"
	}

	//step2.转账确认
	return g.transferCreditConfirm(req)
}

func (g *GameAGin) prepareTransferCredit(req map[string]interface{}) (interface{}, error) {
	loginName := req["login_name"].(string)
	method := "tc"                    //预备转账，PrepareTransferCredit
	billNo := req["bill_no"].(string) //billno=(cagent+序列),序列是唯一的13~16位数,例如:cagent=‘XXXXX’及序列=1234567890987,那么billno=XXXXX1234567890987
	tp := req["type"].(string)        //IN: 从网站账号转款到游戏账号;OUT: 從遊戲账號转款到網站賬號
	credit := req["credit"].(string)  //BBIN平台在转入或转出额度时,只能整数转入或转出,不能带小数
	acType := req["ac_type"].(string) //0-试玩账号，1-真钱账号
	password := req["password"].(string)
	cur := "CNY" //人民币
	srcParams := generateTransferSrcParams(g.Agent, method, loginName, billNo, tp, credit, acType, password, cur)
	params := encrypt.DESEncrypt(srcParams, g.DesKey)
	fmt.Println(srcParams)
	fmt.Println(params)
	key := encrypt.MD5(params + g.Md5Key)
	fmt.Println(key)

	resp, err := utils.HttpGet(DoBusinessUrl + "?" + generateUrlParam(params, key))
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *GameAGin) transferCreditConfirm(req map[string]interface{}) (interface{}, error) {
	loginName := req["login_name"].(string)
	method := "tcc" //转账确认，TransferCreditConfirm
	billNo := req["bill_no"].(string)
	tp := req["type"].(string)
	credit := req["credit"].(string)
	acType := req["ac_type"].(string)
	flag := req["flag"].(string) //1-代表调用‘预备转账 PrepareTransferCredit’API成功；0-代表调用‘預備轉賬 PrepareTransferCredit’出错或 出现错误码
	password := req["password"].(string)
	cur := "CNY" //人民币
	srcParams := generateTransferConfirmSrcParams(g.Agent, loginName, method, billNo, tp, credit, acType, flag, password, cur)
	params := encrypt.DESEncrypt(srcParams, g.DesKey)
	fmt.Println(srcParams)
	fmt.Println(params)
	key := encrypt.MD5(params + g.Md5Key)
	fmt.Println(key)

	resp, err := utils.HttpGet(DoBusinessUrl + "?" + generateUrlParam(params, key))
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *GameAGin) QueryRecord(req map[string]interface{}) (interface{}, error) {
	billNo := req["bill_no"].(string)
	method := "qos" //查询订单状态，QueryOrderStatus
	acType := req["ac_type"].(string)
	cur := "CNY" //人民币
	srcParams := generateQosSrcParams(g.Agent, billNo, method, acType, cur)
	params := encrypt.DESEncrypt(srcParams, g.DesKey)
	fmt.Println(srcParams)
	fmt.Println(params)
	key := encrypt.MD5(params + g.Md5Key)
	fmt.Println(key)

	resp, err := utils.HttpGet(DoBusinessUrl + "?" + generateUrlParam(params, key))
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *GameAGin) GetPrefix() string {
	return strings.Split(CAgent, "_")[0]
}

func NewAGinGame() game.Game {
	return newGameAGin()
}

func init() {
	game.Register("agin", NewAGinGame)
}
