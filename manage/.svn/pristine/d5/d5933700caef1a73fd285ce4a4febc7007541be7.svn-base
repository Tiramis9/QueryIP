package action

import (
	"errors"
	"fmt"
	"golang_game_merchant/global/status"
	"golang_game_merchant/model"
	"strings"
	"time"

	//"reflect"

	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

var (
	// 根据请求的message URL 赋值
	MESSAGETYPE int
	timeLayout  = "2006-01-02 15:04:05"
)

type (
	//会员结收消息结构体
	MessageInfoRequst struct {
		Content    string `json:"content"`
		Title      string `json:"title"`
		UserName   string `json:"username"`
		ClassId    string `json:"class_id"`    // 层级id
		Groupid    string `json:"group_id"`    // 等级id
		MerchantID int    `json:"merchant_id"` // 传入参数未容错
		Type       int    `json:"type"`        // '消息类型0.商户消息; 1.会员站内信; 2.代理站内信',
	}
	// (消息管理)
	MessageInfo struct {
		Id         interface{} `json:"id"`
		Content    interface{} `json:"content"`
		CreateTime interface{} `json:"create_time"`
		Type       interface{} `json:"type"`
		Title      interface{} `json:"title"`
		ToUser     interface{} `json:"to_user"`
		ToAgent    interface{} `json:"to_agent"`
		//	EndTime   interface{} `json:"end_time"`
		//MerchantID interface{} `json:"merchant_id"`
	}
	MessageListResponse struct {
		List  []MessageInfo `json:"list"`
		Total int           `json:"total"`
	}
	MessageInfoListRequst struct {
		//Token     string `json:"token"`
		Type       int `json:"type"`
		Page       int `json:"page"`        //页码
		PageCount  int `json:"page_count"`  //每页显示的数量
		MerchantID int `json:"merchant_id"` // 传入参数未容错
	}
	// 	回复 商户用户等级表 list(群）
	GroupList struct {
		Id         int    `json:"id"`
		MerchantId int    `json:"merchant_id"`
		GroupName  string `json:"group_name"`
	}
	// 	回复 商户用户层级表 (渠道) list(群）
	ClassList struct {
		Id         int    `json:"id"`
		MerchantId int    `json:"merchant_id"`
		ClassName  string `json:"class_name"`
	}
)

func MessageAddParamCheck(req *MessageInfoRequst) error {
	if req.Content == "" {
		return errors.New("request content error")
	}
	if req.Title == "" {
		return errors.New("request Title error")
	}
	/*
		if req.Type <= 0 || req.Type >= 4 {
			return errors.New("reques Type error")
		}
	*/
	return nil
}

// 添加会员接收消息 message_to_user_add
func Message2UserAdd(c *gin.Context) {
	MESSAGETYPE = 1
	var request MessageInfoRequst
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	// 参数入参检查
	err := MessageAddParamCheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	timeUnix := time.Now().Unix()
	if request.UserName != "" {
		tx := model.TxBegin()
		stringList := strings.Split(request.UserName, ",")
		touserList, joinId, err := model.MessageUserAppointAddUserCheck(tx, stringList)
		if err != nil {
			tx.Rollback()
			if err == model.REQUESTUSERERROR {
				RespParamErr(c)
				logrus.Error(err)
				return
			}
			RespServerErr(c)
			logrus.Error(err)
			return
		}
		aInfo := model.SysMessage{
			Message: model.Message{
				Content:        request.Content,
				Title:          request.Title,
				Type:           MESSAGETYPE,
				SendMerchantId: request.MerchantID,
				CreateTime:     timeUnix,
				UpdateTime:     timeUnix,
				ToUser:         touserList,
			},
		}
		// 插入多条消息
		if err := aInfo.MessageUserAddInfo(model.Db, joinId); err != nil {
			tx.Rollback()
			RespServerErr(c)
			logrus.Error(err)
			return
		}
		tx.Commit()
		RespSuccess(c)
		return
	}

	tx := model.TxBegin()
	stringClass := strings.Split(request.ClassId, ",")
	stringGroup := strings.Split(request.Groupid, ",")
	touserList, joinId, err := model.MessageUserAppointAddClassCheck(tx, stringClass, stringGroup)
	if err != nil {
		tx.Rollback()
		if err == model.REQUESTUSERERROR {
			RespParamErr(c)
			logrus.Error(err)
			return
		}
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	aInfo := model.SysMessage{
		Message: model.Message{
			Content:        request.Content,
			Title:          request.Title,
			Type:           MESSAGETYPE,
			SendMerchantId: request.MerchantID,
			CreateTime:     timeUnix,
			UpdateTime:     timeUnix,
			ToUser:         touserList,
		},
	}
	// 插入多条消息
	if err := aInfo.MessageUserAddInfo(model.Db, joinId); err != nil {
		tx.Rollback()
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	tx.Commit()
	RespSuccess(c)
}

// 添加代理接收消息 message_to_agent_add
func Message2AgentAdd(c *gin.Context) {
	MESSAGETYPE = 2
	var request MessageInfoRequst
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	// 参数入参检查
	err := MessageAddParamCheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	timeUnix := time.Now().Unix()
	if request.UserName != "" {
		tx := model.TxBegin()
		stringList := strings.Split(request.UserName, ",")
		touserList, joinId, err := model.MessageUserAgentAddUserCheck(tx, stringList)
		if err != nil {
			tx.Rollback()
			if err == model.REQUESTUSERERROR {
				RespParamErr(c)
				logrus.Error(err)
				return
			}
			RespServerErr(c)
			logrus.Error(err)
			return
		}
		aInfo := model.SysMessage{
			Message: model.Message{
				Content:        request.Content,
				Title:          request.Title,
				Type:           MESSAGETYPE,
				SendMerchantId: request.MerchantID,
				CreateTime:     timeUnix,
				UpdateTime:     timeUnix,
				ToAgent:        touserList,
			},
		}
		// 指定插入消息
		if err := aInfo.AgentUserAddInfo(model.Db, joinId); err != nil {
			tx.Rollback()
			RespServerErr(c)
			logrus.Error(err)
			return
		}
		tx.Commit()
		RespSuccess(c)
		return
	}

	tx := model.TxBegin()
	stringClass := strings.Split(request.ClassId, ",")
	touserList, joinId, err := model.MessageUserAgentAddClassCheck(tx, stringClass)
	if err != nil {
		tx.Rollback()
		if err == model.REQUESTUSERERROR {
			RespParamErr(c)
			logrus.Error(err)
			return
		}
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	aInfo := model.SysMessage{
		Message: model.Message{
			Content:        request.Content,
			Title:          request.Title,
			Type:           MESSAGETYPE,
			SendMerchantId: request.MerchantID,
			CreateTime:     timeUnix,
			UpdateTime:     timeUnix,
			ToAgent:        touserList,
		},
	}
	// 插入多条消息
	if err := aInfo.AgentUserAddInfo(model.Db, joinId); err != nil {
		tx.Rollback()
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	tx.Commit()
	RespSuccess(c)
}

func MessageListParamCheck(request *MessageInfoListRequst) (map[string]interface{}, error) {
	msg := make(map[string]interface{})
	if request.Type < 0 || request.Type >= 3 {
		return nil, errors.New("request Type parameter error ")
	}
	if request.Page < 1 {
		request.Page = 1
	}
	if request.PageCount <= 0 {
		return nil, errors.New("page count parameter error")
	}
	msg["type"] = request.Type
	msg["page"] = request.Page
	msg["page_count"] = request.PageCount
	msg["merchant_id"] = request.MerchantID
	return msg, nil
}

// 获取会员等级
func MemberGroupList(c *gin.Context) {

	// 检查token有效 ----待完成 GetGroupList
	// GET 数据类型 GET
	list, err := model.GetGroupListInfo(model.Db)
	if err != nil {
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	aInfo := make([]GroupList, 0)
	for i := range list {
		temp := GroupList{
			Id:         list[i].Id,
			MerchantId: list[i].MerchantId,
			GroupName:  list[i].GroupName,
		}
		aInfo = append(aInfo, temp)
	}
	RespJson(c, status.OK, aInfo)
}

// 获取会员层级
func MemberClassList(c *gin.Context) {
	fmt.Println("ran MemberClassList")
	// 检查token有效 ----待完成 GetGroupList
	// GET 数据类型 GET

	list, err := model.GetClassListInfo(model.Db)
	if err != nil {
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	aInfo := make([]ClassList, 0)
	for i := range list {
		temp := ClassList{
			Id:         list[i].Id,
			MerchantId: list[i].MerchantId,
			ClassName:  list[i].ClassName,
		}
		aInfo = append(aInfo, temp)
	}
	RespJson(c, status.OK, aInfo)
}

//消息列表
func MessageList(c *gin.Context) {
	var request MessageInfoListRequst
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}

	// 参数入参检查
	msg, err := MessageListParamCheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	list, count, err := model.GetMessageInfoList(model.Db, request.Page, request.PageCount, msg)
	if err != nil {
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	resp := MessageListResponse{
		List:  make([]MessageInfo, 0),
		Total: count,
	}
	for i := range list {
		dataTimeStr := time.Unix(list[i].CreateTime, 0).Format(timeLayout)
		temp := MessageInfo{
			Content:    list[i].Content,
			CreateTime: dataTimeStr, // list[i].CreateTime,
			Title:      list[i].Title,
			Id:         list[i].Id,
			Type:       list[i].Type,
			ToUser:     list[i].ToUser,
			ToAgent:    list[i].ToAgent,
		}
		resp.List = append(resp.List, temp)
	}
	RespJson(c, status.OK, resp)
}
