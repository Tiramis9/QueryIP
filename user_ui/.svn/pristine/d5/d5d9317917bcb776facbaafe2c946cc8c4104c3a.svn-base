package model

import (
	"github.com/jinzhu/gorm"
	"github.com/sirupsen/logrus"
)

type UserBill struct {
	Id         int     `json:"id"`
	UserId     int     `json:"user_id,omitempty"`
	SettAmt    float64 `json:"sett_amt"`
	Type       int     `json:"type"`
	Memo       string  `json:"memo"`
	OrderSn    string  `json:"order_no"`
	Status     int     `json:"status"`
	CreateTime int64   `json:"create_time"`
	Code       int     `json:"code,omitempty"`
	UpdateTime int64   `json:"update_time"`
	CodeSn     string  `json:"code_sn"`
	OldBalance float64 `json:"old_balance"`
	About      string  `json:"about"`
	Balance    float64 `json:"balance"`
}

type UserWithdraw struct {
	UserId     int     `json:"user_id"`
	CardNo     string  `json:"card_no"`
	Money      float64 `json:"money"`
	Status     int     `json:"status"`
	Memo       string  `json:"memo"`
	Addition   string  `json:"addition"`
	CreateTime int64   `json:"create_time"`
	OrderSn    string  `json:"order_sn"`
	Fee        float64 `json:fee`
}

type UserBillTotal struct {
	Code  int     `json:"code"`
	Total float64 `json:"total"`
}

type UserBillInterface interface {
	GetUserBillListByUserId()
	GetUserBillCount()
}

//获取资金列表
func (u UserBill) GetUserBillListByUserId(page int, pagecount int, start_time int, end_time int) interface{} {
	var billlist []UserBill
	/*stmt, err := Db.Prepare("SELECT id,sett_amt,memo,type,order_sn,status,create_time FROM user_bill WHERE user_id = ? AND" +
		" create_time >= ? AND create_time <= ? LIMIT ?, ?")
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return nil
	}
	rows, err := stmt.Query(u.User_id, start_time, end_time, (page-1)*pagecount, pagecount)
	defer rows.Close()
	if err != nil {
		fmt.Println(err)
		return nil
	}
	for rows.Next() {
		var conv UserBill
		rows.Scan(&conv.Id, &conv.Sett_amt, &conv.Memo, &conv.Type, &conv.Order_sn, &conv.Status, &conv.Create_time)
		billlist = append(billlist, conv)
	}*/
	return billlist
}

//获取资金列表记录数
func (u UserBill) GetUserBillCount(start_time int, end_time int) int {
	var total int
	/*stmt, err := Db.Prepare("SELECT count(id) as total FROM user_bill Where user_id=? AND create_time >=? AND create_time <=?")
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return 0
	}
	row := stmt.QueryRow(u.User_id, start_time, end_time)
	//总计
	row.Scan(&total)
	fmt.Println("total ", total)*/
	return total
}

func (userWithdraw UserWithdraw) ApplayWithdraw(db *gorm.DB) (error, int) {
	var user User
	//事务开始
	tx := db.Begin()
	//判断中心余额是否足够
	if err := tx.Table("user").Select("balance").Where("id=?", userWithdraw.UserId).First(&user).Error; err != nil {
		logrus.Error(err)
		return err, 0
	}
	balance := user.Balance
	if balance < userWithdraw.Money {
		tx.Callback()
		return nil, 101 //中心余额不足
	}
	//较少中心账户余额
	if err := tx.Table("user").Where("id=?", userWithdraw.UserId).UpdateColumn("balance", gorm.Expr("balance-?"), userWithdraw.Money).Error; err != nil {
		logrus.Error(err)
		tx.Callback()
		return err, 0
	}
	//插入提现记录
	if err := db.Create(&userWithdraw).Error; err != nil {
		logrus.Error(err)
		tx.Callback()
		return err, 0
	}
	return nil, 200
}

//获取资金列表
func (u UserBill) GetUserBillTotalByUserId() []UserBillTotal {
	var ubt []UserBillTotal
	/*stmt, err := Db.Prepare("SELECT code,sum(sett_amt) as total FROM user_bill WHERE user_id = ? GROUP BY code")
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return billlist
	}
	rows, err := stmt.Query(u.User_id)
	defer rows.Close()
	if err != nil {
		fmt.Println(err)
		return billlist
	}
	for rows.Next() {
		var conv UserBill
		rows.Scan(&conv.Code, &conv.Total)
		billlist = append(billlist, conv)
	}*/
	return ubt
}
