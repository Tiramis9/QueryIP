package action

import (
	"encoding/json"
	"errors"
	"golang_game_merchant/global/status"
	"golang_game_merchant/model"
	"io/ioutil"
	"runtime"
	"strconv"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

type (
	// (消息管理) // 活动的ID ，description，status,create_time,create_time
	ActiveInfo struct {
		Id          interface{} `json:"id"`
		CreateTime  interface{} `json:"start_time"`
		EndTime     interface{} `json:"end_time"`
		Status      interface{} `json:"status"`
		Description interface{} `json:"description"`
		ActType     interface{} `json:"act_type"`
	}
	ActiveListResponse struct {
		List  []ActiveInfo `json:"list"`
		Total int          `json:"total"`
	}
)
type MerchantActiveReq struct {
	Id int `json:"id" binding:"required"`
}

func ActiveListParamCheck(request *MessageInfoListRequst) (map[string]interface{}, error) {
	msg := make(map[string]interface{})

	if request.Type != -1 && request.Type != 1 {
		return nil, errors.New("request Type parameter error ")
	}

	if request.Page < 1 {
		request.Page = 1
	}
	if request.PageCount <= 0 {
		return nil, errors.New("page count parameter error")
	}
	msg["type"] = request.Type
	msg["page"] = request.Page
	msg["page_count"] = request.PageCount
	msg["merchant_id"] = request.MerchantID
	return msg, nil
}

// 获取活动信息list
func MerchantActiveOverviewList(c *gin.Context) {
	var request MessageInfoListRequst
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}

	// 参数入参检查
	msg, err := ActiveListParamCheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}

	list, count, err := model.GetMerchantActiveListInfo(model.Db, msg)
	if err != nil {
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	resp := ActiveListResponse{
		List:  make([]ActiveInfo, 0),
		Total: count,
	}
	for i := range list {
		dataBeginTime := time.Unix(list[i].CreateTime, 0).Format(timeLayout)
		dataEndTime := time.Unix(list[i].EndTime, 0).Format(timeLayout)
		temp := ActiveInfo{
			CreateTime:  dataBeginTime, // list[i].CreateTime,
			EndTime:     dataEndTime,
			Description: list[i].Description,
			Id:          list[i].Id,
			Status:      list[i].Status,
			ActType:     list[i].ActType,
		}
		resp.List = append(resp.List, temp)
	}
	RespJson(c, status.OK, resp)
}

func MerchantActivec(c *gin.Context) {

}

// 商户获取
func SysActiveInfo(c *gin.Context) {
	info, err := model.GetPayActiveInfo(model.Db, 1)
	if err != nil {
		RespServerErr(c)
		return
	}
	RespJson(c, status.OK, info)
}

//获取商户活动
func MerchantActiveGet(c *gin.Context) {
	var m MerchantActiveReq
	if err := c.BindJSON(&m); err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}
	merchantId := 1
	info, err := model.GetMerchantActive(model.Db, m.Id, merchantId)
	if err != nil {
		RespServerErr(c)
		return
	}
	RespJson(c, status.OK, info)
}

//添加商户活动
func MerchantActiveAdd(c *gin.Context) {
	data, _ := ioutil.ReadAll(c.Request.Body)
	dataJson := string(data)
	m := make(map[string]interface{})
	err := json.Unmarshal([]byte(dataJson), &m)
	if err != nil {
		RespServerErr(c)
		return
	}
	aType := 1
	merchantId := 1
	//fmt.Println(m)
	var ma model.MerchantActive
	ma.MerchantId = merchantId
	ok, errs := checkFields(aType, merchantId, m, &ma)
	if !ok {
		RespJson(c, errs, nil)
		return
	}
	timestamp := time.Now().Unix()
	ma.CreateTime, ma.UpdateTime = timestamp, timestamp
	//验证成功
	id, err := ma.AddMerchantActivePay(model.Db)
	if err != nil {
		RespServerErr(c)
		return
	}
	RespJson(c, status.OK, id)
}

//检验参数
func checkFields(aType int, merchId int, m map[string]interface{}, ma *model.MerchantActive) (bool, int) {
	//判断标题等
	v, ok := m["act_title"]
	if !ok {
		logrus.Debug("act_title1:", m["act_title"])
		return false, status.ErrParamError
	}
	v_string, ok := v.(string)
	if !ok {
		logrus.Debug("act_title2:", m["act_title"])
		return false, status.ErrParamError
	}
	ma.ActTitle = v_string
	//判断类型
	v, ok = m["act_type"]
	if !ok {
		logrus.Debug("act_type:", m["act_type"])
		return false, status.ErrParamError
	}
	v_float64, ok := v.(float64)
	if !ok {
		logrus.Debug("act_type2:", m["act_type"])
		return false, status.ErrParamError
	}
	ma.ActType = int(v_float64)
	//判断web图片资源
	v, ok = m["resource_web"]
	if !ok {
		logrus.Debug("resource_web:", m["resource_web"])
		return false, status.ErrParamError
	}
	v_string, ok = v.(string)
	if !ok {
		logrus.Debug("resource_web2:", m["resource_web"])
		return false, status.ErrParamError
	}
	ma.ResourceWeb = v_string

	//判断wap图片资源
	v, ok = m["resource_wap"]
	if !ok {
		logrus.Debug("resource_wap:", m["resource_wap"])
		return false, status.ErrParamError
	}
	v_string, ok = v.(string)
	if !ok {
		logrus.Debug("resource_wap2:", m["resource_web"])
		return false, status.ErrParamError
	}
	ma.ResourceWap = v_string
	//判断时间
	v, ok = m["start_time"]
	if !ok {
		logrus.Debug("start_time1:", m["start_time"])
		return false, status.ErrParamError
	}
	v1, ok := v.(float64)
	if !ok {
		logrus.Debug("start_time2:", m["start_time"])
		return false, status.ErrParamError
	}
	ma.StartTime = int64(v1)
	//判断时间
	v, ok = m["end_time"]
	if !ok {
		logrus.Debug("end_time1:", m["end_time"])
		return false, status.ErrParamError
	}
	v2, ok := v.(float64)
	if !ok {
		logrus.Debug("end_time2:", m["end_time"])
		return false, status.ErrParamError
	}
	ma.EndTime = int64(v2) //结束时间
	if v1 > v2 {           //开始时间大于结束时间
		logrus.Debug("start_end_time:")
		return false, status.ErrParamError
	}

	v, ok = m["status"]
	if !ok {
		logrus.Debug("status1:", m["status"])
		return false, status.ErrParamError
	}
	v1, ok = v.(float64)
	if !ok {
		logrus.Debug("status2:", m["status"])
		return false, status.ErrParamError
	}
	ma.Status = int(v1) // 状态

	v, ok = m["related_game"]
	if !ok {
		logrus.Debug("related_game:", m["related_game"])
		return false, status.ErrParamError
	}
	v_string, ok = v.(string)
	if !ok {
		logrus.Debug("related_game2:", m["related_game"])
		return false, status.ErrParamError
	}
	ma.RelatedGame = v_string // 关联游戏

	v, ok = m["content"]
	if ok {
		v_string, ok2 := v.(string)
		if !ok2 {
			logrus.Debug("content:", m["content"])
			return false, status.ErrParamError
		}
		ma.Content = v_string // 描述
	}

	joinLimit := make(map[string]interface{})
	rewardConfig := make(map[string]interface{})
	if aType == 1 { //如果充值活动
		//取出充值活动中的key
		info, err := model.GetSysActiveInfo(model.Db, 1)
		if err != nil {
			return false, status.ErrServerError
		}
		strs := strings.Split(info.Condition, ",")
		for i := range strs {
			v, ok := m[strs[i]]
			if !ok {
				_, _, line, _ := runtime.Caller(0)
				logrus.Debug("action.sys_active:", line, ";", strs[i], ";", m[strs[i]])
				return false, status.ErrParamError
			}
			if strs[i] == "join_group" { //参加等级
				v2, ok := v.(string)
				if !ok {
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				strs := strings.Split(v2, ",")
				////查询所有等级
				list, err := model.GetMerchantUserSimpleGroupList(model.Db, merchId)
				if err != nil {
					return false, status.ErrServerError
				}
				for i := range strs {
					gId, err := strconv.Atoi(strs[i])
					if err != nil {
						_, _, line, _ := runtime.Caller(0)
						logrus.Debug("action.sys_active:", line)
						return false, status.ErrParamError
					}
					flag := false
					//判断等级Id是否在列表中
					for j := range list {
						if gId == list[j].Id { //当且等级Id在所属等级列表中才为真
							flag = true
						}
					}
					if !flag {
						_, _, line, _ := runtime.Caller(0)
						logrus.Debug("action.sys_active:", line)
						return false, status.ErrParamError
					}
				}
				joinLimit["join_group"] = v2
			}
			if strs[i] == "join_class" { //参与层级
				v2, ok := v.(string)
				if !ok {
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				strs := strings.Split(v2, ",")
				//查询所有层级
				list, err := model.GetMerchantUserClassList(model.Db, merchId)
				if err != nil {
					return false, status.ErrServerError
				}
				for i := range strs {
					gId, err := strconv.Atoi(strs[i])
					if err != nil {
						_, _, line, _ := runtime.Caller(0)
						logrus.Debug("action.sys_active:", line)
						return false, status.ErrParamError
					}
					flag := false
					//判断等级Id是否在列表中
					for j := range list {
						if gId == list[j].Id { //当且等级Id在所属等级列表中才为真
							flag = true
						}
					}
					if !flag {
						_, _, line, _ := runtime.Caller(0)
						logrus.Debug("action.sys_active:", line)
						return false, status.ErrParamError
					}
				}
				joinLimit["join_class"] = v2
			}
			if strs[i] == "join_device" { //参与设备
				v2, ok := v.(float64)
				if !ok {
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				if v2 != 1 && v2 != 2 { // 1.网站 2.手机
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				joinLimit["join_device"] = int(v2)
			}
			if strs[i] == "join_pay_type" { //优惠充值
				v2, ok := v.(string)
				if !ok {
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				strs := strings.Split(v2, ",")
				//查询所有的支付方式
				list, err := model.GetPayTypeList(model.Db)
				if err != nil {
					return false, status.ErrServerError
				}
				//将list转map
				m := make(map[string]interface{})
				for i := range list {
					m[list[i].PayType] = 1
				}
				for i := range strs {
					if _, ok := m[strs[i]]; !ok { //查看传的支付方式是否在系统支持的列表中
						_, _, line, _ := runtime.Caller(0)
						logrus.Debug("action.sys_active:", line)
						return false, status.ErrParamError
					}
				}
				joinLimit["join_pay_type"] = v2
			}
			if strs[i] == "recharge_type" {
				v2, ok := v.(string)
				if !ok {
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				if v2 != "day_single" && v2 != "week_single" && v2 != "month_single" && v2 != "first" {
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				joinLimit["recharge_type"] = v2
			}
			if strs[i] == "recharge_type_equal" {
				v2, ok := v.(string)
				if !ok {
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				if v2 != ">=" && v2 != "==" {
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				joinLimit["recharge_type_equal"] = v2
			}
			if strs[i] == "prize_amount" {
				v2, ok := v.(float64)
				if !ok {
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				if v2 < 0 { //奖励金额不能小于0
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				rewardConfig["prize_amount"] = v2
			}
			if strs[i] == "apply_count" {
				v2, ok := v.(float64)
				if !ok {
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				if v2 < 0 { //申请次数不能小于0
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				joinLimit["apply_count"] = int(v2)
			}
			if strs[i] == "withdraw_bill_limit" {
				v2, ok := v.(float64)
				if !ok {
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				if v2 <= 0 { //提现流水要求不能小于等于0倍
					_, _, line, _ := runtime.Caller(0)
					logrus.Debug("action.sys_active:", line)
					return false, status.ErrParamError
				}
				joinLimit["withdraw_bill_limit"] = int(v2)
			}
		}
		js1, err := json.Marshal(joinLimit)
		if err != nil {
			return false, status.ErrServerError
		}
		ma.JoinLimit = string(js1)
		js2, err := json.Marshal(rewardConfig)
		if err != nil {
			return false, status.ErrServerError
		}
		ma.RewardConfig = string(js2)
	}
	return true, 0
}
