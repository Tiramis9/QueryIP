package action

import (
	"crypto/md5"
	//"errors"
	"fmt"
	"github.com/sirupsen/logrus"
	"golang_game_merchant/global/status"
	"golang_game_merchant/lib/utils"
	"golang_game_merchant/model"
	"io"
	"net/http"
	//utils2 "src/golang_game_merchant/lib/utils"
	"strconv"
	//"time"
	"unicode/utf8"

	"github.com/gin-gonic/gin"
	//"github.com/gomodule/redigo/redisclient"
	"golang_game_merchant/global/redisclient"
)

type (
	//会员列表
	MemberListReq struct {
		ClassId        int    `json:"class_id"`                  //会员层级(渠道)
		GroupId        int    `json:"group_id"`                  //会员等级
		Status         int    `json:"status" binding:"required"` //账号状态 1启用. 0.禁用 必填
		TrueName       string `json:"true_name"`                 //会员姓名
		UserName       string `json:"user_name"`                 //会员账号
		Phone          string `json:"phone,omitempty"`           //会员手机号
		ParentUserName string `json:"parent_user_name"`          //上级代理账号
		Page           int    `json:"page"`                      //页码
		PageCount      int    `json:"page_count"`                //每页显示的数量
	}

	MemberList struct {
		ClassName      interface{} `json:"class_name"`       //会员层级(渠道)
		GroupName      interface{} `json:"group_name"`       //会员等级
		Id             interface{} `json:"id"`               //记录id
		TrueName       interface{} `json:"true_name"`        //会员姓名
		UserName       interface{} `json:"user_name"`        //会员账号
		ParentUserName interface{} `json:"parent_user_name"` //上级代理账号
		Balance        interface{} `json:"balance"`          //账户余额
		LastLoginIp    interface{} `json:"last_login_ip"`    //最后登录ip
		LastLoginTime  interface{} `json:"last_login_time"`  //最后登录时间
		RegTime        interface{} `json:"reg_time"`         //注册时间
		RegIp          interface{} `json:"reg_ip"`           //注册ip
		Phone          interface{} `json:"phone"`            //会员手机号
		Email          interface{} `json:"email"`            //邮箱
		FirstLoginIp   interface{} `json:"first_login_ip"`   //首次登录ip
		FirstLoginTime interface{} `json:"first_login_time"` //首次登录时间
	}

	MemberListResp struct {
		List  []MemberList `json:"list"`  //会员列表
		Total interface{}  `json:"total"` //总数
	}
)

//登录
/*func UserLogin(c *gin.Context) {
	var data interface{}
	username := c.PostForm("username")
	password := c.PostForm("password")
	ip := c.PostForm("ip")
	user_len := utf8.RuneCountInString(username)
	pass_len := utf8.RuneCountInString(password)
	if int(user_len) < 3 || int(user_len) > 15 {
		res := gin.H{"code": 0, "data": nil, "msg": "The user name needs to be between 3 and 15 characters long"}
		c.JSON(http.StatusOK, res)
		return
	}
	if int(pass_len) < 5 || int(pass_len) > 20 {
		res := gin.H{"code": 0, "data": nil, "msg": "The password should be between 5 and 20 characters long"}
		c.JSON(http.StatusOK, res)
		return
	}

	ip_check := utils.RegexpMatch("ip", ip)

	if ip_check == false {
		res := gin.H{"code": 0, "data": nil, "msg": "Please enter the correct IP address"}
		c.JSON(http.StatusOK, res)
		return
	}
	u := model.User{}
	user := u.GetUserByName(username)

	if user.Id == 0 {
		res := gin.H{"code": 0, "data": nil, "msg": "The username does not exist"}
		c.JSON(http.StatusOK, res)
		return
	} else {
		ex_time := 3600
		//盐值和传递的密码md5的加密
		check_pass := md5.New()
		check_str := password + string(user.Salt)
		io.WriteString(check_pass, check_str)
		check_str = fmt.Sprintf("%x", check_pass.Sum(nil))
		if check_str != user.Password {
			res := gin.H{"code": 0, "data": nil, "msg": "User name or password error"}
			c.JSON(http.StatusOK, res)
			return
		}
		w := md5.New()

		rand_str := string(utils.Krand(16, utils.KC_RAND_KIND_ALL)) //3表示随机数包含数字、大小写字母
		token_v := user.Id

		token_v2 := strconv.Itoa(token_v)

		str := rand_str + token_v2

		io.WriteString(w, str)
		token := fmt.Sprintf("%x", w.Sum(nil))

		data = map[string]string{"token": token}
		conn := redisclient.Get()

		//记得销毁本次链连接
		defer conn.Close()

		_, err := conn.Do("SET", token, token_v, "EX", ex_time)
		if err != nil {
			utils.Log(err, "debug", "")
			res := gin.H{"code": 0, "data": nil, "msg": "redisclient set error"}
			c.JSON(http.StatusOK, res)
			return
		}
		//更新登录时间,ip
		login_time := int(time.Now().Unix())
		login_ip := ip

		last_login_time := user.LoginTime

		last_login_ip := string(user.LoginIp)
		update_res, _ := u.UpdateUser_login_info(login_time, login_ip, last_login_time, last_login_ip, user.Id)
		if update_res == false {
			res := gin.H{"code": 0, "data": nil, "msg": "system error"}
			c.JSON(http.StatusOK, res)
			return
		}

	}
	res := gin.H{"code": 1, "data": data, "msg": "ok"}
	c.JSON(http.StatusOK, res)
}*/

//获取注册渲染页面配置
func UserRegisterPageInfo(c *gin.Context) {
	//获取商户id
	merchantIdStr := c.PostForm("merchant_id")
	merchantId, err := strconv.Atoi(merchantIdStr)
	if err != nil {
		panic(err)
	}
	merchant, err := model.GetMerchantWebsiteReg(model.Db, merchantId)
	if err == model.ErrRecordNotFound {
		res := gin.H{"code": 0, "data": nil, "msg": "Merchant does not exist"}
		c.JSON(http.StatusOK, res)
		return
	}

	res := gin.H{"code": 1, "data": merchant, "msg": "ok"}
	c.JSON(http.StatusOK, res)
}

//登出
func UserLogout(c *gin.Context) {
	token := c.PostForm("token")

	//连接redis
	conn := redisclient.Get()

	//记得销毁本次链连接
	defer conn.Close()
	_, err := conn.Do("DEL", token)
	if err != nil {
		res := gin.H{"code": 0, "data": nil, "msg": utils.ERR_SYSTEM_ERROR}
		c.JSON(http.StatusOK, res)
		return
	}

	res := gin.H{"code": 1, "data": nil, "msg": "ok"}
	c.JSON(http.StatusOK, res)
	return

}

//用户信息
func UserInfo(c *gin.Context) {
	var data interface{}
	user_id, ok := c.Get("user_id")
	if !ok {
		res := gin.H{"code": 0, "data": data, "msg": "fail"}
		c.JSON(http.StatusOK, res)
		return
	}
	//user_id := 1
	userid := user_id.(int)
	user, _ := model.GetUserById(model.Db, userid)
	//"security": "101", "email": "", "qq": "", "receiving_address": "深圳市宝安区", "birth": "1997-07-29"
	if user.Id != 0 {
		data = user
	}
	res := gin.H{"code": 1, "data": data, "msg": "ok"}
	c.JSON(http.StatusOK, res)
}

//用户基本信息
func UserBaseInfo(c *gin.Context) {
	var data interface{}
	user_id, ok := c.Get("user_id")
	if !ok {
		res := gin.H{"code": 0, "data": data, "msg": "fail"}
		c.JSON(http.StatusOK, res)
		return
	}
	//user_id := 1
	userid := user_id.(int)
	user, _ := model.GetUserBaseInfo(model.Db, userid)
	//"security": "101", "email": "", "qq": "", "receiving_address": "深圳市宝安区", "birth": "1997-07-29"
	if user.Id != 0 {
		data = user
	}
	res := gin.H{"code": 1, "data": data, "msg": "ok"}
	c.JSON(http.StatusOK, res)
}

//绑定邮箱
func UserBindEmail(c *gin.Context) {
	userid, ok := c.Get("user_id")
	if !ok {
		res := gin.H{"code": 0, "data": nil, "msg": "fail"}
		c.JSON(http.StatusOK, res)
		return
	}

	userid_int := userid.(int)

	email := c.PostForm("email")

	reg_check := utils.RegexpMatch("email", email)
	if reg_check == false {
		res := gin.H{"code": 0, "data": nil, "msg": "Wrong email format"}
		c.JSON(http.StatusOK, res)
		return
	}
	u := model.User{}

	update_res, _ := u.UpdateUser(userid_int, "email", email)

	if update_res == false {
		res := gin.H{"code": 0, "data": nil, "msg": utils.ERR_SYSTEM_ERROR}
		c.JSON(http.StatusOK, res)
	} else {
		res := gin.H{"code": 1, "data": nil, "msg": "ok"}
		c.JSON(http.StatusOK, res)
	}

}

//绑定手机
func UserBindPhone(c *gin.Context) {
	userid, ok := c.Get("user_id")
	if !ok {
		res := gin.H{"code": 0, "data": nil, "msg": "fail"}
		c.JSON(http.StatusOK, res)
		return
	}
	userid_int := userid.(int)

	phone := c.PostForm("phone")
	area_code := c.PostForm("area_code")

	phone_len := utf8.RuneCountInString(phone)
	if phone_len < 1 {
		res := gin.H{"code": 0, "data": nil, "msg": utils.ERR_LACK_PARAMETERS}
		c.JSON(http.StatusOK, res)
		return
	}

	area_code_len := utf8.RuneCountInString(area_code)

	if area_code_len < 1 {
		res := gin.H{"code": 0, "data": nil, "msg": utils.ERR_LACK_PARAMETERS}
		c.JSON(http.StatusOK, res)
		return
	}

	area_code_int, error := strconv.Atoi(area_code)
	if error != nil {
		res := gin.H{"code": 0, "data": nil, "msg": "fail"}
		c.JSON(http.StatusOK, res)
		fmt.Println(error)
		return
	}

	u := model.User{}

	update_res, _ := u.UpdateUser_phone(phone, area_code_int, userid_int)

	if update_res == false {
		res := gin.H{"code": 0, "data": nil, "msg": "system error"}
		c.JSON(http.StatusOK, res)
	} else {
		res := gin.H{"code": 1, "data": nil, "msg": "ok"}
		c.JSON(http.StatusOK, res)
	}

}

//重置密码
func ResetPass(c *gin.Context) {
	userid, ok := c.Get("user_id")
	if !ok {
		res := gin.H{"code": 0, "data": nil, "msg": "fail"}
		c.JSON(http.StatusOK, res)
		return
	}
	userid_int := userid.(int)

	old_pass := c.PostForm("old_pass")
	new_pass := c.PostForm("new_pass")
	check_pass := c.PostForm("check_pass")

	if new_pass != check_pass {
		res := gin.H{"code": 0, "data": nil, "msg": "The two passwords do not match"}
		c.JSON(http.StatusOK, res)
		return
	}

	u := model.User{}
	user := u.GetUserByToken(userid_int)
	//盐值和传递的密码md5的加密
	w := md5.New()
	check_str := old_pass + string(user.Salt)
	io.WriteString(w, check_str)
	check_str = fmt.Sprintf("%x", w.Sum(nil))
	if check_str != user.Password {
		res := gin.H{"code": 0, "data": nil, "msg": "password error"}
		c.JSON(http.StatusOK, res)
		return
	}
	//生成新密码
	w2 := md5.New()
	check_str_new := new_pass + string(user.Salt)
	io.WriteString(w2, check_str_new)
	check_str_new = fmt.Sprintf("%x", w2.Sum(nil))

	update_res, _ := u.UpdateUser(userid_int, "password", check_str_new)

	if update_res == false {
		res := gin.H{"code": 0, "data": nil, "msg": "system error"}
		c.JSON(http.StatusOK, res)
	} else {
		res := gin.H{"code": 1, "data": nil, "msg": "ok"}
		c.JSON(http.StatusOK, res)
	}

}

func UserBankList(c *gin.Context) {

	userid, ok := c.Get("user_id")
	if !ok {
		res := gin.H{"code": 0, "data": nil, "msg": "fail"}
		c.JSON(http.StatusOK, res)
		return
	}
	userid_int := userid.(int)
	u := model.UserBank{}

	banklist := u.GetUserBankList(userid_int)
	res := gin.H{"code": 1, "data": banklist, "msg": "ok"}
	if banklist == nil {
		res = gin.H{"code": 0, "data": nil, "msg": "system error"}
	}
	c.JSON(http.StatusOK, res)
}

//获取密保问题
func UserGetSecurity(c *gin.Context) {

	q_type := c.PostForm("type")
	lang := c.PostForm("lang")

	q_type = utils.CheckEmptyStr(q_type, "1")
	lang = utils.CheckEmptyStr(lang, "1")

	q_type_int, err := strconv.Atoi(q_type)
	if err != nil {
		res := gin.H{"code": 0, "data": nil, "msg": utils.ERR_SYSTEM_ERROR}
		c.JSON(http.StatusOK, res)
		return
	}

	lang_int, err := strconv.Atoi(lang)
	if err != nil {
		res := gin.H{"code": 0, "data": nil, "msg": utils.ERR_SYSTEM_ERROR}
		c.JSON(http.StatusOK, res)
		return
	}

	sq := model.SysSecurityQuestion{Type: q_type_int, Lang: lang_int}
	securitys, err := sq.GetSecurity(model.Db)
	if err != nil {
		res := gin.H{"code": 0, "data": nil, "msg": utils.ERR_SYSTEM_ERROR}
		c.JSON(http.StatusOK, res)
		return
	}
	res := gin.H{"code": 1, "data": securitys, "msg": "ok"}

	c.JSON(http.StatusOK, res)
}

//验证会员列表请求数据
func memberListReqCheck(req *MemberListReq) (map[string]interface{}, error) {
	m := make(map[string]interface{})

	if req.UserName != "" {
		m["user_name"] = req.UserName
	}
	if req.TrueName != "" {
		m["true_name"] = req.TrueName
	}
	if req.ParentUserName != "" {
		m["parent_user_name"] = req.ParentUserName
	}

	if req.ClassId != 0 {
		m["class_id"] = req.ClassId
	}
	if req.GroupId != 0 {
		m["group_id"] = req.GroupId
	}
	if req.Status != 999 {
		m["status"] = req.Status
	}
	if req.Phone != "" {
		m["phone"] = req.Phone
	}
	if req.Page < 1 {
		req.Page = 1
	}

	if req.PageCount <= 0 {
		req.PageCount = 10
	}
	return m, nil
}

//获取用户列表
func GetUserList(c *gin.Context) {
	var req MemberListReq
	if err := c.BindJSON(&req); err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}
	logrus.Debugf("%#v", req)

	// 参数合法性检查
	m, err := memberListReqCheck(&req)
	if err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}
	// 数据库查询数据
	//todo: get merchantId from token

	merchantId := 1 //暂定为1,之后从登陆那里获取
	list, count, err := model.GetUserList(model.Db, merchantId, req.Page, req.PageCount, m)
	if err != nil {
		logrus.Error(err)
		RespServerErr(c)
		return
	}

	// 组装数据返回给前端显示
	resp := MemberListResp{
		List:  make([]MemberList, 0),
		Total: count,
	}

	for i := range list {
		temp := MemberList{
			ClassName:      list[i].ClassName,
			GroupName:      list[i].GroupName,
			Id:             list[i].Id,
			TrueName:       list[i].TrueName,
			UserName:       list[i].UserName,
			ParentUserName: list[i].ParentUserName,
			Balance:        list[i].Balance,
			LastLoginIp:    list[i].LastLoginIp,
			LastLoginTime:  list[i].LastLoginTime,
			RegTime:        list[i].RegTime,
			RegIp:          list[i].RegIp,
			Phone:          list[i].Phone,
			Email:          list[i].Email,
			FirstLoginIp:   list[i].FirstLoginIp,
			FirstLoginTime: list[i].FirstLoginTime,
		}
		resp.List = append(resp.List, temp)
	}

	RespJson(c, status.OK, resp)

}

//获取用户信息
func GetUserInfo(c *gin.Context) {
	merchant_id := 1 //暂定为1,之后从登陆那里获取
	user_id := c.PostForm("user_id")

	if user_id == "" {
		res := gin.H{"code": 0, "data": nil, "msg": utils.ERR_LACK_PARAMETERS}
		c.JSON(http.StatusOK, res)
		return
	}

	user_id_i, err := strconv.Atoi(user_id)
	if err != nil {
		fmt.Println(err)
		res := gin.H{"code": 0, "data": nil, "msg": "fail"}
		c.JSON(http.StatusOK, res)
		return
	}
	var param []interface{}
	where := ""
	where += "u.id=? and u.merch_id=? "
	param = append(param, user_id_i, merchant_id)

	data, err := model.GetUserInfo(model.Db, where, param)
	if err != nil {
		fmt.Println(err)
		res := gin.H{"code": 0, "data": nil, "msg": "fail"}
		c.JSON(http.StatusOK, res)
		return
	}
	res := gin.H{"code": 0, "data": data, "msg": "ok"}

	c.JSON(http.StatusOK, res)

}

//编辑用户
func UserEdit(c *gin.Context) {
	user_id := c.PostForm("user_id")
	password := c.PostForm("password")
	paypass := c.PostForm("paypass")   //资金密码
	class_id := c.PostForm("class_id") //层级id
	group_id := c.PostForm("group_id") //等级id
	true_name := c.PostForm("true_name")
	phone := c.PostForm("phone")
	email := c.PostForm("email")
	birthday := c.PostForm("birthday")
	attention_level := c.PostForm("attention_level") //会员关注级别
	fund_status := c.PostForm("fund_status")         //资金状态
	status := c.PostForm("status")                   //账号状态
	tips := c.PostForm("tips")                       //备注
	sex := c.PostForm("sex")                         //性别

	if user_id == "" {
		res := gin.H{"code": 0, "data": nil, "msg": utils.ERR_LACK_PARAMETERS}
		c.JSON(http.StatusOK, res)
		return
	}

	user_id_i, err := strconv.Atoi(user_id)
	if err != nil {
		fmt.Println(err)
		res := gin.H{"code": 0, "data": nil, "msg": "fail"}
		c.JSON(http.StatusOK, res)
		return
	}

	field := make(map[string]interface{})

	if password != "" {
		//获取用户信息
		userInfo, err := model.GetUserById(model.Db, user_id_i)

		if err != nil {
			res := gin.H{"code": 0, "data": nil, "msg": "fail"}
			c.JSON(http.StatusOK, res)
			return
		}
		salt := userInfo.Salt
		password_str := password + salt
		password_str = utils.Md5S(password_str)
		field["password"] = password_str

	}
	if class_id != "" {
		class_id_i, err := strconv.Atoi(class_id)
		if err != nil {
			fmt.Println(err)
			res := gin.H{"code": 0, "data": nil, "msg": "fail"}
			c.JSON(http.StatusOK, res)
			return
		}
		field["class_id"] = class_id_i
	}
	if group_id != "" {
		group_id_i, err := strconv.Atoi(group_id)
		if err != nil {
			fmt.Println(err)
			res := gin.H{"code": 0, "data": nil, "msg": "fail"}
			c.JSON(http.StatusOK, res)
			return
		}
		field["group_id"] = group_id_i
	}

	if sex != "" {
		sex_i, err := strconv.Atoi(sex)
		if err != nil {
			fmt.Println(err)
			res := gin.H{"code": 0, "data": nil, "msg": "fail"}
			c.JSON(http.StatusOK, res)
			return
		}
		field["sex"] = sex_i
	}

	if birthday != "" {
		birthday_i, err := strconv.Atoi(birthday)
		if err != nil {
			fmt.Println(err)
			res := gin.H{"code": 0, "data": nil, "msg": "fail"}
			c.JSON(http.StatusOK, res)
			return
		}
		field["birthday"] = birthday_i
	}

	if attention_level != "" {
		attention_level_i, err := strconv.Atoi(attention_level)
		if err != nil {
			fmt.Println(err)
			res := gin.H{"code": 0, "data": nil, "msg": "fail"}
			c.JSON(http.StatusOK, res)
			return
		}
		field["attention_level"] = attention_level_i
	}
	if fund_status != "" {
		fund_status_i, err := strconv.Atoi(fund_status)
		if err != nil {
			fmt.Println(err)
			res := gin.H{"code": 0, "data": nil, "msg": "fail"}
			c.JSON(http.StatusOK, res)
			return
		}
		field["fund_status"] = fund_status_i
	}

	if status != "" {
		status_i, err := strconv.Atoi(status)
		if err != nil {
			fmt.Println(err)
			res := gin.H{"code": 0, "data": nil, "msg": "fail"}
			c.JSON(http.StatusOK, res)
			return
		}
		field["status"] = status_i
	}

	if phone != "" {
		field["phone"] = phone
	}

	if email != "" {
		field["email"] = email
	}

	if true_name != "" {
		field["true_name"] = true_name
	}

	if paypass != "" {
		//获取用户信息
		userInfo, err := model.GetUserById(model.Db, user_id_i)

		if err != nil {
			res := gin.H{"code": 0, "data": nil, "msg": "fail"}
			c.JSON(http.StatusOK, res)
			return
		}
		salt := userInfo.Salt
		paypass_str := paypass + salt
		paypass_str = utils.Md5S(paypass_str)
		field["pay_pass"] = paypass_str

	}

	if tips != "" {
		field["tips"] = tips
	}

	user := model.User{Id: user_id_i}
	fmt.Println(field)
	res, _ := user.UserEdit(model.Db, field)

	if !res {
		res := gin.H{"code": 0, "data": nil, "msg": "fail"}
		c.JSON(http.StatusOK, res)
		return
	} else {
		res := gin.H{"code": 0, "data": nil, "msg": "ok"}
		c.JSON(http.StatusOK, res)
		return
	}

}
