package model

import (
	"github.com/jinzhu/gorm"
)

type Message struct {
	Type           int    `json:"type"`
	Id             int    `json:"id"`
	ToAgent        string `json:"to_agent"`
	CreateTime     int64  `json:"create_time"`
	ToUser         string `json:"to_user"`
	SendMerchantId int    `json:"send_merchant_id"`
	UserMerchantId int    `json:"to_merchant_id"`
	UpdateTime     int64  `json:"update_time"`
	Title          string `json:"title"`
	Content        string `json:"content"`
}

func GetMessageInfoList(db *gorm.DB, page int, pageCount int, msg map[string]interface{}) ([]Message, int, error) {
	var list []Message
	if err := db.Debug().Table("sys_message").Select("type,id,to_agent,create_time,send_merchant_id,update_time,to_merchant_id,to_user,title,content").Where("send_merchant_id=? AND type=?",
		msg["merchant_id"], msg["type"]).Offset((page - 1) * pageCount).Limit(pageCount).Find(&list).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, 0, err
		}
		return nil, 0, err
	}
	var count int
	if err := db.Table(`sys_message`).Where("send_merchant_id=? AND type=?",
		msg["merchant_id"], msg["type"]).Count(&count).Error; err != nil {
		return nil, 0, err
	}
	return list, count, nil
}

/*
SELECT
	um.id,um.msg_id,um.have_read,um.create_time,um.read_time,um.user_id,sm.title,sm.content
FROM
	user_message AS um
LEFT JOIN
	sys_message AS sm ON sm.id=um.msg_id
WHERE
	(um.user_id='{id}')
LIMIT {limit} OFFSET {offset}
*/
func GetMessageList(db *gorm.DB, userId int, page int, pageCount int) ([]Message, error) {
	var msgList []Message
	if err := db.Table(`user_message AS um`).Joins(`
		LEFT JOIN sys_message AS sm ON sm.id=um.msg_id`).Select(`
		um.id,um.msg_id,um.have_read,um.create_time,um.read_time,um.user_id,sm.title,sm.content
	`).Where(`um.user_id=?`, userId).Offset((page - 1) * pageCount).Limit(pageCount).Find(&msgList).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, nil
		}

		return nil, err
	}

	return msgList, nil
}

// SELECT count(*) FROM `user_message`  WHERE (user_id='{id}')
func GetMessageCount(db *gorm.DB, userId int) (int, error) {
	var count int
	if err := db.Table(`user_message`).Where(`user_id=?`, userId).Count(&count).Error; err != nil {
		return 0, err
	}

	return count, nil
}

/*
UPDATE
	`user_message`
SET
	`have_read` = '1', `read_time` = '1541574995'
WHERE
	(`user_message`.`id` = '{id}') AND (`user_message`.`have_read` = '0')
*/
func ReadMessage(db *gorm.DB, id int, time int64) (bool, error) {
	if err := db.Table(`user_message`).Where(map[string]interface{}{
		"id":        id,
		"have_read": 0,
	}).Updates(map[string]interface{}{
		"have_read": 1,
		"read_time": time,
	}).Error; err != nil {
		return false, err
	}

	return true, nil
}
