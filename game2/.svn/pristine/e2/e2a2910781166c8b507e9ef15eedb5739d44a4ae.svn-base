package model

import (
	"database/sql"
	"fmt"
	"log"

	"github.com/Unknwon/goconfig"
	_ "github.com/go-sql-driver/mysql"
)

var Db *sql.DB

func init() {
	var err error
	//读取配置文件
	cfg, error := goconfig.LoadConfigFile("./config/dev.ini")
	if error != nil {
		log.Println("读取配置文件失败[dev.ini]")
		return
	}
	conf, error := cfg.GetValue("mysql", "connect")
	if error != nil {
		log.Fatalf("无法获取键值（%s）：%s", "connect", error)
		return
	}
	Db, err = sql.Open("mysql", conf)
	if err != nil {
		log.Fatal(err)
	}
	return
}

func Insert(table string, fileds []string, args ...interface{}) (int64, string) {
	filed_str := ""
	for _, filed := range fileds {
		filed_str = filed_str + filed + ","
	}
	count := len(args)
	value_str := ""
	i := 0
	for i < count {
		value_str += "?,"
	}
	sql := "INSERT INTO " + table + "(" + filed_str + ")" + " VALUES(" + value_str + ")"
	stmt, err := Db.Prepare(sql)
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return 0, "system error"
	}
	ret, err := stmt.Exec(args)
	if err != nil {
		fmt.Println(err)
		return 0, "system error"
	}
	if last_id, err := ret.LastInsertId(); nil == err {
		fmt.Println(last_id)
		return last_id, ""
	} else {
		return 0, "system error"
	}
}
