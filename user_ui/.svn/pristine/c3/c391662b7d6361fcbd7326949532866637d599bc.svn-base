package agin

import (
	"fmt"
	"game2/lib/encrypt"
	"game2/lib/game"
	"game2/lib/utils"
	"net/url"
)

const (
	HostGI  = "https://gi.jkgsoft.com"
	HostGCI = "https://gci.jkgsoft.com"
	CAgent  = "DJ9_AGIN"
	MD5Key  = "Rr6GhEHqjJ4s"
	DESKey  = "SzNwjutz"

	AcTypeTryPlay   = "0" //试玩账号
	AcTypeRealMoney = "1" //真钱账号

	DoBusinessUrl = HostGI + "/doBusiness.do"
)

type GameAGin struct {
	HostGI  string
	HostGCI string
	Agent   string
	Md5Key  string
	DesKey  string
}

type BaseReq struct {
	Params string
	Key    string
}

func newGameAGin() *GameAGin {
	return &GameAGin{
		HostGI:  HostGI,
		HostGCI: HostGCI,
		Agent:   CAgent,
		Md5Key:  MD5Key,
		DesKey:  DESKey,
	}
}

func generateSrcParam(agent, loginName, method, acType, password, oddType, cur string) string {
	return fmt.Sprintf("cagent=%v/\\\\/logginname=%v/\\\\/method=%v/\\\\/actype=%v/\\\\/password=%v/\\\\/oddtype=%v/\\\\/cur=%v",
		agent, loginName, method, acType, password, oddType, cur)
}

func generateUrlParam(params, key string) string {
	query := url.Values{}
	query.Add("params", params)
	query.Add("key", key)
	return query.Encode()
}

// req 参数列表：
// 参数名		|数据类型	|说明
// ac_type:		|string		|"0"-试玩账号，"1"-真钱账号
// login_name:	|string		|用户名
// password:	|string		|密码
func (g *GameAGin) checkOrCreateGameAccount(req map[string]interface{}) (interface{}, error) {
	method := "lg"                    //检测并创建游戏账号
	acType := req["ac_type"].(string) //0-试玩账号，1-真钱账号
	loginName := req["login_name"].(string)
	password := req["password"].(string)
	oddType := "A" //盘口，即可下注范围，默认A盘口，A盘口可下注范围：20~50000
	cur := "CNY"   //人民币
	srcParams := generateSrcParam(g.Agent, loginName, method, acType, password, oddType, cur)
	params := encrypt.DESEncrypt(srcParams, g.DesKey)
	fmt.Println(srcParams)
	fmt.Println(params)
	key := encrypt.MD5(params + g.Md5Key)
	fmt.Println(key)

	resp, err := utils.HttpGet(DoBusinessUrl + "?" + generateUrlParam(params, key))
	if err != nil {
		return nil, err
	}

	return resp, nil
}

func (g *GameAGin) Register(req map[string]interface{}) (resp interface{}, err error) {
	return g.checkOrCreateGameAccount(req)
}

func (g *GameAGin) Login(req map[string]interface{}) (resp interface{}, err error) {
	return g.checkOrCreateGameAccount(req)
}

func (g *GameAGin) GetBalance(req map[string]interface{}) (resp interface{}, err error) {
	return nil, nil
}

func (g *GameAGin) Account2GameTransfer(req map[string]interface{}) (resp interface{}, err error) {
	return nil, nil
}

func (g *GameAGin) Game2AccountTransfer(req map[string]interface{}) (resp interface{}, err error) {
	return nil, nil
}

func (g *GameAGin) QueryRecord(req map[string]interface{}) (resp interface{}, err error) {
	return nil, nil
}

func NewAGinGame() game.Game {
	return newGameAGin()
}

func init() {
	game.Register("agin", NewAGinGame)
}
