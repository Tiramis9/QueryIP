package model

import (
	"fmt"
	"game2/utils"
)

type UserBill struct {
	Id          int     `json:"id"`
	User_id     int     `json:"user_id,omitempty"`
	Sett_amt    float64 `json:"sett_amt"`
	Type        int     `json:"type"`
	Memo        string  `json:"memo"`
	Order_sn    string  `json:"order_no"`
	Status      int     `json:"status"`
	Create_time int     `json:"create_time"`
	Code        int     `json:"code,omitempty"`
	Total       float64 `json:"total,omitempty"`
}

type UserWithdraw struct {
	User_id     int     `json:"user_id"`
	Card_no     string  `json:"card_no"`
	Money       float64 `json:"money"`
	Status      int     `json:"status"`
	Memo        string  `json:"memo"`
	Addition    string  `json:"addition"`
	Create_time int64   `json:"create_time"`
	Order_sn    string  `json:"order_sn"`
	Fee         float64 `json:fee`
}

type UserBillInterface interface {
	GetUserBillListByUserId()
	GetUserBillCount()
}

//获取资金列表
func (u UserBill) GetUserBillListByUserId(page int, pagecount int, start_time int, end_time int) interface{} {
	var billlist []UserBill
	stmt, err := Db.Prepare("SELECT id,sett_amt,memo,type,order_sn,status,create_time FROM user_bill WHERE user_id = ? AND" +
		" create_time >= ? AND create_time <= ? LIMIT ?, ?")
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return nil
	}
	rows, err := stmt.Query(u.User_id, start_time, end_time, (page-1)*pagecount, pagecount)
	defer rows.Close()
	if err != nil {
		fmt.Println(err)
		return nil
	}
	for rows.Next() {
		var conv UserBill
		rows.Scan(&conv.Id, &conv.Sett_amt, &conv.Memo, &conv.Type, &conv.Order_sn, &conv.Status, &conv.Create_time)
		billlist = append(billlist, conv)
	}
	return billlist
}

//获取资金列表记录数
func (u UserBill) GetUserBillCount(start_time int, end_time int) int {
	var total int
	stmt, err := Db.Prepare("SELECT count(id) as total FROM user_bill Where user_id=? AND create_time >=? AND create_time <=?")
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return 0
	}
	row := stmt.QueryRow(u.User_id, start_time, end_time)
	//总计
	row.Scan(&total)
	fmt.Println("total ", total)
	return total
}

func (u UserWithdraw) ApplayWithdraw() (bool, string) {
	//事务开始
	conn, err := Db.Begin()
	if err != nil {
		fmt.Println(err)
		return false, "system error"
	}
	//判断中心余额是否足够
	stmt, err := conn.Prepare("SELECT balance FROM user WHERE id=?")
	defer stmt.Close()
	if err != nil {
		conn.Rollback()
		fmt.Println(err)
		return false, "system error"
	}
	row := stmt.QueryRow(u.User_id)
	var balance float64
	row.Scan(&balance)
	if balance < u.Money {
		conn.Rollback()
		return false, utils.ERR_BALANCE_NOT_ENOUGH
	}
	//减少中心账户余额
	stmt2, err := conn.Prepare("UPDATE user SET balance=balance-? WHERE id=?")
	defer stmt2.Close()
	if err != nil {
		conn.Rollback()
		fmt.Println(err)
		return false, utils.ERR_SYSTEM_ERROR
	}
	ret, err := stmt2.Exec(u.Money, u.User_id)
	if err != nil {
		conn.Rollback()
		fmt.Println(err)
		return false, utils.ERR_SYSTEM_ERROR
	}
	if _, err := ret.RowsAffected(); nil == err {
	} else {
		conn.Rollback()
		return false, utils.ERR_SYSTEM_ERROR
	}
	//插入提现记录
	stmt3, err := Db.Prepare("Insert into user_withdraw(user_id,money,create_time,order_sn,fee,card_no) values(?,?,?,?,?,?)")
	defer stmt3.Close()
	if err != nil {
		conn.Rollback()
		fmt.Println(err)
		return false, utils.ERR_SYSTEM_ERROR
	}
	ret2, err := stmt3.Exec(u.User_id, u.Money, u.Create_time, u.Order_sn, u.Fee, u.Card_no)
	if err != nil {
		conn.Rollback()
		fmt.Println(err)
		return false, utils.ERR_SYSTEM_ERROR
	}
	if affectd_rows, err := ret2.RowsAffected(); nil == err {
		fmt.Println(affectd_rows)
		conn.Commit()
		return true, ""
	} else {
		conn.Rollback()
		return false, utils.ERR_SYSTEM_ERROR
	}
}

//获取资金列表
func (u UserBill) GetUserBillTotalByUserId() []UserBill {
	var billlist []UserBill
	stmt, err := Db.Prepare("SELECT code,sum(sett_amt) as total FROM user_bill WHERE user_id = ? GROUP BY code")
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return billlist
	}
	rows, err := stmt.Query(u.User_id)
	defer rows.Close()
	if err != nil {
		fmt.Println(err)
		return billlist
	}
	for rows.Next() {
		var conv UserBill
		rows.Scan(&conv.Code, &conv.Total)
		billlist = append(billlist, conv)
	}
	return billlist
}
