package action

import (
	"errors"
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
	"golang_game_merchant/global/status"
	"golang_game_merchant/lib/utils"
	"golang_game_merchant/model"
	"net/http"
)

type (
	MemBillReq struct {
		UserType  int    `json:"user_type"`  //用户类型，1-正常会员，2-代理，零值表示不考虑该字段，下同
		Type      int    `json:"type"`       //1-入款，2-出款
		Code      int    `json:"code"`       //100，充值; 200,提现; 301转入; 302 转出; 400 红利; 500 返利; 600 丢失补款; 700 多出扣款
		StartTime int64  `json:"start_time"` //开始时间时间戳
		EndTime   int64  `json:"end_time"`   //结束时间时间戳
		Page      int    `json:"page"`       //页码
		PageCount int    `json:"page_count"` //每页显示的数量
		UserName  string `json:"user_name"`  //用户账号，支持模糊查询
	}

	MemBill struct {
		Balance    interface{} `json:"balance"`     //变动后余额
		Code       interface{} `json:"code"`        //交易类型 100，充值; 200,提现; 300转移; 400 红利; 500 返利
		CreateTime interface{} `json:"create_time"` //变动时间
		Id         interface{} `json:"id"`
		Memo       interface{} `json:"memo"`        //变动说明
		OldBalance interface{} `json:"old_balance"` //变动前余额
		OrderSn    interface{} `json:"order_sn"`    //账变编号
		SettAmt    interface{} `json:"sett_amt"`    //变动金额
		TrueName   interface{} `json:"true_name"`   //真实姓名
		Type       interface{} `json:"type"`        //账变类型 1加-1减
		UserName   interface{} `json:"user_name"`   //会员账号
	}

	MemBillResp struct {
		List  []MemBill `json:"list"`
		Count int       `json:"count"`
	}
)

func memberBillReqCheck(req *MemBillReq) (map[string]interface{}, error) {
	m := make(map[string]interface{})

	if req.UserType != 0 && req.UserType != 1 && req.UserType != 2 {
		return nil, errors.New("user type error")
	} else if req.UserType == 1 || req.UserType == 2 {
		m["user_type"] = req.UserType
	}

	if req.Type != 0 && req.Type != 1 && req.Type != 2 {
		return nil, errors.New("type error")
	} else if req.Type == 1 || req.Type == 2 {
		m["type"] = req.Type
	}

	if !utils.IsIntContains(MemBillTypeList, req.Code) {
		return nil, errors.New("code error")
	} else {
		m["code"] = req.Code
	}

	if req.StartTime != 0 {
		if req.EndTime != 0 {
			if req.EndTime < req.StartTime {
				return nil, errors.New("start time less end time")
			}
			m["end_time"] = req.EndTime
		}
		m["start_time"] = req.StartTime
	}

	if req.Page < 1 {
		*(&req.Page) = 1
	}

	if req.PageCount < 0 {
		return nil, errors.New("page count error")
	}

	if req.UserName != "" {
		m["user_name"] = req.UserName
	}

	return m, nil
}

// 财务管理(帐变记录)
func MemberBill(c *gin.Context) {
	var req MemBillReq
	if err := c.BindJSON(&req); err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}

	m, err := memberBillReqCheck(&req)
	if err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}

	var userId int
	list, count, err := model.GetMemberBill(model.Db, userId, req.Page, req.PageCount, m)
	if err != nil {
		if err == model.ErrRecordNotFound {
			RespNotFoundErr(c)
			return
		}

		logrus.Error(err)
		RespServerErr(c)
		return
	}

	resp := MemBillResp{
		List:  make([]MemBill, 0),
		Count: count,
	}
	for i := range list {
		temp := MemBill{
			Balance:    list[i].Balance,
			Code:       list[i].Code,
			CreateTime: list[i].CreateTime,
			Id:         list[i].Id,
			Memo:       list[i].Memo,
			OldBalance: list[i].OldBalance,
			OrderSn:    list[i].OrderSn,
			SettAmt:    list[i].SettAmt,
			TrueName:   list[i].TrueName,
			Type:       list[i].Type,
			UserName:   list[i].UserName,
		}
		resp.List = append(resp.List, temp)
	}

	RespJson(c, status.OK, resp)
}

func MemberClassList(c *gin.Context) {
	data := [...]map[string]interface{}{
		{"id": 1, "merchant_id": 1, "class_name": "白银"},
		{"id": 2, "merchant_id": 1, "class_name": "黄金"},
	}
	RespJson(c, status.OK, data)
}

func MemberGroupList(c *gin.Context) {
	data := [...]map[string]interface{}{
		{"id": 1, "merchant_id": 1, "group_name": "等级1"},
		{"id": 2, "merchant_id": 1, "group_name": "等级2"},
	}
	RespJson(c, status.OK, data)
}

func Message2UserAdd(c *gin.Context) {
	RespSuccess(c)
}

func Message2AgentAdd(c *gin.Context) {
	RespSuccess(c)
}

func RechargeBill(c *gin.Context) {
	type_code := c.PostForm("pay_type")

	data_all := map[string]interface{}{}
	switch type_code {
	//1.在线支付
	case "1":
		datas := [...]map[string]interface{}{{"id": 1, "order_sn": "123456789", "user_name": "www.buzhidao.com", "true_name": "王鑫", "pay_money": 1000, "sys_pay_type": "网银", "platform_code": "alipay", "create_time": 1538016637, "callback_time": 1538016637, "status": 1}, {"id": 2, "order_sn": "123456789", "user_name": "www.buzhidao.com", "true_name": "王鑫", "pay_money": 1000, "sys_pay_type": "网银APP", "platform_code": "alipay", "create_time": 1538016637, "callback_time": 1538016637, "status": 1}}
		data_all["data"] = datas
		data_all["recharge_num"] = 10
		data_all["recharge_success_num"] = 10
		data_all["recharge_success_sum"] = 100
		//3.后台加款
	case "3":
		datas := [...]map[string]interface{}{{"id": 1, "bill_no": "123456789", "merchant_name": "巨星国际", "contact_name": "王鑫", "amount": 1000, "remark": "111", "operator_id": "1", "create_time": 1538016637}, {"id": 2, "bill_no": "123456788", "merchant_name": "巨星国际", "contact_name": "王鑫", "amount": 1000, "remark": "111", "operator_id": "1", "create_time": 1538016637}}
		data_all["data"] = datas
		data_all["recharge_num"] = 20
		data_all["recharge_success_num"] = 10
		data_all["recharge_success_sum"] = 100
	}

	res := gin.H{"code": 1, "data": data_all, "msg": "ok", "total": 10, "next_page": 2}
	c.JSON(http.StatusOK, res)
}

func RechargeTransBill(c *gin.Context) {
	data_all := map[string]interface{}{}

	datas := [...]map[string]interface{}{{"id": 1, "bill_no": "123456789", "merchant_name": "巨星国际", "contact_name": "王忠杰", "trans_account": "432255484848", "amount": 1000, "pay_type": 2, "trans_to_account": "43111111111", "create_time": 1538016637, "check_time": 1538016638, "status": 1}, {"id": 2, "bill_no": "123456788", "merchant_name": "巨星国际", "contact_name": "王忠杰", "trans_account": "432255484848", "amount": 1000, "pay_type": 2, "trans_to_account": "43111111111", "create_time": 1538016637, "check_time": 1538016638, "status": 2}}
	data_all["data"] = datas
	data_all["recharge_num"] = 20
	data_all["recharge_success_num"] = 10
	data_all["recharge_success_sum"] = 100
	res := gin.H{"code": 1, "data": data_all, "msg": "ok", "total": 10, "next_page": 2}
	c.JSON(http.StatusOK, res)
}

func WithdrawBill(c *gin.Context) {
	data_all := map[string]interface{}{}
	datas := [...]map[string]interface{}{{"id": 1, "order_sn": "123456789", "user_name": "fff123", "class_name": "黄金", "true_name": "王鑫", "card_no": "32132113131312", "money": 100.00, "memo": "111", "status": 1, "create_time": 1538016637, "approve_time": 1538016637}, {"id": 2, "order_sn": "123456788", "user_name": "fff123", "class_name": "黄金", "true_name": "王鑫", "card_no": "32132113131312", "money": 100.00, "memo": "111", "status": 2, "create_time": 1538016637, "approve_time": 1538016637}}
	data_all["data"] = datas
	data_all["withdraw_num"] = 10
	data_all["withdraw_success_num"] = 10
	data_all["withdraw_success_sum"] = 100
	res := gin.H{"code": 1, "data": data_all, "msg": "ok", "total": 10, "next_page": 2}
	c.JSON(http.StatusOK, res)
}

func WithdrawBillBack(c *gin.Context) {
	data_all := map[string]interface{}{}
	datas := [...]map[string]interface{}{{"id": 1, "bill_no": "123456789", "merchant_name": "巨星国际", "contact_name": "王鑫", "amount": 1000, "remark": "111", "operator": "小明", "create_time": 1538016637}, {"id": 2, "bill_no": "123456788", "merchant_name": "巨星国际", "contact_name": "王鑫", "amount": 1000, "remark": "111", "operator": "小明", "create_time": 1538016637}}
	data_all["data"] = datas
	data_all["withdraw_num"] = 10
	data_all["withdraw_success_num"] = 10
	data_all["withdraw_success_sum"] = 100
	res := gin.H{"code": 1, "data": data_all, "msg": "ok", "total": 10, "next_page": 2}
	c.JSON(http.StatusOK, res)
}

func GameTransBill(c *gin.Context) {
	data := [...]map[string]interface{}{{"id": 1, "bill_no": "123456789", "user_name": "fff123", "true_name": "王鑫", "type": 1, "money": 100.00, "create_time": 1539601066, "ok": 1}, {"id": 2, "bill_no": "123456789", "user_name": "fff123", "true_name": "王鑫", "type": 2, "money": 100.00, "create_time": 1539601066, "ok": 2}}

	res := gin.H{"code": 1, "data": data, "msg": "ok", "total": 10, "next_page": 2}
	c.JSON(http.StatusOK, res)
}

func QueryUserBalance(c *gin.Context) {
	data := [...]map[string]interface{}{{"id": 1, "balance": 200.00}}
	RespJson(c, status.OK, data)
}

func CenterAccountBalanceSwitch(c *gin.Context) {
	RespSuccess(c)
}

func ThirdAccountBalanceSwitch(c *gin.Context) {
	RespSuccess(c)
}

func QueryGameBalance(c *gin.Context) {
	data := map[string]interface{}{"balance": 200.00}
	res := gin.H{"code": 1, "data": data, "msg": "ok"}
	c.JSON(http.StatusOK, res)
}

func OnlinePaymentsList(c *gin.Context) {
	data := [...]map[string]interface{}{{"id": 1, "pay_type": "alipay", "platform": "高通支付", "code": "5000", "sort": 1, "simple_min": 100.00, "simple_max": 100000, "day_stop_max": 1000, "status": 1}, {"id": 2, "pay_type": "alipay", "platform": "高通支付2", "code": "5000", "sort": 1, "simple_min": 100.00, "simple_max": 100000, "day_stop_max": 1000, "status": 1}}

	res := gin.H{"code": 1, "data": data, "msg": "ok", "total": 10, "next_page": 2}
	c.JSON(http.StatusOK, res)
}

func TransferList(c *gin.Context) {
	data := [...]map[string]interface{}{{"id": 1, "pay_type": "alipay", "remark": "fff", "account": "313213131311313", "sort": 1, "simple_min": 100.00, "day_stop_max": 1000, "income_times_today": 50, "total_transfer_today": 50, "status": 1}, {"id": 2, "pay_type": "alipay", "remark": "fff", "account": "313213131311313", "sort": 1, "simple_min": 100.00, "day_stop_max": 1000, "income_times_today": 50, "total_transfer_today": 50, "status": 1}}

	res := gin.H{"code": 1, "data": data, "msg": "ok", "total": 10, "next_page": 2}
	c.JSON(http.StatusOK, res)
}

func OnlinePaymentsAdd(c *gin.Context) {
	RespSuccess(c)
}

func TransferAdd(c *gin.Context) {
	RespSuccess(c)
}
