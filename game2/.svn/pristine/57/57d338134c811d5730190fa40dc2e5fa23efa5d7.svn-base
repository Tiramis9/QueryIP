package vr

import (
	"encoding/base64"
	"encoding/json"
	"fmt"
	"game2/lib/encrypt/aescypto"
	"game2/lib/utils"
	"github.com/sirupsen/logrus"
	"math/rand"
	"net/http"
	"net/url"
	"strconv"
	"time"

	"github.com/gin-gonic/gin"
)
//用户名只能为英文字母和数字
const (
	VR_KEY             = "Z6PBZHVN20060JV6F42V08VV06462088"
	VR_VERSION         = "1.0"
	VR_ID              = "JKYL"
	VR_APIURl          = "https://fykj.vrbetapi.com"
	ALLBET_DES_KEY     = "f0Q2638+aVam6t0+YXaAtwamFNXPME5V"
	ALLBET_MD5_KEY     = "pRyd5cngzAja4LMdzUeELeX2yqIs/V1DwHPwNuobAug="
	ALLBET_PROPERTY_ID = "2143220"

	ALLBET_AGENT_NAME = "3iwmaa"
	USER_PASSWORD     = "123456"
	USER_PREFIX       = "jkgvr"
	LOGIN_RETURN_URL  = "http://api.jkgsoft.com/game/allbet"
)

var errorCode map[string]string = map[string]string{"OK": "ok", "INTERNAL_ERROR": "internet error",
	"ILLEGAL_ARGUMENT": "illegal argument", "SYSTEM_MATAINING": "system mataining",
	"AGENT_NOT_EXIST": "agent not exist", "CLIENT_EXIST": "client exist", "CLIENT_PASSWORD_INCORRECT": "client password incorrect",
	"TOO_FREQUENT_REQUEST": "too frequent request", "CLIENT_NOT_EXIST": "client not exist", "TRANS_EXISTED": "trans existed",
	"LACK_OF_MONEY": "lack of money", "DUPLICATE_CONFIRM": "duplicate confirm", "TRANS_NOT_EXIST": "trans not exist",
	"DECRYPTION_FAILURE": "decryption failure", "FORBIDDEN": "forbidden", "INCONSISTENT_WITH_PRE_TRANS": "inconsistent with pre tans",
	"INVALID_PROPERTYID": "invalid propertyid", "INVALID_SIGN": "invalid sign", "TRANS_FAILURE": "trans failure"}

var langMap map[string]string = map[string]string{"cn": "zh_CN"}

func doRequestPost(apiUrl string, data map[string]string) (map[string]interface{},error) {
	reqUrl := VR_APIURl + apiUrl
	jsonData,err := json.Marshal(data)
	if err!=nil{
		return nil, err
	}
	pt := []byte(jsonData)
	key := []byte(VR_KEY)
	res,err := aescrypto.AesEcbPkcs5Encrypt(pt, key)
	if err!=nil{
		fmt.Println(err)
		return nil,err
	}
	strData := base64.StdEncoding.EncodeToString(res)
	post := make(map[string]string)
	post["version"] = VR_VERSION
	post["id"] = VR_ID
	post["data"] = strData
	body := utils.HttpPostProxy(reqUrl, post)
	fmt.Println("body:",body)
	strBody,err := base64.StdEncoding.DecodeString(body)
	if err!=nil{
		fmt.Println(err)
		return nil,err
	}
	bodyByte,err:=aescrypto.AesEcbPkcs5Decrypt(strBody,key)
	m := make(map[string]interface{})
	json.Unmarshal(bodyByte, &m)
	return m,nil
}

func doRequestGet(apiUrl string, str string) map[string]interface{} {
	reqUrl := VR_APIURl + apiUrl
	version := VR_VERSION
	id := VR_ID
	pt := []byte(str)
	key := []byte(VR_KEY)
	res,err := aescrypto.AesEcbPkcs5Encrypt(pt, key)
	if err!=nil{
		fmt.Println(err)
	}
	data := base64.StdEncoding.EncodeToString(res)
	data = url.QueryEscape(data)
	apiUrl = reqUrl + "version=" + version + "&id=" + id + "&data=" + data
	fmt.Println(apiUrl)
	body, err := utils.HttpGet(apiUrl)
	if err != nil {
		logrus.Error(err)
		return nil
	}
	fmt.Println(body)
	return nil
}

func create(info map[string]string) map[string]interface{} {
	res := gin.H{"code": 0, "data": nil, "msg": "fail"}
	randomStr := strconv.Itoa(rand.Intn(1000))
	data := map[string]string{}
	data["agent"] = ALLBET_AGENT_NAME
	data["random"] = randomStr
	data["client"] = USER_PREFIX + info["user_name"]
	data["nickName"] = USER_PREFIX + info["user_name"]
	data["password"] = USER_PASSWORD
	data["vipHandicaps"] = "12"
	data["orHandicaps"] = "1"
	data["orHallRebate"] = "0"
	mapRes,_ := doRequestPost("/check_or_create", data)
	if mapRes["error_code"] != "OK" {
		res["msg"] = mapRes["error_code"]
	} else {
		res["code"] = 1
		res["msg"] = "ok"
	}
	return res
}

//注册
func Check_or_create(c *gin.Context, info map[string]string) {
	res := create(info)
	c.JSON(http.StatusOK, res)
}

//登录
func ForwardGame(info map[string]interface{}) (interface{},error) {
	var str string
	data := map[string]string{}
	data["playerName"] = USER_PREFIX + info["user_name"].(string)
	data["loginTime"] = time.Now().Format("2006-01-02") + "T" + time.Now().Format("15:04:05") + "Z"
	data["departureUrl"] = LOGIN_RETURN_URL
	for key, value := range data {
		str += key + "=" + value + "&"
	}
	str = str[0 : len(str)-1]
	fmt.Println(str)
	//str = "playerName=test&loginTime=2016-10-12T10:03:13Z&playerOdds=1960&channelId=1"
	mapRes := doRequestGet("/Account/LoginValidate?", str)
	fmt.Println(mapRes)
	return nil, nil
}

func Register(info map[string]interface{})(interface{},error){
	data := map[string]string{}
	data["playerName"] = USER_PREFIX + info["user_name"].(string)
	mapRes,err := doRequestPost("/Account/CreateUser", data)
	if err!=nil{
		return nil,err
	}
	fmt.Println(mapRes)
	return true,nil
}

//登录
/*func ForwardGame(c *gin.Context, info map[string]string) {
	res := login(info)
	c.JSON(http.StatusOK, res)
}*/

//退出游戏
func LogoutGame(c *gin.Context) {
	randomStr := strconv.Itoa(rand.Intn(1000))
	data := map[string]string{}
	data["random"] = randomStr
	data["client"] = "jkg_liul"
	str,_ := doRequestPost("/logout_game", data)
	fmt.Println(str)
}

//获取余额
func GetBalance(info map[string]string) map[string]interface{} {
	res := gin.H{"code": 0, "data": nil, "msg": "fail"}
	randomStr := strconv.Itoa(rand.Intn(1000))
	data := map[string]string{}
	data["random"] = randomStr
	data["client"] = USER_PREFIX + info["user_name"]
	data["password"] = USER_PASSWORD
	mapRes,_ := doRequestPost("/get_balance", data)
	if mapRes["error_code"] != "OK" {
		res["msg"] = mapRes["error_code"]
	} else {
		res["code"] = 1
		dataInfo := map[string]interface{}{}
		dataInfo["balance"] = mapRes["balance"]
		res["data"] = dataInfo
		res["msg"] = "ok"
	}
	return res
}

//转账
func AgentClientTransfer(info map[string]string) map[string]interface{} {
	res := gin.H{"code": 0, "data": nil, "msg": "fail"}
	randomStr := strconv.Itoa(rand.Intn(1000))
	data := map[string]string{}
	data["random"] = randomStr
	data["agent"] = ALLBET_AGENT_NAME
	data["sn"] = utils.AbOrderSn(ALLBET_PROPERTY_ID)
	data["client"] = USER_PREFIX + info["user_name"]
	data["operFlag"] = info["operFlag"] //"0"(提取)或者"1"(存入)
	data["credit"] = info["amount"]
	mapRes,_ := doRequestPost("/agent_client_transfer", data)
	if mapRes["error_code"] != "OK" {
		res["msg"] = mapRes["error_code"]
	} else {
		res["code"] = 1
		res["msg"] = "ok"
	}
	return res
}

//维护状态设置
func MaintainStateSetting(c *gin.Context) {
	flag := "1"
	randomStr := strconv.Itoa(rand.Intn(1000))
	data := map[string]string{}
	data["random"] = randomStr
	data["state"] = flag
	str,_ := doRequestPost("/maintain_state_setting", data)
	fmt.Println(str)
}

//历史30天内投注记录
func BetlogPieceofHistoriesIn30days(c *gin.Context) {
	randomStr := strconv.Itoa(rand.Intn(1000))
	data := map[string]string{}
	data["random"] = randomStr
	data["startTime"] = "2018-10-29 16:00:00"
	data["endTime"] = "2018-10-29 16:30:00"
	//data["agent"] = ALLBET_AGENT_NAME
	str,_ := doRequestPost("/betlog_pieceof_histories_in30days", data)
	fmt.Println(str)
	c.JSON(http.StatusOK, str)
}

//客户历史输赢查询
func ClientHistorySurplus(c *gin.Context) {
	randomStr := strconv.Itoa(rand.Intn(1000))
	data := map[string]string{}
	data["random"] = randomStr
	data["client"] = "jkg_liul"
	data["operationType"] = "1"
	str,_ := doRequestPost("/client_history_surplus", data)
	fmt.Println(str)
}

func ForwardEgame(c *gin.Context, info map[string]string) {
	res := gin.H{"code": 0, "data": nil, "msg": "fail"}
	randomStr := strconv.Itoa(rand.Intn(1000))
	data := map[string]string{}
	data["random"] = randomStr
	data["client"] = USER_PREFIX + info["user_name"]
	data["password"] = USER_PASSWORD
	data["egameType"] = "af"
	data["gameType"] = "1100"
	mapRes,_ := doRequestPost("/forward_egame", data)
	if mapRes["error_code"] != "OK" {
		res["msg"] = mapRes["error_code"]
	} else {
		res["code"] = 1
		loginInfo := map[string]interface{}{}
		loginInfo["url"] = mapRes["gameLoginUrl"]
		res["data"] = loginInfo
		res["msg"] = "ok"
	}
}

func EgameBetlogHistories(c *gin.Context) {
	randomStr := strconv.Itoa(rand.Intn(1000))
	data := map[string]string{}
	data["random"] = randomStr
	data["egameType"] = "af"
	data["startTime"] = "2018-10-29 16:30:00"
	data["endTime"] = "2018-10-29 17:30:00"
	data["pageIndex"] = "1"
	data["pageSize"] = "1000"
	str,_ := doRequestPost("/egame_betlog_histories", data)
	fmt.Println(str)
}
