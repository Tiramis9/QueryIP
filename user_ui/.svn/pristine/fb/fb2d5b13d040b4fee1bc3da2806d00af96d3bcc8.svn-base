package auth

import (
	"fmt"
	"github.com/gin-gonic/gin"
	"github.com/gomodule/redigo/redis"
	"golang_game_merchant/global/redisclient"
	"net/http"
	"sort"
	"game2/lib/utils"
	"game2/action"
	"game2/logic"
	"game2/service"
	"encoding/json"
)

func SignCheck(c *gin.Context) {
	var sign_str string
	s, _ := c.MultipartForm()
	strs := []string{}
	//所有表单参数map
	form := s.Value
	sign := c.DefaultPostForm("sign", "")
	fmt.Println("sign,", sign)
	appid := c.DefaultPostForm("appid", "")
	secret := c.DefaultPostForm("secret", "")
	//所传签名为空
	if sign == "" {
		res := gin.H{"code": "0", "msg": utils.ERR_SIGN_ERROR}
		c.JSON(http.StatusOK, res)
		c.Abort()
		return
	}
	if appid == "" {
		res := gin.H{"code": "0", "msg": utils.ERR_APPID_ERROR}
		c.JSON(http.StatusOK, res)
		c.Abort()
		return
	}
	if secret == "" {
		res := gin.H{"code": "0", "msg": utils.ERR_SECRET_ERROR}
		c.JSON(http.StatusOK, res)
		c.Abort()
		return
	}
	//从redis中查询appid与secret是否匹配
	redis_key := "appid_" + appid
	conn := redisclient.Get()
	defer conn.Close()
	secret_str, err := redis.String(conn.Do("GET", redis_key))
	if err != nil || secret != secret_str {
		c.JSON(http.StatusOK, gin.H{"code": "0", "msg": utils.ERR_SECRET_ERROR})
		c.Abort()
		return
	}
	//删除map中的sign,进行签名
	delete(form, "sign")
	for k, _ := range form {
		strs = append(strs, k)
	}
	sort.Strings(strs)
	for _, val := range strs {
		sign_str += val + "=" + form[val][0] + "&"
	}
	//对字符串签名,与sign对比
	sign_s := sign_str[0 : len(sign_str)-1]
	md5_str := utils.Md5V(string(sign_s))
	fmt.Println(md5_str)
	if md5_str != sign {
		res := gin.H{"code": "0", "msg": utils.ERR_SIGN_ERROR}
		c.JSON(http.StatusOK, res)
		c.Abort()
		return
	}
	return
	fmt.Println("signCheck")
}

//Token中间件
func TokenRequired(c *gin.Context){
	var token string
	if v, ok := c.Request.Header["token"]; ok {
		token = v[0]
	}

	if token == "" {
		action.RespParamErr(c)
		return
	}
	user_info := logic.UserInfoByRedis(token)
	if user_info == nil {
		action.RespServerErr(c)
		return
	}
	json_data, err := json.Marshal(user_info)
	if err != nil {
		utils.Log(json_data, "", "")
		action.RespServerErr(c)
		return
	}
	//用户信息存在,延长在线时间
	service.RedisSet(token, string(json_data), utils.LOGIN_EXPIRED_TIME)
	userid := user_info["id"]
	merchId := user_info["merchant_id"]
	user_id_f := userid.(float64)
	user_id := int(user_id_f)
	c.Set("user_id", user_id)
	c.Set("merch_id", merchId)
	fmt.Println("TokenRequired")
}
