package model

import "github.com/jinzhu/gorm"

type (
	// 用户后台操作帐变记录表
	UserBackAddBill struct {
		Id         int
		UserId     int
		Type       int
		SettAmt    float64
		Memo       string
		Tips       string
		Fee        float64
		Balance    float64
		OldBalance float64
		Status     int
		OrderSn    string
		Code       int
		CreateTime int64
		MerchantId int
		Operator   int
	}

	// 用户充值明细表
	UserPay struct {
		Id            int
		UserId        int
		OrderSn       int64
		Status        int
		PayMoney      float64
		Memo          string
		Tips          string
		MerchantPayId int
		CreateTime    int64
		CallbackTime  int64
		UpdateTime    int64
		Fee           float64
		PayType       int
		PlatformCode  string
		SysPayType    string
	}

	// 用户财务明细表
	UserBill1 struct {
		Id         int
		UserId     int
		MerchantId int
		Type       int
		SettAmt    float64
		Memo       string
		Tips       string
		Fee        float64
		About      string
		Balance    float64
		OldBalance float64
		Status     int
		OrderSn    string
		Code       int
		CodeSn     string
		CreateTime int64
		UpdateTime int64
		Fs         float64
		Fy         float64
	}
)

type MemberBillInfo struct {
	UserBackAddBill
	TrueName string
	UserName string
}

func GetMemberBillList(db *gorm.DB, merchantId, page, pageCount int, m map[string]interface{}) ([]MemberBillInfo, int, error) {
	whereStr := "ubb.merchant_id=?"
	condition := []interface{}{merchantId}
	if v, ok := m["user_type"]; ok {
		whereStr += " AND u.type=?"
		condition = append(condition, v)
	}
	if v, ok := m["type"]; ok {
		whereStr += " AND ubb.type=?"
		condition = append(condition, v)
	}
	if v, ok := m["code"]; ok {
		whereStr += " AND ubb.code=?"
		condition = append(condition, v)
	}
	if v1, ok1 := m["start_time"]; ok1 {
		if v2, ok2 := m["end_time"]; ok2 {
			whereStr += " AND ?<=ubb.create_time AND ubb.create<=?"
			condition = append(condition, v1, v2)
		} else {
			whereStr += " AND ?<=ubb.create_time"
			condition = append(condition, v1)
		}
	} else {
		if v2, ok2 := m["end_time"]; ok2 {
			whereStr += " AND ubb.create<=?"
			condition = append(condition, v2)
		}
	}
	if v, ok := m["user_name"]; ok {
		whereStr += " AND u.user_name LIKE ?"
		userName, _ := v.(string)
		condition = append(condition, "%"+userName+"%")
	}

	list := make([]MemberBillInfo, 0)
	if err := db.Table(`user_backadd_bill AS ubb`).Joins(`
		LEFT JOIN user AS u ON u.id=ubb.user_id
	`).Select(`
		ubb.*,
		u.true_name,
		u.user_name
	`).Where(whereStr, condition...).Offset((page - 1) * pageCount).Limit(pageCount).Find(&list).Order(`
		ubb.create_time DESC
	`).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, 0, nil
		}
		return nil, 0, err
	}

	var count int
	if err := db.Table(`user_backadd_bill AS ubb`).Joins(`
		LEFT JOIN user AS u ON u.id=ubb.user_id
	`).Select(`
		ubb.*,
		u.true_name,
		u.user_name
	`).Where(whereStr, condition...).Count(&count).Error; err != nil {
		return nil, 0, err
	}

	return list, count, nil
}

func GetRechargeBillList(db *gorm.DB, page, pageCount int, m map[string]interface{}) ([]UserPay, int, error) {
	return nil, 0, nil
}
