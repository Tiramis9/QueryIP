package action

import (
	"errors"
	"fmt"
	"golang_game_merchant/global/status"
	"golang_game_merchant/model"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

type (
	Advertisementinfo struct {
		StartTime interface{} `json:"start_time"`
		EndTime   interface{} `json:"end_time"`
		Sort      interface{} `json:"sort"`
		Type      interface{} `json:"type"`
		Title     interface{} `json:"title"`
		ExistTime interface{} `json:"exist_time"`
		Url       interface{} `json:"url"`
		Status    interface{} `json:"status"`
		Location  interface{} `json:"location"`
		//MerchantID interface{} `json:"merchant_id"`
	}
	AdvertisementResponse struct {
		List  []Advertisementinfo `json:"list"`
		Total int                 `json:"total"`
	}
	AdvertisementRequstInfo struct {
		Image      string `json:"image"`
		ExistTime  int64  `json:"exist_time"`
		Location   int    `json:"location"`
		Title      string `json:"title"`
		Url        string `json:"url"`
		StartTime  int64  `json:"start_time"`
		EndTime    int64  `json:"end_time"`
		Sort       int    `json:"sort"`
		Status     int    `json:"status"`
		MerchantID int    `json:"merchant_id"` // 传入参数未容错
		ID         int    `json:"id"`
		Type       int    `json:"type"`
		Page       int    `json:"page"`       //页码
		PageCount  int    `json:"page_count"` //每页显示的数量
	}
)

func AdvertisementListParamCheck(request *AdvertisementRequstInfo) (map[string]interface{}, error) {
	msg := make(map[string]interface{})
	if request.Type <= 0 || request.Type >= 4 {
		return nil, errors.New("request Type parameter error ")
	}
	if request.Page < 1 {
		request.Page = 1
	}
	if request.PageCount <= 0 {
		return nil, errors.New("page count parameter error")
	}
	if request.MerchantID < 0 {
		return nil, errors.New("request MerchantID parameter invalid")
	}
	msg["merchant_id"] = request.MerchantID
	msg["type"] = request.Type
	msg["page_count"] = request.PageCount
	return msg, nil
}
func AdvertisementAddParamCheck(req *AdvertisementRequstInfo) error {
	if req.Image == "" {
		return errors.New("request Image parameter err")
	}
	if req.Type <= 0 || req.Type >= 4 {
		return errors.New("request Type parameter err")
	}
	if req.Status < 0 || req.Status >= 2 {
		return errors.New("request Status parameter err")
	}
	if req.StartTime != 0 {
		if req.EndTime != 0 {
			if req.EndTime < req.StartTime {
				return errors.New("start time less end time")
			}
		}
	}
	if req.ExistTime <= 0 || req.ExistTime >= 3 {
		return errors.New("exist_time parameter err")
	}
	if req.Location <= 0 || req.Location >= 3 {
		return errors.New("request Location parameter err")
	}
	if req.Title == "" {
		return errors.New("request Title parameter err")
	}
	if req.Url == "" {
		return errors.New("request Url parameter err")
	}
	if req.Sort == 0 {
		return errors.New("request Sort  parameter invalid")
	}
	return nil
}
func AdvertisementDelParamCheck(req *AdvertisementRequstInfo) error {
	if req.MerchantID < 0 {
		return errors.New("request MerchantID  parameter invalid")
	}
	if req.ID < 0 {
		return errors.New("request ID  parameter invalid")
	}
	return nil
}
func AdvertisementList(c *gin.Context) {
	var request AdvertisementRequstInfo
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	// 参数入参检查
	msg, err := AdvertisementListParamCheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	switch msg["type"] {
	case 1:
		list, count, err := model.GetAdvertisementList(model.Db, request.Page, request.PageCount, msg)
		if err != nil {
			RespServerErr(c)
			logrus.Error(err)
			return
		}
		fmt.Println(list, count)
		resp := AdvertisementResponse{
			List:  make([]Advertisementinfo, 0),
			Total: count,
		}
		for i := range list {
			temp := Advertisementinfo{
				StartTime: list[i].StartTime,
				EndTime:   list[i].EndTime,
				Url:       list[i].Url,
				Type:      list[i].Type,
				Title:     list[i].Name,
				Sort:      list[i].Sort,
				Status:    list[i].Status,
				ExistTime: list[i].ExistTime,
				Location:  list[i].Location,
			}
			resp.List = append(resp.List, temp)
		}
		RespJson(c, status.OK, resp)
	case 2:
		list, count, err := model.GetAdvertisementList(model.Db, request.Page, request.PageCount, msg)
		if err != nil {
			RespServerErr(c)
			logrus.Error(err)
			return
		}
		fmt.Println(list, count)
		resp := AdvertisementResponse{
			List:  make([]Advertisementinfo, 0),
			Total: count,
		}
		for i := range list {
			temp := Advertisementinfo{
				StartTime: list[i].StartTime,
				EndTime:   list[i].EndTime,
				Url:       list[i].Url,
				Type:      list[i].Type,
				Title:     list[i].Name,
				Sort:      list[i].Sort,
				Status:    list[i].Status,
				ExistTime: list[i].ExistTime,
				Location:  list[i].Location,
			}
			resp.List = append(resp.List, temp)
		}
		RespJson(c, status.OK, resp)
	case 3:
		list, count, err := model.GetAdvertisementList(model.Db, request.Page, request.PageCount, msg)
		if err != nil {
			RespServerErr(c)
			logrus.Error(err)
			return
		}
		fmt.Println(list, count)
		resp := AdvertisementResponse{
			List:  make([]Advertisementinfo, 0),
			Total: count,
		}
		for i := range list {
			temp := Advertisementinfo{
				StartTime: list[i].StartTime,
				EndTime:   list[i].EndTime,
				Url:       list[i].Url,
				Type:      list[i].Type,
				Title:     list[i].Name,
				Sort:      list[i].Sort,
				Status:    list[i].Status,
				ExistTime: list[i].ExistTime,
				Location:  list[i].Location,
			}
			resp.List = append(resp.List, temp)
		}
		RespJson(c, status.OK, resp)
	}

}
func AdvertisementAdd(c *gin.Context) {
	var request AdvertisementRequstInfo
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	// 参数入参检查
	err := AdvertisementAddParamCheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	timeUnix := time.Now().Unix()
	aInfo := model.MerchantAds{
		AdvertisementInfo: model.AdvertisementInfo{
			Url:        request.Url,
			Name:       request.Title,
			Type:       request.Type,
			Image:      request.Image,
			StartTime:  request.StartTime,
			EndTime:    request.EndTime,
			Sort:       request.Sort,
			Location:   request.Location,
			ExistTime:  request.ExistTime,
			Status:     request.Status,
			MerchantID: request.MerchantID,
			CreateTime: timeUnix,
			UpdateTime: timeUnix,
		},
	}
	// **********调用插入方法******
	if err := aInfo.AdvertisementAdd(model.Db); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	RespSuccess(c)
}

func AdvertisementEdit(c *gin.Context) {
	var request AdvertisementRequstInfo
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	// 参数入参检查
	err := AdvertisementAddParamCheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	timeUnix := time.Now().Unix()
	aInfo := model.MerchantAds{
		AdvertisementInfo: model.AdvertisementInfo{
			Url:        request.Url,
			Name:       request.Title,
			Type:       request.Type,
			ID:         request.ID,
			Image:      request.Image,
			StartTime:  request.StartTime,
			EndTime:    request.EndTime,
			Sort:       request.Sort,
			Location:   request.Location,
			ExistTime:  request.ExistTime,
			Status:     request.Status,
			MerchantID: request.MerchantID,
			UpdateTime: timeUnix,
		},
	}
	// **********调用update方法******
	if err := aInfo.AdvertisementEdit(model.Db); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	RespSuccess(c)
}
func AdvertisementDel(c *gin.Context) {
	var request AdvertisementRequstInfo
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	// 参数入参检查
	err := AdvertisementDelParamCheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	aInfo := model.MerchantAds{
		AdvertisementInfo: model.AdvertisementInfo{
			Type:       request.Type,
			MerchantID: request.MerchantID,
			ID:         request.ID,
		},
	}
	// **********调用Del方法******
	if err := aInfo.AdvertisementDel(model.Db); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	RespSuccess(c)
}
