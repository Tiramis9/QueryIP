package model

import (
	"github.com/jinzhu/gorm"
)

type Advertisement struct {
	Type     int    `json:"type,omitempty"`
	Location int    `json:"location"`
	Sort     int    `json:"srot"`
	Name     string `json:"name"`
	Image    string `json:"image"`
	Url      string `json:"url"`
}

func GetAdvertisementList(db *gorm.DB, merchantId int, where map[string]interface{}) ([]Advertisement, error) {
	var adsList []Advertisement
	var params []interface{}
	params = append(params, merchantId)
	str := "merchant_id=? "
	if v, ok := where["type"]; ok {
		str += " AND type=?"
		params = append(params, v)
	}
	if v, ok := where["location"]; ok {
		str += " AND location=?"
		params = append(params, v)
	}
	if err := db.Table("merchant_ads").Where(str, params).Find(&adsList).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, nil
		}
		return nil, err
	}
	return adsList,nil
	/*var params []interface{}
	now := time.Now().Unix()
	now_str := strconv.FormatInt(now, 10)
	params = append(params, merchant_id)
	sql := "SELECT type,location,sort,name,image,url FROM merchant_ads Where merchant_id=?"
	if ad.Type != 0 {
		sql = sql + " AND type=?"
		params = append(params, ad.Type)
	}
	if ad.Location != 0 {
		sql = sql + " AND location=?"
		params = append(params, ad.Location)
	}
	sql = sql + " AND status=1 AND start_time<=" + now_str + " AND end_time >=" + now_str
	fmt.Println(sql)
	stmt, err := Db.Prepare(sql)
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return adslist
	}
	rows, err := stmt.Query(params...)
	defer rows.Close()
	if err != nil {
		fmt.Println(err)
		return adslist
	}
	for rows.Next() {
		var conv Advertisement
		rows.Scan(&conv.Type, &conv.Location, &conv.Sort, &conv.Name, &conv.Image, &conv.Url)
		adslist = append(adslist, conv)
	}*/
	//return adslist
}
