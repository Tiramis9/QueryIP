package dg

import (
	"game2/lib/game"
	"testing"
)

func TestGameDGRegister(t *testing.T) {
	g, _ := game.NewGame("dg")
	m := make(map[string]interface{})
	m["game_user_name"] = "test"
	m["lang"] = "cn"
	resp, err := g.Register(m)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("%#v", resp)
}

func TestLogin(t *testing.T) {
	g, _ := game.NewGame("dg")
	m := make(map[string]interface{})
	m["game_user_name"] = "test"
	m["lang"] = "en"
	resp, err := g.Login(m)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("%#v", resp)
}

func TestGetBalance(t *testing.T) {
	g, _ := game.NewGame("dg")
	m := make(map[string]interface{})
	m["game_user_name"] = "test"
	resp, err := g.GetBalance(m)
	if err != nil {
		t.Fatal(err)
	}
	t.Logf("%#v", resp)
}

func TestIsDepositSuccess(t *testing.T) {
	g := &GameDG{
		Host:         GameDGHostHttp,
		Agent:        GameDGAgent,
		Key:          GameDGKey,
		UserPassword: UserPassword,
	}
	m := make(map[string]interface{})
	m["order_sn"] = "test123456789"
	_, err := g.isDepositSuccess(m)
	if err != nil {
		t.Fatal(err)
	}
}

func TestAccount2GameTransfer(t *testing.T) {
	g, _ := game.NewGame("dg")
	m := make(map[string]interface{})
	m["game_user_name"] = "test"
	m["order_sn"] = "test123456789"
	m["amount"] = "10"
	_, err := g.Account2GameTransfer(m)
	if err != nil {
		t.Fatal(err)
	}
}

func TestGame2AccountTransfer(t *testing.T) {
	g, _ := game.NewGame("dg")
	m := make(map[string]interface{})
	m["game_user_name"] = "test"
	m["order_sn"] = "test1234567890"
	m["amount"] = "5"
	_, err := g.Game2AccountTransfer(m)
	if err != nil {
		t.Fatal(err)
	}
}

func TestQueryRecord(t *testing.T) {
	g, _ := game.NewGame("dg")
	m := make(map[string]interface{})
	resp, err := g.QueryRecord(m)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(resp)
}
