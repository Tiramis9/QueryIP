package action

import (
	"errors"
	"golang_game_merchant/global/status"
	"golang_game_merchant/model"
	"time"

	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

type (
	AnnouncementInfo struct {
		Content    interface{} `json:"content"`
		Device     interface{} `json:"device"`
		StartTime  interface{} `json:"start_time"`
		EndTime    interface{} `json:"end_time"`
		Sort       interface{} `json:"sort"`
		Type       interface{} `json:"type"`
		Title      interface{} `json:"title"`
		Url        interface{} `json:"url"`
		Status     interface{} `json:"status"`
		MerchantID interface{} `json:"merchant_id"`
	}
	AnnouncementResponse struct {
		List  []AnnouncementInfo `json:"list"`
		Total int                `json:"total"`
	}
	AnnouncementRequstInfo struct {
		Content    string `json:"content"`
		Title      string `json:"title"`
		Url        string `json:"url"`
		Device     int    `json:"device"`
		StartTime  int64  `json:"start_time"`
		EndTime    int64  `json:"end_time"`
		Sort       int    `json:"sort"`
		Type       int    `json:"type"`
		Status     int    `json:"status"`
		MerchantID int    `json:"merchant_id"`
		ID         int    `json:"id"`
		Page       int    `json:"page"`       //页码
		PageCount  int    `json:"page_count"` //每页显示的数量
	}
)

func announcementListcheck(request *AnnouncementRequstInfo) (map[string]interface{}, error) {
	msg := make(map[string]interface{})
	if request.Type <= 0 || request.Type >= 3 {
		return nil, errors.New("request Type parameter error ")
	}
	if request.Page < 1 {
		request.Page = 1
	}
	if request.PageCount <= 0 {
		return nil, errors.New("page count parameter error")
	}
	/*
		if request.MerchantID < 0 {
			return nil, errors.New("request MerchantID parameter invalid")
		}
	*/
	msg["merchant_id"] = request.MerchantID
	msg["type"] = request.Type
	msg["page_count"] = request.PageCount
	return msg, nil
}

func announcementAddCheck(req *AnnouncementRequstInfo) error {
	if req.Content == "" {
		return errors.New("request Content parameter err")
	}
	if req.Type <= 0 || req.Type >= 3 {
		return errors.New("request Type parameter err")
	}
	if req.Status < 0 || req.Status >= 2 {
		return errors.New("request Status parameter err")
	}
	if req.Device <= 0 || req.Device >= 4 {
		return errors.New("request Device parameter err")
	}
	if req.StartTime != 0 {
		if req.EndTime != 0 {
			if req.EndTime < req.StartTime {
				return errors.New("start time less end time")
			}
		}
	}
	if req.Title == "" {
		return errors.New("request Title parameter err")
	}
	if req.Url == "" {
		return errors.New("request Url parameter err")
	}
	if req.MerchantID <= 0 {
		return errors.New("request MerchantID  parameter invalid")
	}
	if req.Sort == 0 {
		return errors.New("request Sort  parameter invalid")
	}
	return nil
}
func announcementEditCheck(req *AnnouncementRequstInfo) error {
	if req.Content == "" {
		return errors.New("request Content parameter err")
	}
	if req.Type <= 0 || req.Type >= 3 {
		return errors.New("request Type parameter err")
	}
	if req.Status < 0 || req.Status >= 2 {
		return errors.New("request Status parameter err")
	}
	if req.Device <= 0 || req.Device >= 4 {
		return errors.New("request Device parameter err")
	}
	if req.StartTime != 0 {
		if req.EndTime != 0 {
			if req.EndTime < req.StartTime {
				return errors.New("start time less end time")
			}
		}
	}
	if req.ID < 0 {
		return errors.New("request ID parameter err")
	}
	if req.Title == "" {
		return errors.New("request Title parameter err")
	}
	if req.Url == "" {
		return errors.New("request Url parameter err")
	}
	if req.MerchantID < 0 {
		return errors.New("request MerchantID  parameter invalid")
	}
	if req.Sort == 0 {
		return errors.New("request Sort  parameter invalid")
	}
	return nil
}
func announcementDelCheck(req *AnnouncementRequstInfo) error {
	if req.MerchantID < 0 {
		return errors.New("request MerchantID  parameter invalid")
	}
	if req.ID < 0 {
		return errors.New("request ID  parameter invalid")
	}
	return nil
}
func AnnouncementList(c *gin.Context) {
	var request AnnouncementRequstInfo
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	// 参数入参检查
	msg, err := announcementListcheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	list, count, err := model.GetMerchantAnnouncementList(model.Db, request.Page, request.PageCount, msg)
	if err != nil {
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	resp := AnnouncementResponse{
		List:  make([]AnnouncementInfo, 0),
		Total: count,
	}
	for i := range list {
		temp := AnnouncementInfo{
			Content:   list[i].Content,
			Device:    list[i].Device,
			StartTime: list[i].StartTime,
			EndTime:   list[i].EndTime,
			Url:       list[i].Url,
			Type:      list[i].Type,
			Title:     list[i].Title,
			Sort:      list[i].Sort,
			Status:    list[i].Status,
		}
		resp.List = append(resp.List, temp)
	}
	RespJson(c, status.OK, resp)
}

func AnnouncementAdd(c *gin.Context) {
	var request AnnouncementRequstInfo
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	// 参数入参检查
	err := announcementAddCheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	timeUnix := time.Now().Unix()
	aInfo := model.MerchantAnnouncement{
		AnnouncementInfo: model.AnnouncementInfo{
			Content:    request.Content,
			Url:        request.Url,
			Title:      request.Title,
			Type:       request.Type,
			Device:     request.Device,
			StartTime:  request.StartTime,
			EndTime:    request.EndTime,
			Sort:       request.Sort,
			Status:     request.Status,
			MerchantID: request.MerchantID,
			CreateTime: timeUnix,
			UpdateTime: timeUnix,
		},
	}
	// **********调用插入方法******
	if err := aInfo.MerchantAnnouncementAdd(model.Db); err != nil {
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	RespSuccess(c)
}
func AnnouncementEdit(c *gin.Context) {
	var request AnnouncementRequstInfo
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	// 参数入参检查
	err := announcementEditCheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	timeUnix := time.Now().Unix()
	aInfo := model.MerchantAnnouncement{
		AnnouncementInfo: model.AnnouncementInfo{
			Content:    request.Content,
			Url:        request.Url,
			Title:      request.Title,
			Type:       request.Type,
			Device:     request.Device,
			StartTime:  request.StartTime,
			EndTime:    request.EndTime,
			Sort:       request.Sort,
			Status:     request.Status,
			MerchantID: request.MerchantID,
			UpdateTime: timeUnix,
			ID:         request.ID,
		},
	}
	// **********调用修改方法******
	if err := aInfo.MerchantAnnouncementEdit(model.Db); err != nil {
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	RespSuccess(c)
}

func AnnouncementDel(c *gin.Context) {
	var request AnnouncementRequstInfo
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	// 参数入参检查
	err := announcementDelCheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	aInfo := model.MerchantAnnouncement{
		AnnouncementInfo: model.AnnouncementInfo{
			Type:       request.Type,
			MerchantID: request.MerchantID,
			ID:         request.ID,
		},
	}
	// **********调用DEL方法******
	if err := aInfo.MerchantAnnouncementDel(model.Db); err != nil {
		RespServerErr(c)
		logrus.Error(err)
		return
	}
	RespSuccess(c)
}
