package model

import "github.com/jinzhu/gorm"

type (
	// 用户财务明细表
	UserBill struct {
		Id         int
		UserId     int
		MerchantId int
		Type       int
		SettAmt    float64
		Memo       string
		Tips       string
		Fee        float64
		About      string
		Balance    float64
		OldBalance float64
		Status     int
		OrderSn    string
		Code       int
		CodeSn     string
		CreateTime int64
		UpdateTime int64
		Fs         float64
		Fy         float64
	}

	// 用户充值明细表
	UserPay struct {
		Id            int
		UserId        int
		OrderSn       string
		Status        int
		PayMoney      float64
		Memo          string
		Tips          string
		MerchantPayId int
		CreateTime    int64
		CallbackTime  int64
		UpdateTime    int64
		Fee           float64
		PayType       int
		PlatformCode  string
		SysPayType    string
	}

	// 用户提现表
	UserWithdraw struct {
		Id           int
		UserId       int
		Money        float64
		Status       int
		Memo         string
		Addition     string
		CreateTime   int64
		ApproveTime  int64
		OrderSn      string
		Type         int
		CallbackTime int64
		Fee          float64
		OperatorId   int
		OperatorIp   string
		CardNo       string
	}

	// 用户后台操作帐变记录表
	UserBackAddBill struct {
		Id         int
		UserId     int
		Type       int
		SettAmt    float64
		Memo       string
		Tips       string
		Fee        float64
		Balance    float64
		OldBalance float64
		Status     int
		OrderSn    string
		Code       int
		CreateTime int64
		MerchantId int
		Operator   int
	}
)

type (
	MemberBillInfo struct {
		UserBill
		TrueName string
		UserName string
	}

	RechargeBillInfo struct {
		UserPay
		Balance    float64
		OldBalance float64
		Code       int
		Type       int
		TrueName   string
		UserName   string
	}
	RechargeBillSuccessInfo struct {
		RechargeSuccessNum int
		RechargeSuccessSum float64
	}

	WithdrawBillInfo struct {
		UserWithdraw
		ClassName string
		TrueName  string
		UserName  string
	}
	WithdrawBillSuccessInfo struct {
		WithdrawSuccessNum int
		WithdrawSuccessSum float64
	}
)

func GetMemberBillList(db *gorm.DB, merchantId, page, pageCount int, m map[string]interface{}) ([]MemberBillInfo, int, error) {
	whereStr := "ub.merchant_id=?"
	condition := []interface{}{merchantId}
	if v, ok := m["user_type"]; ok {
		whereStr += " AND u.type=?"
		condition = append(condition, v)
	}
	if v, ok := m["type"]; ok {
		whereStr += " AND ub.type=?"
		condition = append(condition, v)
	}
	if v, ok := m["code"]; ok {
		whereStr += " AND ub.code=?"
		condition = append(condition, v)
	}
	if v1, ok1 := m["start_time"]; ok1 {
		if v2, ok2 := m["end_time"]; ok2 {
			whereStr += " AND ?<=ub.create_time AND ub.create<=?"
			condition = append(condition, v1, v2)
		} else {
			whereStr += " AND ?<=ub.create_time"
			condition = append(condition, v1)
		}
	} else {
		if v2, ok2 := m["end_time"]; ok2 {
			whereStr += " AND ub.create<=?"
			condition = append(condition, v2)
		}
	}
	if v, ok := m["user_name"]; ok {
		whereStr += " AND u.user_name LIKE ?"
		userName, _ := v.(string)
		condition = append(condition, "%"+userName+"%")
	}

	var list []MemberBillInfo
	if err := db.Table(`user_bill AS ub`).Joins(`
		LEFT JOIN user AS u ON u.id=ub.user_id
	`).Select(`
		ub.*,
		u.true_name,
		u.user_name
	`).Where(whereStr, condition...).Order(`
		ub.create_time DESC
	`).Offset((page - 1) * pageCount).Limit(pageCount).Find(&list).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, 0, nil
		}
		return nil, 0, err
	}

	var count int
	if err := db.Table(`user_bill AS ub`).Joins(`
		LEFT JOIN user AS u ON u.id=ub.user_id
	`).Where(whereStr, condition...).Count(&count).Error; err != nil {
		return nil, 0, err
	}

	return list, count, nil
}

func GetRechargeBillList(db *gorm.DB, merchantId, page, pageCount int, m map[string]interface{}) ([]RechargeBillInfo, int, int, float64, error) {
	whereStr := "ub.merchant_id=?"
	condition := []interface{}{merchantId}
	if v, ok := m["pay_type"]; ok {
		whereStr += " AND up.pay_type=?"
		condition = append(condition, v)
	} else {
		whereStr += " AND up.pay_type=1"
	}
	if v1, ok1 := m["start_time"]; ok1 {
		if v2, ok2 := m["end_time"]; ok2 {
			whereStr += " AND ?<=up.create_time AND up.create<=?"
			condition = append(condition, v1, v2)
		} else {
			whereStr += " AND ?<=up.create_time"
			condition = append(condition, v1)
		}
	} else {
		if v2, ok2 := m["end_time"]; ok2 {
			whereStr += " AND up.create<=?"
			condition = append(condition, v2)
		}
	}
	if v, ok := m["user_name"]; ok {
		whereStr += " AND u.user_name LIKE ?"
		userName, _ := v.(string)
		condition = append(condition, "%"+userName+"%")
	}

	var list []RechargeBillInfo
	if err := db.Table(`user_pay AS up`).Joins(`
		LEFT JOIN user_bill AS ub ON ub.order_sn=up.order_sn
	`).Joins(`
		LEFT JOIN user AS u ON u.id=up.user_id
	`).Select(`
		up.*,
		ub.balance,
		ub.old_balance,
		ub.code,
		ub.type,
		u.true_name,
		u.user_name
	`).Where(whereStr, condition...).Order(`
		up.create_time DESC
	`).Offset((page - 1) * pageCount).Limit(pageCount).Find(&list).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, 0, 0, 0, nil
		}
		return nil, 0, 0, 0, err
	}

	var count int
	if err := db.Table(`user_pay AS up`).Joins(`
		LEFT JOIN user_bill AS ub ON ub.order_sn=up.order_sn
	`).Joins(`
		LEFT JOIN user AS u ON u.id=up.user_id
	`).Where(whereStr, condition...).Count(&count).Error; err != nil {
		return nil, 0, 0, 0, err
	}

	whereStr += " AND up.status=2"
	var successInfo RechargeBillSuccessInfo
	if err := db.Table(`user_pay AS up`).Joins(`
		LEFT JOIN user_bill AS ub ON ub.order_sn=up.order_sn
	`).Joins(`
		LEFT JOIN user AS u ON u.id=up.user_id
	`).Select(`
		COUNT(*) AS recharge_success_num,
		SUM(up.pay_money) AS recharge_success_sum
	`).Where(whereStr, condition...).Find(&successInfo).Error; err != nil {
		return nil, 0, 0, 0, err
	}

	return list, count, successInfo.RechargeSuccessNum, successInfo.RechargeSuccessSum, nil
}

func GetWithdrawBillList(db *gorm.DB, merchantId, page, pageCount int, m map[string]interface{}) ([]WithdrawBillInfo, int, int, float64, error) {
	whereStr := "u.merch_id=?"
	condition := []interface{}{merchantId}
	if v1, ok1 := m["start_time"]; ok1 {
		if v2, ok2 := m["end_time"]; ok2 {
			whereStr += " AND ?<=up.create_time AND up.create<=?"
			condition = append(condition, v1, v2)
		} else {
			whereStr += " AND ?<=up.create_time"
			condition = append(condition, v1)
		}
	} else {
		if v2, ok2 := m["end_time"]; ok2 {
			whereStr += " AND up.create<=?"
			condition = append(condition, v2)
		}
	}
	if v, ok := m["user_name"]; ok {
		whereStr += " AND u.user_name LIKE ?"
		userName, _ := v.(string)
		condition = append(condition, "%"+userName+"%")
	}

	var list []WithdrawBillInfo
	if err := db.Table(`user_withdraw AS uw`).Joins(`
		LEFT JOIN user AS u ON u.id=uw.user_id
	`).Joins(`
		LEFT JOIN merchant_user_class AS muc ON muc.id=u.class_id
	`).Select(`
		uw.*,
		muc.class_name,
		u.true_name,
		u.user_name
	`).Order(`
		uw.create_time DESC
	`).Offset((page-1)*pageCount).Limit(pageCount).Where(whereStr, condition...).Find(&list).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, 0, 0, 0, nil
		}
		return nil, 0, 0, 0, err
	}

	var count int
	if err := db.Table(`user_withdraw AS uw`).Joins(`
		LEFT JOIN user AS u ON u.id=uw.user_id
	`).Joins(`
		LEFT JOIN merchant_user_class AS muc ON muc.id=u.class_id
	`).Where(whereStr, condition...).Count(&count).Error; err != nil {
		return nil, 0, 0, 0, err
	}

	whereStr += " AND uw.status=4"
	var successInfo WithdrawBillSuccessInfo
	if err := db.Table(`user_withdraw AS uw`).Joins(`
		LEFT JOIN user AS u ON u.id=uw.user_id
	`).Joins(`
		LEFT JOIN merchant_user_class AS muc ON muc.id=u.class_id
	`).Select(`
		COUNT(*) AS withdraw_success_num,
		SUM(uw.money) AS withdraw_success_sum
	`).Where(whereStr, condition...).Find(&successInfo).Error; err != nil {
		return nil, 0, 0, 0, err
	}

	return list, count, successInfo.WithdrawSuccessNum, successInfo.WithdrawSuccessSum, nil
}
