package og

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"
)

// OG
type GameOG struct {
	//game.Server
	Token string
	User  string
	Key   string
	/*
		Agent  string

		DesKey string
		Md5Key string
	*/
}

const (
	ERR_SYSTEM_ERROR       = "system error"
	ERR_NET_ERROR          = "network error"
	ERR_AUTH_FAILED        = "auth failed"
	ERR_SIGN_ERROR         = "sign error"
	ERR_APPID_ERROR        = "appid error"
	ERR_SECRET_ERROR       = "secret error"
	ERR_LACK_PARAMETERS    = "Lack of necessary parameters"
	ERR_BALANCE_NOT_ENOUGH = "balance is not enough"
	ERR_ILLEGAL_IP         = "illegal ip"
	KC_RAND_KIND_NUM       = 0    // 纯数字
	KC_RAND_KIND_LOWER     = 1    // 小写字母
	KC_RAND_KIND_UPPER     = 2    // 大写字母
	KC_RAND_KIND_ALL       = 3    // 数字、大小写字母
	DEFAULT_PAGE           = "1"  //默认第几页
	DEFAULT_PAGECOUNT      = "10" //默认一页多少数量
	LOGIN_EXPIRED_TIME     = 3600 //token过期时间
	//redis key值
	INFO_USER  = "info_user"
	INFO_MERCH = "info_merch"
	GAME_AG    = "1"
	GAME_BBIN  = "2"
	GAME_SB    = "3"
	GAME_AB    = "4"
)

//Post 请求方法,返回请求的消息
func HttpPost(go_url string, params map[string]string) string {
	query := url.Values{}
	for key, value := range params {
		query.Add(key, value)
	}
	fmt.Println(query)
	resp, err := http.PostForm(go_url, query)
	if err != nil {
		fmt.Println(err)
		return ERR_NET_ERROR
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		return ERR_NET_ERROR
	}
	fmt.Println("54:", string(body))
	return string(body)
}

//Post 请求方法,返回请求的消息
func HandleDeal(go_url string, params map[string]string) string {
	query := url.Values{}
	for key, value := range params {
		query.Add(key, value)
	}
	fmt.Println(query)

	resp, err := http.PostForm(go_url, query)
	if err != nil {
		fmt.Println(err)
		return ERR_NET_ERROR
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		return ERR_NET_ERROR
	}
	fmt.Println("54:", string(body))
	return string(body)
}

//GET 请求方法,返回请求的消息
func HttpGet(go_url string) string {
	//query := url.Values{}
	/*
		var api_url string
		api_url = go_url + '/'
		var providerId int
		var username string
		for key, value := range params {
			if key == "providerId" {

				value, ok := value.(int)
				if ok {
					providerId = value
					api_url = strconv.Itoa(value)
				}

			}
			if key == "username" {
				value, ok := value.(string)
				if ok {
					username = value
				}
			}

		}
		fmt.Println("79", api_url)
		fmt.Println("80", providerId, username)
	*/
	resp, err := http.Get(go_url)
	if err != nil {
		fmt.Println(err)
		return ERR_NET_ERROR
	}
	/*
		resp, err := http.Get(go_url, query)
		if err != nil {
			fmt.Println(err)
			return ERR_NET_ERROR
		}		}
	*/
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		fmt.Println(err)
		return ERR_NET_ERROR
	}
	return string(body)
}
