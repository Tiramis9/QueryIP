package action

import (
	"errors"
	"fmt"
	"golang_game_merchant/global/status"
	"golang_game_merchant/model"

	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

type (
	AnnouncementRequst struct {
		//	Token     string `json:"token"`
		GameType  string `json:"type"`
		Page      int    `json:"page"`       //页码
		PageCount int    `json:"page_count"` //每页显示的数量
	}
	AnnouncementInfo struct {
		Content   interface{} `json:"content"`
		Device    interface{} `json:"device"`
		StartTime interface{} `json:"start_time"`
		EndTime   interface{} `json:"end_time"`
		Sort      interface{} `json:"sort"`
		Type      interface{} `json:"type"`
		Title     interface{} `json:"title"`
		Url       interface{} `json:"url"`
		Status    interface{} `json:"status"`
	}
	AnnouncementResponse struct {
		List  []AnnouncementInfo `json:"data"`
		Total int                `json:"total"`
	}
)

func announcementListcheck(request *AnnouncementRequst) (map[string]interface{}, error) {
	msg := make(map[string]interface{})
	if request.GameType == "" {
		return nil, errors.New("request are invalid from token or type ")
	}
	if request.Page < 1 {
		request.Page = 1
	}
	if request.PageCount < 0 {
		return nil, errors.New("page count error")
	}
	msg["type"] = request.GameType
	return msg, nil
}
func AnnouncementList(c *gin.Context) {
	var request AnnouncementRequst
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	// 参数入参检查
	msg, err := announcementListcheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	switch msg["type"] {
	case "1":
		list, count, err := model.GetMerchantAnnouncementList(model.Db, request.Page, request.PageCount, msg)
		if err != nil {
			RespServerErr(c)
			logrus.Error(err)
			return
		}
		resp := AnnouncementResponse{
			List:  make([]AnnouncementInfo, 0),
			Total: count,
		}
		for i := range list {
			temp := AnnouncementInfo{
				Content:   list[i].Content,
				Device:    list[i].Device,
				StartTime: list[i].StartTime,
				EndTime:   list[i].EndTime,
				Url:       list[i].Url,
				Type:      list[i].Type,
				Title:     list[i].Title,
				Sort:      list[i].Sort,
				Status:    list[i].Status,
			}
			resp.List = append(resp.List, temp)
		}
		RespJson(c, status.OK, resp)
	case "2":
		list, count, err := model.GetMerchantAnnouncementList(model.Db, request.Page, request.PageCount, msg)
		if err != nil {
			RespServerErr(c)
			logrus.Error(err)
			return
		}
		resp := AnnouncementResponse{
			List:  make([]AnnouncementInfo, 0),
			Total: count,
		}
		for i := range list {
			temp := AnnouncementInfo{
				Content:   list[i].Content,
				Device:    list[i].Device,
				StartTime: list[i].StartTime,
				EndTime:   list[i].EndTime,
				Url:       list[i].Url,
				Type:      list[i].Type,
				Title:     list[i].Title,
				Sort:      list[i].Sort,
			}
			resp.List = append(resp.List, temp)
		}
		RespJson(c, status.OK, resp)
	}

}

func announcementADDcheck(request *AnnouncementInfo) (map[string]interface{}, error) {

	return nil, nil
}
func AnnouncementAdd(c *gin.Context) {
	fmt.Println("welcome to AnnouncementAdd")
	var request AnnouncementInfo
	if err := c.Bind(&request); err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	fmt.Println("ran request:", request)
	// 参数入参检查
	msg, err := announcementADDcheck(&request)
	if err != nil {
		RespParamErr(c)
		logrus.Error(err)
		return
	}
	fmt.Println("ran msg:", msg)
	RespSuccess(c)
}

func AnnouncementEdit(c *gin.Context) {
	RespSuccess(c)
}

func AnnouncementDel(c *gin.Context) {
	RespSuccess(c)
}
