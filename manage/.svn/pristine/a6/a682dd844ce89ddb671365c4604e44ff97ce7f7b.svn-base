package model

import (
	"errors"

	"github.com/jinzhu/gorm"
)

var (
	REQUESTUSERERROR = errors.New("接收人不存在")
)

type (
	UserMessage struct {
		UserId     int   `json:"user_id"`
		MsgId      int   `json:"msg_id"`
		CreateTime int64 `json:"create_time"`
		UpdateTime int64 `json:"update_time"`
		HaveRead   int   `json:"have_read"`
		ReadTime   int   `json:"read_time"`
		MerchantId int   `json:"merchant_id"`
	}
	Message struct {
		Id             int    `json:"id"`
		Type           int    `json:"type"`
		ToAgent        string `json:"to_agent"`
		CreateTime     int64  `json:"create_time"`
		ToUser         string `json:"to_user"`
		SendMerchantId int    `json:"send_merchant_id"`
		ToMerchantId   int    `json:"to_merchant_id"`
		UpdateTime     int64  `json:"update_time"`
		Title          string `json:"title"`
		Content        string `json:"content"`
	}

	SysMessage struct {
		Message
	}
	TempQusetUser struct {
		Id         int `json:"id"`
		MerchantId int `json:"merchant_id"`
		UserName   string
		ClassName  string `json:"class_name"`
		Status     string `json:"status"`
		GroupName  string `json:"group_name"`
	}
)

func GetMessageInfoList(db *gorm.DB, page int, pageCount int, msg map[string]interface{}) ([]Message, int, error) {
	var list []Message
	if err := db.Debug().Table("sys_message").Select("type,id,to_agent,create_time,send_merchant_id,update_time,to_merchant_id,to_user,title,content").Where("send_merchant_id=? AND type=?",
		msg["merchant_id"], msg["type"]).Offset((page - 1) * pageCount).Limit(pageCount).Find(&list).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, 0, err
		}
		return nil, 0, err
	}
	var count int
	if err := db.Table(`sys_message`).Where("send_merchant_id=? AND type=?",
		msg["merchant_id"], msg["type"]).Count(&count).Error; err != nil {
		return nil, 0, err
	}
	return list, count, nil
}

/*
SELECT
	um.id,um.msg_id,um.have_read,um.create_time,um.read_time,um.user_id,sm.title,sm.content
FROM
	user_message AS um
LEFT JOIN
	sys_message AS sm ON sm.id=um.msg_id
WHERE
	(um.user_id='{id}')
LIMIT {limit} OFFSET {offset}
*/
func GetMessageList(db *gorm.DB, userId int, page int, pageCount int) ([]Message, error) {

	var msgList []Message
	if err := db.Table(`user_message AS um`).Joins(`
		LEFT JOIN sys_message AS sm ON sm.id=um.msg_id`).Select(`
		um.id,um.msg_id,um.have_read,um.create_time,um.read_time,um.user_id,sm.title,sm.content
	`).Where(`um.user_id=?`, userId).Offset((page - 1) * pageCount).Limit(pageCount).Find(&msgList).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, nil
		}
		return nil, err
	}
	return msgList, nil
}

// SELECT count(*) FROM `user_message`  WHERE (user_id='{id}')
func GetMessageCount(db *gorm.DB, userId int) (int, error) {
	var count int
	if err := db.Table(`user_message`).Where(`user_id=?`, userId).Count(&count).Error; err != nil {
		return 0, err
	}

	return count, nil
}

/* select
q.to_user,u.user_name
from  sys_message AS q, user AS u
where q.to_user =u.user_name
*/
// 查找User表
// 检查信息接收的用户是否存在，如存在，返回商户ID与用户ID
func MessageUserAppointAddUserCheck(db *gorm.DB, user []string) (string, map[int]int, error) {
	var temp TempQusetUser
	var strList string
	merchId := make(map[int]int)
	for _, u := range user {
		if err := db.Debug().Table("user").Select([]string{"merchant_id,user_name,id"}).Where("user_name=?",
			u).Scan(&temp).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				break
			}
			return "", nil, err
		}
		strList += temp.UserName + ","
		merchId[temp.Id] = temp.MerchantId
	}
	if strList == "" || merchId == nil {
		return "", nil, REQUESTUSERERROR
	}
	return strList, merchId, nil
}

// 检查信息接收的用户是否存在，阶级判断, 返回商户ID与用户ID，group []string
func MessageUserAppointAddClassCheck(db *gorm.DB, class []string, group []string) (string, map[int]int, error) {
	var tempClass TempQusetUser
	var tempGroup TempQusetUser
	var list []TempQusetUser
	var arryClass []int
	var arryGroup []int
	var strList string
	var merchId map[int]int
	merchId = make(map[int]int)
	// 查询merchant_user_class，容错class等级，判断是否存在
	for _, c := range class {
		if err := db.Debug().Table("merchant_user_class").Select("id,class_name").Where("id = ?",
			c).Scan(&tempClass).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				continue
			}
			return "", nil, err
		}
		if tempClass.Id != -1 {
			strList += tempClass.ClassName + ","
			arryClass = append(arryClass, tempClass.Id)
		}
	}
	// 查询merchant_user_group 容错Group层级，判断是否存在
	for _, g := range group {
		if err := db.Debug().Table("merchant_user_group").Select("id,group_name").Where("id = ?",
			g).Scan(&tempGroup).Error; err != nil {
			if err == gorm.ErrRecordNotFound {
				continue
			}
			return "", nil, err
		}
		if tempGroup.Id != -1 {
			strList += tempGroup.GroupName + ","
			arryGroup = append(arryGroup, tempGroup.Id)
		}
	}
	// 查询对应user表中对应商户ID与USERID
	if err := db.Debug().Table("user").Select("id,merchant_id").Where("class_id=? AND status = 1",
		arryClass).Or("group_id=? ", arryGroup).Find(&list).Error; err != nil {
		return "", nil, err
	}
	// 提取商户的ID与USERID
	for _, merch := range list {
		merchId[merch.Id] = merch.MerchantId
	}
	// 容错接受方是否有效
	if strList == "" || merchId == nil {
		return "", nil, REQUESTUSERERROR
	}
	return strList, merchId, nil
}

// 插入SQL信息
func (in SysMessage) MessageUserAddInfo(db *gorm.DB, msgMerchId map[int]int) error {
	if err := db.Debug().Create(&in).Error; err != nil {
		return err
	}
	var time Message
	if err := db.Debug().Table("sys_message").Select("id").Where("content=? AND title=? AND to_user=?",
		in.Content, in.Title, in.ToUser).Find(&time).Error; err != nil {
		return err
	}
	for point, merchId := range msgMerchId {
		aInfo := UserMessage{
			UserId:     point,
			MsgId:      time.Id,
			CreateTime: in.CreateTime,
			UpdateTime: in.UpdateTime,
			HaveRead:   0,
			ReadTime:   0,
			MerchantId: merchId,
		}
		if err := db.Debug().Create(&aInfo).Error; err != nil {
			return err
		}
	}
	return nil
}

/*
UPDATE
	`user_message`
SET
	`have_read` = '1', `read_time` = '1541574995'
WHERE
	(`user_message`.`id` = '{id}') AND (`user_message`.`have_read` = '0')
*/
func ReadMessage(db *gorm.DB, id int, time int64) (bool, error) {
	if err := db.Table(`user_message`).Where(map[string]interface{}{
		"id":        id,
		"have_read": 0,
	}).Updates(map[string]interface{}{
		"have_read": 1,
		"read_time": time,
	}).Error; err != nil {
		return false, err
	}

	return true, nil
}
