package dg

import (
	"encoding/json"
	"fmt"
	"game2/lib/encrypt"
	"game2/lib/game"
	"game2/lib/utils"
	"time"
)

type GameDG struct {
	Host  string
	Agent string
	Key   string
}

type (
	RegisterMember struct {
		Username     string  `json:"username"`
		Password     string  `json:"password"`
		CurrencyName string  `json:"currencyName"`
		WinLimit     float64 `json:"winLimit"`
	}
	RegisterReq struct {
		Token  string         `json:"token"`
		Random string         `json:"random"`
		Data   string         `json:"data"`
		Member RegisterMember `json:"member"`
	}
	RegisterResp struct {
		CodeId int    `json:"codeId"`
		Token  string `json:"token"`
		Random string `json:"random"`
		Data   string `json:"data"`
	}

	LoginMember struct {
		UserName string `json:"username"`
		Password string `json:"password"`
	}
	LoginReq struct {
		Token  string      `json:"token"`
		Random string      `json:"random"`
		Lang   string      `json:"lang"`
		Member LoginMember `json:"member"`
	}
	LoginResp struct {
		CodeId int      `json:"codeId"`
		Token  string   `json:"token"`
		Random string   `json:"random"`
		List   []string `json:"list"`
	}

	GetUserBalanceMember struct {
		Username string `json:"username"`
	}
	GetUserBalanceReq struct {
		Token  string               `json:"token"`
		Random string               `json:"random"`
		Member GetUserBalanceMember `json:"member"`
	}
	GetUserBalanceResp struct {
		CodeId int    `json:"codeId"`
		Token  string `json:"token"`
		Random string `json:"random"`
		Member struct {
			UserName string  `json:"username"`
			Balance  float64 `json:"balance"`
		} `json:"member"`
	}

	UserTransferMember struct {
		UserName string  `json:"username"`
		Amount   float64 `json:"amount"`
	}
	UserTransferReq struct {
		Token  string             `json:"token"`
		Random string             `json:"random"`
		Data   string             `json:"data"`
		Member UserTransferMember `json:"member"`
	}
	UserTransferResp struct {
		CodeId int    `json:"codeId"`
		Token  string `json:"token"`
		Random string `json:"random"`
		Data   string `json:"data"`
		Member struct {
			UserName string  `json:"username"`
			Balance  float64 `json:"balance"`
		} `json:"member"`
	}

	GetGameRecordReq struct {
		Token  string `json:"token"`
		Random string `json:"random"`
	}
	GetGameRecordResp struct {
		CodeId int    `json:"codeId"`
		Token  string `json:"token"`
		Random string `json:"random"`
		List   struct {
			Id           int64     `json:"id"`
			LobbyId      int       `json:"lobbyId"`
			TableId      int       `json:"tableId"`
			ShoeId       int64     `json:"shoeId"`
			PlayId       int64     `json:"playId"`
			GameType     int       `json:"GameType"`
			GameId       int       `json:"GameId"`
			MemberId     int64     `json:"memberId"`
			BetTime      time.Time `json:"betTime"`
			CalTime      time.Time `json:"calTime"`
			WinOrLoss    float64   `json:"winOrLoss"`
			WinOrLossz   float64   `json:"winOrLossz"`
			BetPoints    float64   `json:"betPoints"`
			BetPointsz   float64   `json:"betPointsz"`
			AvailableBet float64   `json:"availableBet"`
			UserName     string    `json:"userName"`
			Result       string    `json:"result"`
			BetDetail    string    `json:"betDetail"`
			BetDetailz   string    `json:"betDetailz"`
			Ip           string    `json:"ip"`
			Ext          string    `json:"ext"`
			IsRevocation int       `json:"isRevocation"`
			ParentBetId  int64     `json:"parentBetId"`
			CurrencyId   int       `json:"currencyId"`
			DeviceType   int       `json:"deviceType"`
			Pluginid     int       `json:"pluginid"`
		} `json:"list"`
	}
)

// 产生token
func (g *GameDG) generateToken(random string) string {
	return encrypt.MD5(g.Agent + g.Key + random)
}

// 注册新会员
func (g *GameDG) Register(m map[string]interface{}) (interface{}, error) {
	random := string(utils.Krand(32, utils.KC_RAND_KIND_ALL))
	req := RegisterReq{
		Token:  g.generateToken(random),
		Random: random,
		Data:   "A",
		Member: RegisterMember{
			Username:     m["username"].(string),
			Password:     m["password"].(string),
			CurrencyName: "CNY",
			WinLimit:     0,
		},
	}

	data, err := utils.HttpPostJson(g.Host+fmt.Sprintf(RegisterUrl, g.Agent), req)
	if err != nil {
		return nil, err
	}

	var resp RegisterResp
	if err := json.Unmarshal(data, &resp); err != nil {
		return nil, err
	}

	return &resp, nil
}

// 会员登入
func (g *GameDG) Login(m map[string]interface{}) (interface{}, error) {
	random := string(utils.Krand(32, utils.KC_RAND_KIND_ALL))
	req := LoginReq{
		Token:  g.generateToken(random),
		Random: random,
		Lang:   "en",
		Member: LoginMember{
			UserName: m["username"].(string),
			Password: m["password"].(string),
		},
	}
	data, err := utils.HttpPostJson(g.Host+fmt.Sprintf(LoginUrl, g.Agent), req)
	if err != nil {
		return nil, err
	}

	var resp LoginResp
	if err := json.Unmarshal(data, &resp); err != nil {
		return nil, err
	}

	return &resp, nil
}

// 获取会员余额
func (g *GameDG) GetBalance(m map[string]interface{}) (interface{}, error) {
	random := string(utils.Krand(32, utils.KC_RAND_KIND_ALL))
	req := GetUserBalanceReq{
		Token:  g.generateToken(random),
		Random: random,
		Member: GetUserBalanceMember{
			Username: m["username"].(string),
		},
	}
	data, err := utils.HttpPostJson(g.Host+fmt.Sprintf(GetUserBalanceUrl, g.Agent), req)
	if err != nil {
		return nil, err
	}

	var resp GetUserBalanceResp
	if err := json.Unmarshal(data, &resp); err != nil {
		return nil, err
	}

	return &resp, nil
}

// 中心专户转到游戏账户
func (g *GameDG) Account2GameTransfer(m map[string]interface{}) (interface{}, error) {
	random := string(utils.Krand(32, utils.KC_RAND_KIND_ALL))
	req := UserTransferReq{
		Token:  g.generateToken(random),
		Random: random,
		Data:   m["order_id"].(string),
		Member: UserTransferMember{
			UserName: m["username"].(string),
		},
	}
	if m["amount"].(float64) < 0 {
		req.Member.Amount = -m["amount"].(float64)
	}
	data, err := utils.HttpPostJson(g.Host+fmt.Sprintf(UserTransferUrl, g.Agent), req)
	if err != nil {
		return nil, err
	}

	var resp UserTransferResp
	if err := json.Unmarshal(data, &resp); err != nil {
		return nil, err
	}

	return &resp, nil
}

// 游戏账户转到中心中户
func (g *GameDG) Game2AccountTransfer(m map[string]interface{}) (interface{}, error) {
	random := string(utils.Krand(32, utils.KC_RAND_KIND_ALL))
	req := UserTransferReq{
		Token:  g.generateToken(random),
		Random: random,
		Data:   m["order_id"].(string),
		Member: UserTransferMember{
			UserName: m["username"].(string),
		},
	}
	if m["amount"].(float64) > 0 {
		req.Member.Amount = -m["amount"].(float64)
	}
	data, err := utils.HttpPostJson(g.Host+fmt.Sprintf(UserTransferUrl, g.Agent), req)
	if err != nil {
		return nil, err
	}

	var resp UserTransferResp
	if err := json.Unmarshal(data, &resp); err != nil {
		return nil, err
	}

	return &resp, nil
}

// 抓取注单报表
func (g *GameDG) QueryRecord(m map[string]interface{}) (interface{}, error) {
	random := string(utils.Krand(32, utils.KC_RAND_KIND_ALL))
	req := GetGameRecordReq{
		Token:  g.generateToken(random),
		Random: random,
	}
	data, err := utils.HttpPostJson(g.Host+fmt.Sprintf(GetGameRecordUrl, g.Agent), req)
	if err != nil {
		return nil, err
	}

	var resp GetGameRecordResp
	if err := json.Unmarshal(data, &resp); err != nil {
		return nil, err
	}

	return &resp, nil
}

func NewDGGame() game.Game {
	return &GameDG{
		Host:  GameDGHost,
		Agent: GameDGAgent,
		Key:   GameDGKey,
	}
}

func init() {
	game.Register("dg", NewDGGame)
}
