package action

import (
	"github.com/gin-gonic/gin"
	"golang_game_merchant/global/status"
	"golang_game_merchant/model"
)

/*type UserClassEditReq struct {
	Id                 int    `json:"id" binding:"required"`
	ClassName          string `json:"class_name"`           //层级
	Remark             string `json:"remark"`               //备注
	SupportMerchantPay string `json:"support_merchant_pay"` //支持的商户支付通道,eg:1,4,6,8
	WithdrawLimitCount int    `json:"withdraw_limit_count"` //单日提款次数上限 -1为不限制提现次数,0将无法提现
	RuleId             int    `json:"rule_id"`              //反水规则id
	IsFs               int    `json:"is_fs"`                //0不支持反水;1支持反水
}*/

/*type UserClassAddReq struct {
	ClassName          string `json:"class_name"`           //层级
	Remark             string `json:"remark"`               //备注
	SupportMerchantPay string `json:"support_merchant_pay"` //支持的商户支付通道,eg:1,4,6,8
	WithdrawLimitCount int    `json:"withdraw_limit_count"` //单日提款次数上限 -1为不限制提现次数,0将无法提现
	RuleId             int    `json:"rule_id"`              //反水规则id
	IsFs               int    `json:"is_fs"`                //0不支持反水;1支持反水
}*/

//等级简略列表(验证用)
type MerchantUserGroupList struct {
	Id        int    `json:"id"`
	GroupName string `json:"group_name"`
}

//层级列表返回
type MerchantUserGroupListResp struct {
	List []MerchantUserGroupList `json:"list"`
}

type UserGroupInfo struct {
	Id               int     `json:"id"`
	MerchantId       int     `json:"merchant_id"`        //商户id
	GroupName        string  `json:"group_name"`         //等级
	FsSportRate      int     `json:"fs_sport_rate"`      //体育返水
	FsLotteryRate    int     `json:"fs_lottery_rate"`    //彩票返水
	FsPeopleRate     int     `json:"fs_people_rate"`     //真人返水
	FsElectronicRate int     `json:"fs_electronic_rate"` //电子游戏返水
	EffectiveBet     float64 `json:"effective_bet"`      //有效投注额
	UpgradeReward    int     `json:"upgrade_reward"`     //晋级彩金
	BirthdayReward   int     `json:"birthday_reward"`    //生日彩金
	MemberNum        int     `json:"member_num"`         //会员数
}

//等级详细信息
type UserGroupInfoListResp struct {
	List []UserGroupInfo
}

/**
用户等级列表
*/
func GetMerchantUserGroupList(c *gin.Context) {
	var data UserGroupInfoListResp
	//todo 从token获取 merchantId
	merchantId := 1
	list, err := model.GetMerchantUserGroupList(model.Db, merchantId)
	if err != nil {
		RespServerErr(c)
		return
	}
	for i := range list {
		temp := UserGroupInfo{
			Id:               list[i].Id,
			GroupName:        list[i].GroupName,
			FsSportRate:      list[i].FsSportRate,
			FsLotteryRate:    list[i].FsLotteryRate,
			FsPeopleRate:     list[i].FsPeopleRate,
			FsElectronicRate: list[i].FsElectronicRate,
			EffectiveBet:     list[i].EffectiveBet,
			BirthdayReward:   list[i].BirthdayReward,
			MemberNum:        list[i].MemberNum,
		}
		data.List = append(data.List, temp)
	}
	RespJson(c, status.OK, data)
}

func GetUserGroupList(c *gin.Context) {
	var data MerchantUserGroupListResp
	//todo 从token获取 merchantId
	merchantId := 1
	list, err := model.GetMerchantUserGroupList(model.Db, merchantId)
	if err != nil {
		RespServerErr(c)
		return
	}
	for i := range list {
		temp := MerchantUserGroupList{
			Id:        list[i].Id,
			GroupName: list[i].GroupName,
		}
		data.List = append(data.List, temp)
	}
	RespJson(c, status.OK, data)
}

/**
代理层级详情
*/
/*func UserClassInfo(c *gin.Context) {
	var macReq UserClassEditReq
	c.BindJSON(&macReq)
	merchantId := 1
	info, err, count := model.GetMerchantUserClassInfo(model.Db, merchantId, macReq.Id)
	if err != nil {
		RespServerErr(c)
		return
	}

	if info == nil {
		RespSuccess(c)
		return
	}

	res := UserClassInfoResp{
		Id:                 info.Id,
		ClassName:          info.ClassName,
		SupportMerchantPay: info.SupportMerchantPay,
		WithdrawLimitCount: info.WithdrawLimitCount,
		RuleId:             info.RuleId,
		IsFs:               info.IsFs,
		MemberNum:          count,
	}
	RespJson(c, status.OK, res)
}*/

/**
代理层级编辑
*/
/*func UserClassEdit(c *gin.Context) {
	var macReq UserClassEditReq
	var mac model.MerchantAgentClass
	fields := make(map[string]interface{})
	c.BindJSON(&macReq)
	merchantId := 1
	mac.Id = macReq.Id
	timestamp := time.Now().Unix()
	fields["class_name"] = macReq.ClassName
	fields["mode"] = macReq.Mode
	fields["fd_sport"] = macReq.FdSport
	fields["fd_lottery"] = macReq.FdLottery
	fields["fd_people"] = macReq.FdPeople
	fields["fd_chess"] = macReq.FdChess
	fields["fd_bet_user"] = macReq.FdBetUser
	fields["fd_bet_bill"] = macReq.FdBetBill
	fields["bonus_cut_rate"] = macReq.BonusCutRate
	fields["reback_cut_rate"] = macReq.RebackCutRate
	fields["fc_team_profit"] = macReq.FcTeamProfit
	fields["fc_sport"] = macReq.FcSport
	fields["fc_lottery"] = macReq.FcLottery
	fields["fc_people"] = macReq.FcPeople
	fields["fc_chess"] = macReq.FcChess
	fields["fc_bet_user"] = macReq.FcBetUser
	fields["fc_bet_bill"] = macReq.FcBetBill
	fields["spread_award"] = macReq.SpreadAward
	fields["create_time"], fields["update_time"] = timestamp, timestamp
	fmt.Println(fields)
	_, err := mac.UpdateMerchantAgentClass(model.Db, merchantId, fields)
	if err != nil {
		RespServerErr(c)
		return
	}
	RespSuccess(c)
}*/

/**
代理层级删除
*/
/*func UserClassDel(c *gin.Context) {
	var macReq UserClassEditReq
	var mac model.MerchantAgentClass
	c.BindJSON(&macReq)
	mac.Id = macReq.Id
	merchantId := 1
	info, err := mac.DelMerchantAgentClass(model.Db, merchantId)
	if err != nil {
		RespServerErr(c)
		return
	}
	RespJson(c, status.OK, info)
}*/
