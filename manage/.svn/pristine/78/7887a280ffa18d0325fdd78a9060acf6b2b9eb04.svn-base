package model

import (
	"github.com/jinzhu/gorm"
	"time"
)

// query员工信息
type QueryEmployeeInfo struct {
	Id             int    `json:"uid"`
	TrueName       string `json:"true_name"`
	UserName       string `json:"user_name"`
	LoginIp        string `json:"login_ip"`
	Status         int    `json:"status"`
	MerchantRoleId int    `json:"role_id"`
	RoleName       string `json:"role_name"` //在merchant_admin_role表中
}

//完全结构，位于表：merchant_admin,该结构用于add
type FullEmployeeInfo struct {
	Id             int    `json:"uid"`
	MerchantId     int    `json:"merchant_id"`
	TrueName       string `json:"true_name"` //add
	UserName       string `json:"user_name"` //add
	LoginIp        string `json:"login_ip"`
	LoginTime      int64  `json:"login_time"`
	CreateTime     int64  `json:"create_time"` //add
	Status         int    `json:"status"`      //add
	UpdateTime     int64  `json:"update_time"`
	MerchantRoleId int    `json:"role_id"` //add
	LastLoginIp    string `json:"last_login_ip"`
	LastLoginTime  int64  `json:"last_login_time"`
	ParentId       int    `json:"parent_id"`
	Salt           string `json:"salt"`     //add
	Password       string `json:"password"` //add
}

//modify员工信息
type ModifyEmployeeInfo struct {
	Id             int    `json:"uid"`
	TrueName       string `json:"true_name"`
	UserName       string `json:"user_name"`
	LoginIp        string `json:"login_ip"`
	Status         int    `json:"status"`
	MerchantRoleId int    `json:"role_id"`
	Password       string `json:"password"`
	Salt           string `json:"salt"`
	UpdateTime     int64  `json:"update_time"`
}

//职务角色增删查改
type EmployeeRole struct {
	MerchantId int `json:"merchant_id,omitempty"`
	Id int `json:"id"`
	RoleName   string `json:"role_name"`
	Permission string `json:"permission"`
	Status     int    `json:"status"`
	CreateTime int64 `json:"create_time,omitempty"`
}

// DESC: query员工信息
// SQL: SELECT ma.id,ma.user_name,ma.login_ip,ma.last_login_time,ma.status,mar.role_name FROM merchant_admin AS ma RIGHT JOIN merchant_admin_role AS mar ON ma.merchant_role_id = mar.id WHERE ma.merchant_id = 1;
func QueryEmployeeInfoList(db *gorm.DB, mid int, req *QueryEmployeeInfo) ([]QueryEmployeeInfo, error) {
	whereStr := "ma.merchant_id = ? "
	cond := make([]interface{}, 1)
	cond[0] = mid
	if req.UserName != "" {
		whereStr += " AND ma.user_name = ?"
		cond = append(cond, req.UserName)
	}

	//999,后期可能会改
	if req.Status != 999 {
		whereStr += " AND ma.status = ?"
		cond = append(cond, req.Status)
	}

	var qeList []QueryEmployeeInfo
	if err := db.Table(`merchant_admin AS ma`).Joins(`
		RIGHT JOIN merchant_admin_role AS mar ON ma.merchant_role_id = mar.id AND ma.merchant_id = mar.merchant_id
	`).Select(`
		ma.id,ma.user_name,ma.true_name,ma.login_ip,ma.last_login_time,ma.status,ma.merchant_role_id,mar.role_name
	`).Where(whereStr, cond...).Find(&qeList).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, nil
		}
		return nil, err
	}

	return qeList, nil
}

//DESC: add员工信息
func AddEmployeeInfo(db *gorm.DB, mid int, req *FullEmployeeInfo) error {
	req.MerchantId = mid
	req.CreateTime = time.Now().Unix()
	req.Salt = salt()

	if err := db.Table(`merchant_admin`).Create(req).Error; err != nil {
		return err
	}

	return nil
}

//DESC: 删除员工信息
func DelEmployeeInfo(db *gorm.DB, mid int, uid int) error {
	if err := db.Table(`merchant_admin`).Where(`merchant_id = ? AND id = ? `, mid, uid).Delete(FullEmployeeInfo{}).Error; err != nil {
		return err
	}

	return nil
}

//DESC: modify员工信息
func ModifyEmployeeInfoList(db *gorm.DB, mid int, req *ModifyEmployeeInfo) error {
	fields := map[string]interface{}{
		"user_name":   req.UserName,
		"true_name":   req.TrueName,
		"status":      req.Status,
		"update_time": time.Now().Unix(),
		"password":    req.Password,
		"salt":        salt(),
	}
	if err := db.Table(`merchant_admin`).Where(`merchant_id = ? AND id = ? `, mid, req.Id).Updates(fields).Error; err != nil {
		return err
	}

	return nil
}

func salt() string {
	return "testSaltStr"
}

//DESC : query职务角色
//SQL  : SELECT role_name,permission,status FROM merchant_admin_role  WHERE merchant_id = ?
//POST : {"token":11}
func QueryEmployeeRole(db *gorm.DB, mid int) ([]EmployeeRole,error) {
	var roleList []EmployeeRole
	err := db.Table(`merchant_admin_role`).Select(`role_name,permission,status`).Where(`merchant_id = ?`, mid).Find(&roleList).Error
	if err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, nil
		}
		return nil, err
	}

	return roleList,nil
}

//DESC: modify职务角色
//SQL : UPDATE merchant_admin_role SET permission = ?, role_name = ?, status = ?, update_time = ?  WHERE (merchant_id = ? AND id = ? )
//POST: {"id":2,"role_name":"大超管","permission":"1,2,3,4","status":1}
func ModifyEmployeeRole(db *gorm.DB, mid int,req *EmployeeRole) error {
	field := map[string]interface{}{
		"role_name":req.RoleName,
		"permission":req.Permission,
		"status":req.Status,
		"update_time":time.Now().Unix(),
	}

	if err := db.Table(`merchant_admin_role`).Where(`merchant_id = ? AND id = ? `, mid, req.Id).Updates(field).Error; err != nil {
		return err
	}

	return nil
}

//DESC: Add职务角色
//SQL : INSERT INTO merchant_admin_role (merchant_id,role_name,permission,status,create_time) VALUES (?,?,?,?,?) //eg:VALUE(1,"超级管理","1,2,3,4",1,1542336996)
//POST: {"role_name":"牛超管","permission":"1,2,3,4","status":1}
func AddEmployeeRole(db *gorm.DB, mid int,req *EmployeeRole) error {
	req.MerchantId = mid
	req.CreateTime = time.Now().Unix()

	if err := db.Table(`merchant_admin_role`).Create(req).Error; err != nil {
		return err
	}

	return nil
}

//DESC: del职务角色
//SQL : DELETE FROM merchant_admin_role  WHERE (merchant_id = ? AND id = ? )
//POST: {"token":11,"id",111}
func DelEmployeeRole(db *gorm.DB, mid,uid int) error {
	if err := db.Table(`merchant_admin_role`).Where(`merchant_id = ? AND id = ? `, mid, uid).Delete(EmployeeRole{}).Error; err != nil {
		return err
	}

	return nil
}
