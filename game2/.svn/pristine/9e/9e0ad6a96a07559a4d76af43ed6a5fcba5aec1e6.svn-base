package ky

import (
	"encoding/json"
	"fmt"
	"game2/lib/encrypt"
	"game2/lib/game"
	"game2/lib/utils"
	"net/url"
	"time"
)

const (
	GameAgent    = "62127"
	DESKey       = "1457C7D93CDBC19D"
	MD5Key       = "5417AC8DE1ED2800"
	UserPassword = "pttp90scin7uubf5"
	LineCode     = GameAgent

	channelHandleUrl   = "https://api.ky195.com:189/channelHandle"
	getRecordHandleUrl = "https://record.ky195.com:190/getRecordHandle"

	OperationTypeLogin           = "0" //登录
	OperationTypeQuerySubScore   = "1" //查询可下分
	OperationTypeAddScore        = "2" //上分
	OperationTypeSubScore        = "3" //下分
	OperationTypeQueryOrder      = "4" //查询订单
	OperationTypeQueryIsOnline   = "5" //是否在线
	OperationTypeGetOrderRecord  = "6" //查询游戏注单
	OperationTypeGetTotalScore   = "7" //查询玩家总分
	OperationTypeKickUserOffline = "8" //踢玩家下线

	RetCodeSuccess       = 0  //成功
	RetCodeNoEnoughMoney = 38 //余额不足
	RetCodeNoGameRecord  = 16 //当前没有注单
)

type (
	// 开元棋牌
	GameKY struct {
		Agent        string
		DesKey       string
		Md5Key       string
		UserPassword string
	}

	BaseReq struct {
		Agent     string
		TimeStamp int64 //毫秒
		Param     string
		Key       string
	}

	AccountLoginResp struct {
		S int    `json:"s"`
		M string `json:"m"`
		D struct {
			Code int    `json:"code"`
			Url  string `json:"url"`
		} `json:"d"`
	}
	GetSubScoreBalanceResp struct {
		S int    `json:"s"`
		M string `json:"m"`
		D struct {
			Money float64 `json:"money"`
			Code  int     `json:"code"`
		} `json:"d"`
	}
	AddScoreResp struct {
		S int    `json:"s"`
		M string `json:"m"`
		D struct {
			Code  int     `json:"code"`
			Money float64 `json:"money"`
		} `json:"d"`
	}
	SubScoreResp struct {
		S int    `json:"s"`
		M string `json:"m"`
		D struct {
			Money float64 `json:"money"`
			Code  int     `json:"code"`
		} `json:"d"`
	}
)

func generateOrderId(agent string, us int64, account string) string {
	timeStr := fmt.Sprintf("%v", us)
	date := time.Unix(us/1e3, 0).Format("20060102150405")
	return fmt.Sprintf("%v%v%v%v", agent, date, timeStr[len(timeStr)-3:], account)
}

func generateMd5Str(agent string, timestamp int64, md5Key string) string {
	return fmt.Sprintf("%v%v%v", agent, timestamp, md5Key)
}

func baseReq2Map(b BaseReq) map[string]interface{} {
	m := make(map[string]interface{})
	m["agent"] = b.Agent
	m["timestamp"] = b.TimeStamp
	m["param"] = b.Param
	m["key"] = b.Key

	return m
}

func generateParams(params map[string]interface{}) string {
	query := url.Values{}
	for key, value := range params {
		query.Add(key, fmt.Sprintf("%v", value))
	}
	return query.Encode()
}

// 注册
func (ky *GameKY) Register(m map[string]interface{}) (interface{}, error) {
	return ky.Login(m)
}

func handleInnerParams(m map[string]string) string {
	var ret string
	for k, v := range m {
		ret += fmt.Sprintf(`%v=%v&`, k, v)
	}
	if len(ret) > 1 {
		ret = ret[:len(ret)-1]
	}
	return ret
}

func generateUrlParam(req BaseReq) string {
	query := url.Values{}
	query.Add("agent", req.Agent)
	query.Add("timestamp", fmt.Sprintf("%v", req.TimeStamp))
	query.Add("param", req.Param)
	query.Add("key", req.Key)
	return query.Encode()
}

func (ky *GameKY) generateUrlParams(m map[string]string, us int64) string {
	innerParams := handleInnerParams(m)

	req := BaseReq{
		Agent:     ky.Agent,
		TimeStamp: us,
		Param:     encrypt.AesEcbEncrypt(innerParams, ky.DesKey),
		Key:       encrypt.MD5(generateMd5Str(ky.Agent, us, ky.Md5Key)),
	}

	return generateUrlParam(req)
}

// 登录
// 参数名			|类型	|说明
// --------------------------------
// game_user_name	|string	|用户名
// login_ip			|string	|客户端ip
// game_code		|string	|游戏类型
func (ky *GameKY) Login(m map[string]interface{}) (interface{}, error) {
	now := time.Now().UnixNano() / 1e6
	req := map[string]string{
		"s":        OperationTypeLogin,
		"account":  m["game_user_name"].(string),
		"money":    "0",
		"orderid":  generateOrderId(ky.Agent, now, m["game_user_name"].(string)),
		"ip":       m["login_ip"].(string),
		"lineCode": LineCode,
		"KindID":   m["game_code"].(string),
	}
	data, err := utils.HttpGet(channelHandleUrl + "?" + ky.generateUrlParams(req, now))
	if err != nil {
		return nil, err
	}

	var resp AccountLoginResp
	if err := json.Unmarshal([]byte(data), &resp); err != nil {
		return nil, err
	}

	if resp.D.Code != RetCodeSuccess {
		return nil, fmt.Errorf("login error, error code: %v", resp.D.Code)
	}

	return resp.D.Url, nil
}

// 获取余额
// 参数名			|类型	|说明
// --------------------------------
// game_user_name	|string	|用户名
func (ky *GameKY) GetBalance(m map[string]interface{}) (interface{}, error) {
	now := time.Now().UnixNano() / 1e6
	req := map[string]string{
		"s":       OperationTypeQuerySubScore,
		"account": m["game_user_name"].(string),
	}
	body, err := utils.HttpGet(channelHandleUrl + "?" + ky.generateUrlParams(req, now))
	if err != nil {
		return nil, err
	}

	var resp GetSubScoreBalanceResp
	if err := json.Unmarshal([]byte(body), &resp); err != nil {
		return nil, err
	}
	if resp.D.Code != RetCodeSuccess {
		return nil, fmt.Errorf("get balance error, error code: %v", resp.D.Code)
	}

	return resp.D.Money, nil
}

// 中心账户转到游戏账户
// 参数名			|类型	|说明
// --------------------------------
// game_user_name	|string	|用户名
// amount			|string	|金额
func (ky *GameKY) Account2GameTransfer(m map[string]interface{}) (interface{}, error) {
	now := time.Now().UnixNano() / 1e6
	req := map[string]string{
		"s":       OperationTypeAddScore,
		"account": m["game_user_name"].(string),
		"money":   m["amount"].(string),
		"orderid": generateOrderId(ky.Agent, now, m["game_user_name"].(string)),
	}
	body, err := utils.HttpGet(channelHandleUrl + "?" + ky.generateUrlParams(req, now))
	if err != nil {
		return nil, err
	}

	var resp AddScoreResp
	if err := json.Unmarshal([]byte(body), &resp); err != nil {
		return nil, err
	}
	if resp.D.Code != RetCodeSuccess {
		return nil, fmt.Errorf("account to game transfer error, error code: %v", resp.D.Code)
	}

	return resp.D.Money, nil
}

// 下分
// 参数名			|类型	|说明
// --------------------------------
// game_user_name	|string	|用户名
// amount			|string	|金额
func (ky *GameKY) Game2AccountTransfer(m map[string]interface{}) (interface{}, error) {
	now := time.Now().UnixNano() / 1e6
	req := map[string]string{
		"s":       OperationTypeSubScore,
		"account": m["game_user_name"].(string),
		"money":   m["amount"].(string),
		"orderid": generateOrderId(ky.Agent, now, m["game_user_name"].(string)),
	}
	body, err := utils.HttpGet(channelHandleUrl + "?" + ky.generateUrlParams(req, now))
	if err != nil {
		return nil, err
	}

	var resp SubScoreResp
	if err := json.Unmarshal([]byte(body), &resp); err != nil {
		return nil, err
	}
	if resp.D.Code == RetCodeNoEnoughMoney {
		return nil, game.ErrNoEnoughMoney
	}
	if resp.D.Code != RetCodeSuccess {
		return nil, fmt.Errorf("game to account transfer error, error code: %v", resp.D.Code)
	}

	return resp.D.Money, nil
}

type GetGameRecordResp struct {
	S int    `json:"s"`
	M string `json:"m"`
	D struct {
		Code            int    `json:"code"`
		Count           int    `json:"count"`
		ServerStartTime string `json:"serverStartTime"`
		ServerEndTime   string `json:"serverStartTime"`
		List            []struct {
			GameId        string    `json:"GameID"`
			Accounts      string    `json:"Accounts"`
			ServerId      int       `json:"ServerID"`
			KindId        int       `json:"KindID"`
			TableId       int       `json:"TableID"`
			ChairId       int       `json:"ChairID"`
			UserCount     int       `json:"UserCount"`
			CardValue     string    `json:"CardValue"`
			CellScore     float64   `json:"CellScore"`
			AllBet        float64   `json:"AllBet"`
			Profit        float64   `json:"profit"`
			Revenue       float64   `json:"Revenue"`
			GameStartTime time.Time `json:"GameStartTime"`
			GameEndTime   time.Time `json:"GameEndTime"`
			ChannelId     int       `json:"ChannelID"`
			LineCode      string    `json:"LineCode"`
		} `json:"list"`
	} `json:"d"`
}

// 查询注单
// 注单是以游戏派奖时间为准；拉取当前时间 3 分钟之前数据；
// 建议拉取区间为 1-5 分钟，最大不能超过 60 分钟;
// 开元棋牌注单每 30 秒更新一次，建议每隔至少 30 秒拉取一次，因为 30 秒内多次拉取的注单也是重复注单
// 参数名			|类型	|说明
// --------------------------------
// start_time		|string	|开始时间，毫秒时间戳字符串
// 			|string	|结束时间，毫秒时间戳字符串，拉取区间不能超过60分钟
func (ky *GameKY) QueryRecord(m map[string]interface{}) (interface{}, error) {
	now := time.Now().UnixNano() / 1e6
	req := map[string]string{
		"s":         OperationTypeGetOrderRecord,
		"startTime": m["start_time"].(string),
		"endTime":   m["end_time"].(string),
	}
	body, err := utils.HttpGet(getRecordHandleUrl + "?" + ky.generateUrlParams(req, now))
	if err != nil {
		return nil, err
	}

	var resp GetGameRecordResp
	if err := json.Unmarshal([]byte(body), &resp); err != nil {
		return nil, err
	}

	if resp.D.Code == RetCodeNoGameRecord {
		return nil, nil
	}

	if resp.D.Code != RetCodeSuccess {
		return nil, fmt.Errorf("get game record error, error code: %v", resp.D.Code)
	}

	return resp.D.List, nil
}

func (ky *GameKY) GetPrefix() string {
	return ""
}

func NewGameKY() game.Game {
	return &GameKY{
		Agent:        GameAgent,
		DesKey:       DESKey,
		Md5Key:       MD5Key,
		UserPassword: UserPassword,
	}
}

func init() {
	game.Register("ky", NewGameKY)
}
