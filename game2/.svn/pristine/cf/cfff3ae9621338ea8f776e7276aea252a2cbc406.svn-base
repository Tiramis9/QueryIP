package og

import (
	"game2/lib/game"
	"testing"
)

// test 注册
func TestRegister(t *testing.T) {
	g, _ := game.NewGame("og")
	msg := make(map[string]interface{})
	token, err := GetToken()
	if err != nil {
		t.Fatal(err)
	}
	t.Log(token)

	msg["username"] = "myuser123"
	msg["country"] = "China"
	msg["fullname"] = "MyUser"
	msg["language"] = "en"
	msg["email"] = "myuser123@test.com"
	msg["birthdate"] = "1992-02-18"

	resp, err := g.Register(msg) // ok
	if err != nil {
		t.Fatal(err)
	}
	t.Log(resp)

}

// test Transaction
/*************测试注单*******************************************/

func TestRecordPAYAndPUT(t *testing.T) {
	const (
		OPERATOR_NAME = "mog074jk"             // X-Operator 经营方代码
		OPERATORKEY   = "D4NDSJujqQwkZvQaadBj" //  X-Key
	)
	data := make(map[string]interface{})
	data["SDate"] = "2018-10-29 17:30:00"
	data["EDate"] = "2018-10-29 17:37:00"
	data["Operator"] = OPERATOR_NAME
	data["key"] = OPERATORKEY
	data["Exact"] = true
	//***************************可选择参数
	data["provider"] = "og" // 允许值: "og"
	data["playerID"] = "username"
	data["transactionNumber"] = "zkl12345343"
	data["Exact"] = true // bool

	info, err := QueryPutRecord(data) // 同如下 api 间隔10秒钟查询一次
	if err != nil {
		t.Log("err:", err)
	}
	t.Log(info)

	result, err := QueryPayRecord(data) // 同如上 api 间隔10秒钟查询一次
	if err != nil {
		t.Log("err:", err)
	}
	t.Log(result)

}

// 查询玩家列表
func TestAllPlayer(t *testing.T) {
	token, err := GetToken()
	if err != nil {
		t.Fatal(err)
	}
	g, _ := game.NewGame("og")
	msg := make(map[string]interface{})
	msg["rows"] = 2
	msg["page"] = 1
	msg["sidx"] = "myuser123"
	msg["sord"] = "desc"
	msg["X-Token"] = token
	all, err := g.QueryRecord(msg)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(all)
}

// test  balance  updata or get
func TestBalance(t *testing.T) {
	token, err := GetToken()
	if err != nil {
		t.Fatal(err)
	}
	g, _ := game.NewGame("og")
	msg := make(map[string]interface{})
	msg["game_user_name"] = "myuser123"
	//msg["providerId"] = 1
	msg["X-Token"] = token
	msg["balance"] = 1.5
	msg["action"] = "out"
	msg["transferId"] = "sampleTransferc00001"
	resp, err := g.GetBalance(msg)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(resp)

	resp, err = g.Game2AccountTransfer(msg)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(resp)
}

/*****************玩游戏
   providerId 游戏供应商 id : 1
   key 游戏金钥
	  type  产生链接类型预设desktop允许值: "desktop", "mobile"
  ******************************/

func TestPlay(t *testing.T) {
	g, _ := game.NewGame("og")
	msg := make(map[string]interface{})
	//msg["providerId"] = 1
	msg["username"] = "myuser123"
	msg["type"] = "desktop"
	g.Login(msg)
	url, err := g.Login(msg)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(url)

}
