package action

import (
	"errors"
	"golang_game_merchant/global/status"
	"golang_game_merchant/lib/utils"
	"golang_game_merchant/model"
	"net/http"

	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

type (
	// （财务管理）帐变记录
	MemberBillReq struct {
		UserType  int    `json:"user_type"`  //用户类型，1-正常会员，2-代理，零值表示不考虑该字段，下同
		Type      int    `json:"type"`       //1-入款，2-出款
		Code      int    `json:"code"`       //100，充值; 200,提现; 301转入; 302 转出; 400 红利; 500 返利; 600 丢失补款; 700 多出扣款
		StartTime int64  `json:"start_time"` //开始时间时间戳
		EndTime   int64  `json:"end_time"`   //结束时间时间戳
		Page      int    `json:"page"`       //页码
		PageCount int    `json:"page_count"` //每页显示的数量
		UserName  string `json:"user_name"`  //用户账号，支持模糊查询
	}
	MemberBillInfo struct {
		Balance    interface{} `json:"balance"`     //变动后余额
		Code       interface{} `json:"code"`        //交易类型 100，充值; 200,提现; 300转移; 400 红利; 500 返利
		CreateTime interface{} `json:"create_time"` //变动时间
		Id         interface{} `json:"id"`
		Memo       interface{} `json:"memo"`        //变动说明
		OldBalance interface{} `json:"old_balance"` //变动前余额
		OrderSn    interface{} `json:"order_sn"`    //账变编号
		SettAmt    interface{} `json:"sett_amt"`    //变动金额
		TrueName   interface{} `json:"true_name"`   //真实姓名
		Type       interface{} `json:"type"`        //账变类型 1：加，-1：减
		UserName   interface{} `json:"user_name"`   //会员账号
	}
	MemberBillResp struct {
		List  []MemberBillInfo `json:"list"`  //帐变数据列表
		Total interface{}      `json:"total"` //总数
	}

	// （财务管理）充值记录
	RechargeBillReq struct {
		PayType   int    `json:"pay_type" binding:"required"` // 用户类型:1-在线支付,2-转账汇款,3-后台加款【必填】
		StartTime int64  `json:"start_time"`                  //开始时间
		EndTime   int64  `json:"end_time"`                    //结束时间
		Page      int    `json:"page"`                        //页码
		PageCount int    `json:"page_count"`                  //每页显示数量
		UserName  string `json:"user_name"`                   //用户账号，支持模糊查询
	}
	RechargeBillInfo struct {
		Balance      interface{} `json:"balance"`       //余额
		CallbackTime interface{} `json:"callback_time"` //回调时间
		Code         interface{} `json:"code"`          //100，充值; 200,提现; 301转入; 302 转出; 400 红利; 500 返利; 600 丢失补款; 700 多出扣款
		CreateTime   interface{} `json:"create_time"`   //创建时间
		Id           interface{} `json:"id"`
		OldBalance   interface{} `json:"old_balance"`   //变动前金额
		OrderSn      interface{} `json:"order_sn"`      //流水单号
		PayMoney     interface{} `json:"pay_money"`     //充值金额
		PlatformCode interface{} `json:"platform_code"` //支付平台代码
		Status       interface{} `json:"status"`        //0-失败，1-待支付，2-支付成功
		SysPayType   interface{} `json:"sys_pay_type"`  //支付类型
		TrueName     interface{} `json:"true_name"`     //真实姓名
		Type         interface{} `json:"type"`          //1：入款， -1：出款
		UserName     interface{} `json:"user_name"`     //会员账号
		Memo         interface{} `json:"memo"`          //操作原因
		Operator     interface{} `json:"operator"`      //操作员工
	}
	RechargeBillResp struct {
		List               []RechargeBillInfo `json:"list"`                 //充值记录数据列表
		Total              interface{}        `json:"total"`                //总数
		RechargeNum        interface{}        `json:"recharge_num"`         //充值数
		RechargeSuccessNum interface{}        `json:"recharge_success_num"` //成功数
		RechargeSuccessSum interface{}        `json:"recharge_success_sum"` //成功金额
	}

	// （财务管理）提现记录会员提现
	WithdrawBillReq struct {
		StartTime int64  `json:"start_time"` //开始时间
		EndTime   int64  `json:"end_time"`   //结束时间
		Page      int    `json:"page"`       //页码
		PageCount int    `json:"page_count"` //每页显示数量
		UserName  string `json:"user_name"`  //用户账号
	}
	WithdrawBillInfo struct {
		ApproveTime interface{} `json:"approve_time"` //审核时间
		CreateTime  interface{} `json:"create_time"`  //申请时间
		OrderSn     interface{} `json:"order_sn"`     //流水单号
		Money       interface{} `json:"money"`        //金额
		Status      interface{} `json:"status"`       //状态 1-审核中，2-审核成功，3-审核失败，4-打款成功，5-打款失败
		CardNo      interface{} `json:"card_no"`      //卡号
		ClassName   interface{} `json:"class_name"`   //层级名称
		TrueName    interface{} `json:"true_name"`    //真实姓名
		UserName    interface{} `json:"user_name"`    //用户名
	}
	WithdrawBillResp struct {
		List               []WithdrawBillInfo `json:"list"`                 //提现数据列表
		Total              interface{}        `json:"total"`                //总数
		WithdrawNum        interface{}        `json:"withdraw_num"`         //提现数
		WithdrawSuccessNum interface{}        `json:"withdraw_success_num"` //成功数
		WithdrawSuccessSum interface{}        `json:"withdraw_success_sum"` //成功金额
	}

	//（财务管理）提现记录后台扣款
	WithdrawBillBackReq struct {
		StartTime int64  `json:"start_time"` //开始时间
		EndTime   int64  `json:"end_time"`   //结束时间
		Page      int    `json:"page"`       //页码
		PageCount int    `json:"page_count"` //每页显示数量
		UserName  string `json:"user_name"`  //用户账号
	}
	WithdrawBillBackInfo struct {
		Remark       interface{} `json:"remark"`        //原因
		CreateTime   interface{} `json:"create_time"`   //操作时间
		BillNo       interface{} `json:"bill_no"`       //流水单号
		Amount       interface{} `json:"amount"`        //金额
		ContactName  interface{} `json:"contact_name"`  //真实姓名
		MerchantName interface{} `json:"merchant_name"` //商家账号
		Operator     interface{} `json:"operator"`      //操作员账号
	}
	WithdrawBillBackResp struct {
		List               []WithdrawBillBackInfo `json:"list"`                 //后台扣款数据列表
		Total              interface{}            `json:"total"`                //总数
		WithdrawNum        interface{}            `json:"withdraw_num"`         //提现数
		WithdrawSuccessNum interface{}            `json:"withdraw_success_num"` //成功数
		WithdrawSuccessSum interface{}            `json:"withdraw_success_sum"` //成功金额
	}

	// （财务管理）帐变记录(转账)
	RechargeTransBillReq struct {
		StartTime int64  `json:"start_time"` //开始时间
		EndTime   int64  `json:"end_time"`   //结束时间
		Page      int    `json:"page"`       //页码
		PageCount int    `json:"page_count"` //每页显示数量
		UserName  string `json:"user_name"`  //用户账号
	}
	RechargeTransBillInfo struct {
		CheckTime      interface{} `json:"check_time"`       //审核时间
		CreateTime     interface{} `json:"create_time"`      //申请时间
		BillNo         interface{} `json:"bill_no"`          //流水单号
		Amount         interface{} `json:"amount"`           //金额
		ContactName    interface{} `json:"contact_name"`     //真实姓名
		MerchantName   interface{} `json:"merchant_name"`    //会员账号
		Status         interface{} `json:"status"`           //0-失败,1-待支付,2-支付成功
		TransAccount   interface{} `json:"trans_account"`    //会员转账户名
		TransToAccount interface{} `json:"trans_to_account"` //转入账户
		TrueName       interface{} `json:"true_name"`        //真实姓名
	}
	RechargeTransBillResp struct {
		List               []RechargeTransBillInfo `json:"list"`                 //转账数据列表
		Total              interface{}             `json:"total"`                //总数
		RechargeNum        interface{}             `json:"recharge_num"`         //充值数
		RechargeSuccessNum interface{}             `json:"recharge_success_num"` //成功数
		RechargeSuccessSum interface{}             `json:"recharge_success_sum"` //成功金额
	}

	//（财务管理）游戏转账
	GameTransBillReq struct {
		StartTime int64  `json:"start_time"` //开始时间
		EndTime   int64  `json:"end_time"`   //结束时间
		Page      int    `json:"page"`       //页码
		PageCount int    `json:"page_count"` //每页显示数量
		UserName  string `json:"user_name"`  //用户账号
	}
	GameTransBillInfo struct {
		CreateTime interface{} `json:"create_time"` //转账时间
		BillNo     interface{} `json:"bill_no"`     //流水单号
		Money      interface{} `json:"money"`       //金额
		TrueName   interface{} `json:"true_name"`   //真实姓名
		UserName   interface{} `json:"user_name"`   //会员账号
		Type       interface{} `json:"type"`        //出入帐方向 1.中心账户向游戏账户; 2.游戏账户向中心账户
		Ok         interface{} `json:"ok"`          //状态 1成功;2失败
	}
	GameTransBillResp struct {
		List  []GameTransBillInfo `json:"list"`  //游戏转账数据列表
		Total interface{}         `json:"total"` //总数
	}

	QueryUserBalanceReq struct {
		UserName string `json:"user_name" binding:"required"` //会员账号
	}
	QueryUserBalanceResp struct {
		Id       interface{} `json:"id"`
		UserName interface{} `json:"user_name"` //会员账号
		Balance  interface{} `json:"balance"`   //账户余额
	}

	QueryGameBalanceReq struct {
		GameId int `json:"game_id" binding:"required"` //游戏id
	}
	QueryGameBalanceResp struct {
		GameId  interface{} `json:"game_id"` //游戏id
		Balance interface{} `json:"balance"` //余额
	}

	OnlinePaymentsListReq struct {
		PayType   string `json:"pay_type"`   //支付类型
		Page      int    `json:"page"`       //页码
		PageCount int    `json:"page_count"` //每页显示数量
	}
	OnlinePaymentsInfo struct {
		Code       interface{} `json:"code"`         //接口名称
		DayStopMax interface{} `json:"day_stop_max"` //单日停用上限
		PayType    interface{} `json:"pay_type"`     //支付类型
		Platform   interface{} `json:"platform"`     //支付平台
		SimpleMax  interface{} `json:"simple_max"`   //单笔最高充值
		SimpleMin  interface{} `json:"simple_min"`   //单笔最低充值
		Sort       interface{} `json:"sort"`         //排序值
		Status     interface{} `json:"status"`       //状态1.启用；2.禁用
	}
	OnlinePaymentsListResp struct {
		List  []OnlinePaymentsInfo `json:"list"`  //在线支付接口数据列表
		Total interface{}          `json:"total"` //总数
	}
)

func memberBillReqCheck(req *MemberBillReq) (map[string]interface{}, error) {
	m := make(map[string]interface{})

	if req.UserType != 0 && req.UserType != 1 && req.UserType != 2 {
		return nil, errors.New("user type error")
	} else if req.UserType == 1 || req.UserType == 2 {
		m["user_type"] = req.UserType
	}

	if req.Type != 0 && req.Type != 1 && req.Type != 2 {
		return nil, errors.New("type error")
	} else if req.Type == 1 || req.Type == 2 {
		m["type"] = req.Type
	}

	if req.Code != 0 {
		if !utils.IsIntContains(MemBillTypeList, req.Code) {
			return nil, errors.New("code error")
		} else {
			m["code"] = req.Code
		}
	}

	if req.StartTime != 0 {
		if req.EndTime != 0 {
			if req.EndTime < req.StartTime {
				return nil, errors.New("start time less end time")
			}
			m["end_time"] = req.EndTime
		}
		m["start_time"] = req.StartTime
	}

	if req.Page < 1 {
		req.Page = 1
	}

	if req.PageCount < 0 {
		return nil, errors.New("page count error")
	}

	if req.UserName != "" {
		m["user_name"] = req.UserName
	}

	return m, nil
}

// （财务管理）帐变记录接口
func MemberBill(c *gin.Context) {
	var req MemberBillReq
	if err := c.BindJSON(&req); err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}
	logrus.Debugf("%#v", req)

	// 参数合法性检查
	m, err := memberBillReqCheck(&req)
	if err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}

	// 数据库查询数据
	//todo: get merchantId from token
	merchantId := 1
	list, count, err := model.GetMemberBillList(model.Db, merchantId, req.Page, req.PageCount, m)
	if err != nil {
		logrus.Error(err)
		RespServerErr(c)
		return
	}

	// 组装数据返回给前端显示
	resp := MemberBillResp{
		List:  make([]MemberBillInfo, 0),
		Total: count,
	}

	for i := range list {
		temp := MemberBillInfo{
			Balance:    list[i].Balance,
			Code:       list[i].Code,
			CreateTime: list[i].CreateTime,
			Id:         list[i].Id,
			Memo:       list[i].Memo,
			OldBalance: list[i].OldBalance,
			OrderSn:    list[i].OrderSn,
			SettAmt:    list[i].SettAmt,
			TrueName:   list[i].TrueName,
			Type:       list[i].Type,
			UserName:   list[i].UserName,
		}
		resp.List = append(resp.List, temp)
	}

	RespJson(c, status.OK, resp)

}

func rechargeBillReqCheck(req *RechargeBillReq) (map[string]interface{}, error) {
	m := make(map[string]interface{})

	if req.PayType != RechargeBillPayOnline && req.PayType != RechargeBillTransfer && req.PayType != RechargeBillBackendBonus {
		return nil, errors.New("pay type error")
	}

	if req.StartTime != 0 {
		if req.EndTime != 0 {
			if req.EndTime < req.StartTime {
				return nil, errors.New("start time less end time")
			}
			m["end_time"] = req.EndTime
		}
		m["start_time"] = req.StartTime
	}

	if req.Page < 1 {
		req.Page = 1
	}

	if req.PageCount < 0 {
		return nil, errors.New("page count error")
	}

	if req.UserName != "" {
		m["user_name"] = req.UserName
	}

	return m, nil
}

// （财务管理）充值记录接口
func RechargeBill(c *gin.Context) {
	var req RechargeBillReq
	if err := c.BindJSON(&req); err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}

	// 参数合法性检查
	m, err := rechargeBillReqCheck(&req)
	if err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}

	//todo: get merchantId from token
	merchantId := 1
	list, count, rsn, rss, err := model.GetRechargeBillList(model.Db, merchantId, req.Page, req.PageCount, m)
	if err != nil {
		logrus.Error(err)
		RespServerErr(c)
		return
	}
	resp := RechargeBillResp{
		List:               make([]RechargeBillInfo, 0),
		Total:              count,
		RechargeNum:        count,
		RechargeSuccessNum: rsn,
		RechargeSuccessSum: rss,
	}
	for i := range list {
		temp := RechargeBillInfo{
			Balance:      list[i].Balance,
			CallbackTime: list[i].CallbackTime,
			Code:         list[i].Code,
			CreateTime:   list[i].CreateTime,
			Id:           list[i].Id,
			OldBalance:   list[i].OldBalance,
			OrderSn:      list[i].OrderSn,
			PayMoney:     list[i].PayMoney,
			PlatformCode: list[i].PlatformCode,
			Status:       list[i].Status,
			SysPayType:   list[i].SysPayType,
			TrueName:     list[i].TrueName,
			Type:         list[i].Type,
			UserName:     list[i].UserName,
			Memo:         list[i].Memo,
			Operator:     list[i].Operator,
		}
		resp.List = append(resp.List, temp)
	}

	RespJson(c, status.OK, resp)
}

func withdrawBillReqCheck(req *WithdrawBillReq) (map[string]interface{}, error) {
	m := make(map[string]interface{})

	if req.StartTime != 0 {
		if req.EndTime != 0 {
			if req.EndTime < req.StartTime {
				return nil, errors.New("start time less end time")
			}
			m["end_time"] = req.EndTime
		}
		m["start_time"] = req.StartTime
	}

	if req.Page < 1 {
		req.Page = 1
	}

	if req.PageCount < 0 {
		return nil, errors.New("page count error")
	}

	if req.UserName != "" {
		m["user_name"] = req.UserName
	}

	return m, nil
}

// （财务管理）提现记录会员提现接口
func WithdrawBill(c *gin.Context) {
	var req WithdrawBillReq
	if err := c.BindJSON(&req); err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}

	m, err := withdrawBillReqCheck(&req)
	if err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}

	//todo: get merchantId from token
	merchantId := 1
	list, count, wsn, wss, err := model.GetWithdrawBillList(model.Db, merchantId, req.Page, req.PageCount, m)
	if err != nil {
		logrus.Error(err)
		RespServerErr(c)
		return
	}

	resp := WithdrawBillResp{
		List:               make([]WithdrawBillInfo, 0),
		Total:              count,
		WithdrawNum:        count,
		WithdrawSuccessNum: wsn,
		WithdrawSuccessSum: wss,
	}
	for i := range list {
		temp := WithdrawBillInfo{
			ApproveTime: list[i].ApproveTime,
			CreateTime:  list[i].CreateTime,
			OrderSn:     list[i].OrderSn,
			Money:       list[i].Money,
			Status:      list[i].Status,
			CardNo:      list[i].CardNo,
			ClassName:   list[i].ClassName,
			TrueName:    list[i].TrueName,
			UserName:    list[i].UserName,
		}
		resp.List = append(resp.List, temp)
	}

	RespJson(c, status.OK, resp)
}

func withdrawBillBackReqCheck(req *WithdrawBillBackReq) (map[string]interface{}, error) {
	m := make(map[string]interface{})

	if req.StartTime != 0 {
		if req.EndTime != 0 {
			if req.EndTime < req.StartTime {
				return nil, errors.New("start time less end time")
			}
			m["end_time"] = req.EndTime
		}
		m["start_time"] = req.StartTime
	}

	if req.Page < 1 {
		req.Page = 1
	}

	if req.PageCount < 0 {
		return nil, errors.New("page count error")
	}

	if req.UserName != "" {
		m["user_name"] = req.UserName
	}

	return m, nil
}

// （财务管理）提现记录后台扣款接口
func WithdrawBillBack(c *gin.Context) {
	var req WithdrawBillBackReq
	if err := c.BindJSON(&req); err != nil {
		RespParamErr(c)
		return
	}

	m, err := withdrawBillBackReqCheck(&req)
	if err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}

	//todo: get merchantId from token
	merchantId := 1
	list, count, wsn, wss, err := model.GetWithdrawBillBackList(model.Db, merchantId, req.Page, req.PageCount, m)
	if err != nil {
		logrus.Error(err)
		RespServerErr(c)
		return
	}

	resp := WithdrawBillBackResp{
		List:               make([]WithdrawBillBackInfo, 0),
		Total:              count,
		WithdrawNum:        count,
		WithdrawSuccessNum: wsn,
		WithdrawSuccessSum: wss,
	}
	for i := range list {
		temp := WithdrawBillBackInfo{
			Remark:       list[i].Memo,
			CreateTime:   list[i].CreateTime,
			BillNo:       list[i].OrderSn,
			Amount:       list[i].SettAmt,
			ContactName:  list[i].ContactName,
			MerchantName: list[i].MerchantName,
			Operator:     list[i].Operator,
		}
		resp.List = append(resp.List, temp)
	}

	RespJson(c, status.OK, resp)
}

func rechargeTransBillReqCheck(req *RechargeBillReq) (map[string]interface{}, error) {
	m := make(map[string]interface{})

	if req.StartTime != 0 {
		if req.EndTime != 0 {
			if req.EndTime < req.StartTime {
				return nil, errors.New("start time less end time")
			}
			m["end_time"] = req.EndTime
		}
		m["start_time"] = req.StartTime
	}

	if req.Page < 1 {
		req.Page = 1
	}

	if req.PageCount < 0 {
		return nil, errors.New("page count error")
	}

	if req.UserName != "" {
		m["user_name"] = req.UserName
	}

	return m, nil
}

// （财务管理）帐变记录(转账)接口
func RechargeTransBill(c *gin.Context) {
	var req RechargeBillReq
	if err := c.BindJSON(&req); err != nil {
		RespParamErr(c)
		return
	}

	m, err := rechargeTransBillReqCheck(&req)
	if err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}

	//todo: get merchantId from token
	merchantId := 1
	list, count, rsn, rss, err := model.GetRechargeTransBillList(model.Db, merchantId, req.Page, req.PageCount, m)
	if err != nil {
		logrus.Error(err)
		RespServerErr(c)
		return
	}

	resp := RechargeTransBillResp{
		List:               make([]RechargeTransBillInfo, 0),
		Total:              count,
		RechargeNum:        count,
		RechargeSuccessNum: rsn,
		RechargeSuccessSum: rss,
	}
	for i := range list {
		temp := RechargeTransBillInfo{
			CheckTime:      list[i].CheckTime,
			CreateTime:     list[i].TransTime,
			BillNo:         list[i].BillNo,
			Amount:         list[i].Money,
			ContactName:    list[i].ContactName,
			MerchantName:   list[i].MerchantName,
			Status:         list[i].Status,
			TransAccount:   list[i].TransAccount,
			TransToAccount: list[i].TransToAccount,
			TrueName:       list[i].TrueName,
		}
		resp.List = append(resp.List, temp)
	}

	RespJson(c, status.OK, resp)
}

func gameTransBillReqCheck(req *GameTransBillReq) (map[string]interface{}, error) {
	m := make(map[string]interface{})

	if req.StartTime != 0 {
		if req.EndTime != 0 {
			if req.EndTime < req.StartTime {
				return nil, errors.New("start time less end time")
			}
			m["end_time"] = req.EndTime
		}
		m["start_time"] = req.StartTime
	}

	if req.Page < 1 {
		req.Page = 1
	}

	if req.PageCount < 0 {
		return nil, errors.New("page count error")
	}

	if req.UserName != "" {
		m["user_name"] = req.UserName
	}

	return m, nil
}

// （财务管理）游戏转账接口
func GameTransBill(c *gin.Context) {
	var req GameTransBillReq
	if err := c.BindJSON(&req); err != nil {
		RespParamErr(c)
		return
	}

	m, err := gameTransBillReqCheck(&req)
	if err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}

	//todo: get merchantId from token
	merchantId := 1
	list, count, err := model.GetGameTransBillList(model.Db, merchantId, req.Page, req.PageCount, m)
	if err != nil {
		logrus.Error(err)
		RespServerErr(c)
		return
	}

	resp := GameTransBillResp{
		List:  make([]GameTransBillInfo, 0),
		Total: count,
	}
	for i := range list {
		temp := GameTransBillInfo{
			CreateTime: list[i].CreateTime,
			BillNo:     list[i].BillNo,
			Money:      list[i].Money,
			TrueName:   list[i].TrueName,
			UserName:   list[i].UserName,
			Type:       list[i].Type,
			Ok:         list[i].Ok,
		}
		resp.List = append(resp.List, temp)
	}

	RespJson(c, status.OK, resp)
}

// （财务管理）根据用户名查询会员(加扣款前访问这个)接口
func QueryUserBalance(c *gin.Context) {
	var req QueryUserBalanceReq
	if err := c.BindJSON(&req); err != nil {
		RespParamErr(c)
		return
	}

	//todo: get user_id from token
	userId := 1
	info, err := model.GetUserBalanceByUserName(model.Db, userId, req.UserName)
	if err != nil {
		if err == model.ErrRecordNotFound {
			RespNotFoundErr(c)
			return
		}

		logrus.Error(err)
		RespServerErr(c)
		return
	}

	resp := QueryUserBalanceResp{
		Id:       info.Id,
		UserName: info.GameUserName,
		Balance:  info.GameBalance,
	}

	RespJson(c, status.OK, resp)
}

// 中心账户加扣款
func CenterAccountBalanceSwitch(c *gin.Context) {

}

// 查询游戏余额
func QueryGameBalance(c *gin.Context) {
	var req QueryGameBalanceReq
	if err := c.BindJSON(&req); err != nil {
		RespParamErr(c)
		return
	}

	//todo: get userId from token
	userId := 1
	info, err := model.GetGameBalanceByGameId(model.Db, userId, req.GameId)
	if err != nil {
		if err == model.ErrRecordNotFound {
			RespNotFoundErr(c)
			return
		}

		logrus.Error(err)
		RespServerErr(c)
		return
	}

	resp := QueryGameBalanceResp{
		GameId:  info.Id,
		Balance: info.GameBalance,
	}

	RespJson(c, status.OK, resp)
}

// 在线支付接口列表接口
func OnlinePaymentsList(c *gin.Context) {
	var req OnlinePaymentsListReq
	if err := c.BindJSON(&req); err != nil {
		RespParamErr(c)
		return
	}

	if req.Page < 1 {
		req.Page = 1
	}
	if req.PageCount < 0 {
		logrus.Error("page count error")
		RespParamErr(c)
		return
	}

	m := make(map[string]interface{})
	if req.PayType != "" {
		m["pay_type"] = req.PayType
	}

	//todo: get merchantId from token
	merchantId := 1
	list, count, err := model.GetOnlinePaymentsList(model.Db, merchantId, req.Page, req.PageCount, m)
	if err != nil {
		logrus.Error(err)
		RespServerErr(c)
		return
	}

	resp := OnlinePaymentsListResp{
		List:  make([]OnlinePaymentsInfo, 0),
		Total: count,
	}
	for i := range list {
		temp := OnlinePaymentsInfo{
			Code:       list[i].Code,
			DayStopMax: list[i].DayStopMax,
			PayType:    list[i].PayType,
			Platform:   list[i].Platform,
			SimpleMax:  list[i].SimpleMax,
			SimpleMin:  list[i].SimpleMin,
			Sort:       list[i].Sort,
			Status:     list[i].Status,
		}
		resp.List = append(resp.List, temp)
	}

	RespJson(c, status.OK, resp)
}

func MemberClassList(c *gin.Context) {
	data := [...]map[string]interface{}{
		{"id": 1, "merchant_id": 1, "class_name": "白银"},
		{"id": 2, "merchant_id": 1, "class_name": "黄金"},
	}
	RespJson(c, status.OK, data)
}

func MemberGroupList(c *gin.Context) {
	data := [...]map[string]interface{}{
		{"id": 1, "merchant_id": 1, "group_name": "等级1"},
		{"id": 2, "merchant_id": 1, "group_name": "等级2"},
	}
	RespJson(c, status.OK, data)
}

func Message2UserAdd(c *gin.Context) {
	RespSuccess(c)
}

func Message2AgentAdd(c *gin.Context) {
	RespSuccess(c)
}

func ThirdAccountBalanceSwitch(c *gin.Context) {
	RespSuccess(c)
}

func TransferList(c *gin.Context) {
	data := [...]map[string]interface{}{{"id": 1, "pay_type": "alipay", "remark": "fff", "account": "313213131311313", "sort": 1, "simple_min": 100.00, "day_stop_max": 1000, "income_times_today": 50, "total_transfer_today": 50, "status": 1}, {"id": 2, "pay_type": "alipay", "remark": "fff", "account": "313213131311313", "sort": 1, "simple_min": 100.00, "day_stop_max": 1000, "income_times_today": 50, "total_transfer_today": 50, "status": 1}}

	res := gin.H{"code": 1, "data": data, "msg": "ok", "total": 10, "next_page": 2}
	c.JSON(http.StatusOK, res)
}

func OnlinePaymentsAdd(c *gin.Context) {
	RespSuccess(c)
}

func TransferAdd(c *gin.Context) {
	RespSuccess(c)
}
