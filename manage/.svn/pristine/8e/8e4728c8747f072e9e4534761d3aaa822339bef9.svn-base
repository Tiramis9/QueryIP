package model

import (
	"testing"
)

func TestGetMemberBill(t *testing.T) {
	db := connectDb()
	defer db.Close()

	m := make(map[string]interface{})
	m["user_type"] = 1
	m["type"] = 1
	m["code"] = 100
	m["end_time"] = 1542003391
	m["user_name"] = "liu"
	merchantId := 0
	list, count, err := GetMemberBillList(db, merchantId, 1, 10, m)
	if err != nil {
		t.Fatal(err)
	}

	t.Log(count)
	for i := range list {
		t.Logf("%#v", list[i])
	}
}

func TestGetRechargeBillList(t *testing.T) {
	db := connectDb()
	defer db.Close()

	m := make(map[string]interface{})
	m["pay_type"] = 1
	m["end_time"] = 1542003391
	m["user_name"] = "liu"
	merchantId := 0
	list, count, rsn, rss, err := GetRechargeBillList(db, merchantId, 1, 10, m)
	if err != nil {
		t.Fatal(err)
	}

	t.Log(count)
	t.Log(rsn)
	t.Log(rss)

	for i := range list {
		t.Logf("%#v", list[i])
	}
}

func TestGetWithdrawBillList(t *testing.T) {
	db := connectDb()
	defer db.Close()

	m := make(map[string]interface{})
	m["end_time"] = 1542003391
	m["user_name"] = "liu"
	merchantId := 1
	list, count, rsn, rss, err := GetWithdrawBillList(db, merchantId, 1, 10, m)
	if err != nil {
		t.Fatal(err)
	}

	t.Log(count)
	t.Log(rsn)
	t.Log(rss)

	for i := range list {
		t.Logf("%#v", list[i])
	}
}

func TestGetRechargeTransBillList(t *testing.T) {
	db := connectDb()
	defer db.Close()

	m := make(map[string]interface{})
	m["end_time"] = 1542003391
	m["user_name"] = "liu"
	merchantId := 1
	list, count, rsn, rss, err := GetRechargeTransBillList(db, merchantId, 1, 10, m)
	if err != nil {
		t.Fatal(err)
	}

	t.Log(count)
	t.Log(rsn)
	t.Log(rss)

	for i := range list {
		t.Logf("%#v", list[i])
	}
}

func TestGetGameTransBillList(t *testing.T) {
	db := connectDb()
	defer db.Close()

	m := make(map[string]interface{})
	m["end_time"] = 1542003391
	m["user_name"] = "liu"
	merchantId := 1
	list, count, err := GetGameTransBillList(db, merchantId, 1, 10, m)
	if err != nil {
		t.Fatal(err)
	}

	t.Log(count)

	for i := range list {
		t.Logf("%#v", list[i])
	}
}

func TestGetUserBalance(t *testing.T) {
	db := connectDb()
	defer db.Close()

	userId := 1
	userName := "nr_liul_ag"
	account, err := GetUserBalanceByUserName(db, userId, userName)
	if err != nil {
		if err == ErrRecordNotFound {
			t.Logf("not found")
			return
		}
		t.Fatal(err)
	}
	t.Logf("%#v", account)
}

func TestGetGameBalanceByGameId(t *testing.T) {
	db := connectDb()
	defer db.Close()

	userId := 1
	gameId := 1
	account, err := GetGameBalanceByGameId(db, userId, gameId)
	if err != nil {
		if err == ErrRecordNotFound {
			t.Logf("not found")
			return
		}
		t.Fatal(err)
	}

	t.Logf("%#v", account)
}

func TestGetWithdrawBillBackList(t *testing.T) {
	db := connectDb()
	defer db.Close()

	m := make(map[string]interface{})
	m["end_time"] = 1542003391
	merchantId := 1
	list, count, _, sum, err := GetWithdrawBillBackList(db, merchantId, 1, 10, m)
	if err != nil {
		t.Fatal(err)
	}

	t.Log(sum)
	t.Log(count)

	for i := range list {
		t.Logf("%#v", list[i])
	}
}

func TestGetOnlinePaymentsList(t *testing.T) {
	db := connectDb()
	defer db.Close()

	m := make(map[string]interface{})
	m["pay_type"] = "wechat"
	merchantId := 1
	list, count, err := GetOnlinePaymentsList(db, merchantId, 1, 10, m)
	if err != nil {
		t.Fatal(err)
	}

	t.Log(count)

	for i := range list {
		t.Logf("%#v", list[i])
	}
}
