package model

import (
	"github.com/jinzhu/gorm"
)

type AgentBrokerageReport struct {
	Id             int     `json:"id"`
	AgentId        int     `json:"agent_id"`
	Cycle          string  `json:"cycle"`
	EffectUser     int     `json:"effect_user"`
	BetTotal       float64 `json:"bet_total"`
	RechargeTotal  float64 `json:"recharge_total"`
	BonusTotal     float64 `json:"bonus_total"`
	BrokerageTotal float64 `json:"brokerage_total"`
	FeeTotal       float64 `json:"fee_total"`
	OrgExpense     float64 `json:"org_expense"`
	RebackTotal    float64 `json:"reback_total"`
	WinTotal       float64 `json:"win_total"`
	WithdrawTotal  float64 `json:"withdraw_total"`
	CreateTime     int     `json:"create_time"`
	UpdateTime     int     `json:"update_time"`
}

/*map[string]interface{}{"abr.merch_id": where["merch_id"]}*/
/**
获取代理报表列表
*/
func GetAgentBrokerageReportList(db *gorm.DB, where string, params []interface{}, page int, pageCount int) ([]AgentBrokerageReport, error) {
	//fmt.Println(where)
	var agBrokerageList []AgentBrokerageReport
	if err := db.Debug().Table(`agent_brokerage_report AS abr`).Joins(`
		LEFT JOIN agent AS ag ON abr.agent_id=ag.id`).Select(`abr.*`).
		Where("ag.merchant_id=?"+where, params...).Offset((page - 1) * pageCount).Limit(pageCount).Find(&agBrokerageList).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return nil, nil
		}
		return nil, err
	}
	return agBrokerageList, nil
}
