package og

import (
	"testing"
)

// test Transaction
/*************测试注单******************************************
func TestTransactionsInfoTenMin(t *testing.T) {

	const (
		TEST_OPERATOR_KEY    = "D4NDSJujqQwkZvQaadBj"
		ALLBET_OPERATOR_NAME = "mog074jk "
		ALLBET_API_URL       = "http://mucho.oriental-game.com:8057"
	)
	//var tan TransferActent
	tran := TransferActent{
		SDate:    "2018-10-29 17:30:00",
		EDate:    "2018-10-29 17:40:00",
		Operator: ALLBET_OPERATOR_NAME,
		Key:      TEST_OPERATOR_KEY,
	}
	var game GameOG
	info, err := game.GetTransactionsInfoTenMin(&tran)
	if err != nil {
		t.Log("err:", err)
	}
	t.Log("err:", info)

}
*/
/*************测试余额*****************************************
// test game-providers
func TestGet_GameBalance(t *testing.T) {
	const (
		TEST_OPERATOR_KEY    = "D4NDSJujqQwkZvQaadBj"
		ALLBET_OPERATOR_NAME = "mog074jk "
		ALLBET_API_URL       = "http://mucho.oriental-game.com:8057"
	)
	data := map[string]interface{}{}
	data["providerId"] = 2
	data["username"] = "user123"
	map_res := do_requestGet("/game-providers", data)

	t.Log("reposend:", map_res)

}
**/
// test GET Token
func testRegister(t *testing.T) {
	game, err := GetToken()
	if err != nil {
		t.Fatal(err)
	}
	t.Log(game)
	reg := RegisterReq{
		UserName:  "myuser11117",
		Country:   "China",
		FullName:  "My User",
		Email:     "myuser123@test.com",
		Language:  "en",
		Birthdate: "1992-02-19",
	}
	err = game.Register(&reg)
	if err != nil {
		t.Fatal(err)
	}

}

func TestBalance(t *testing.T) {
	game, err := GetToken()
	if err != nil {
		t.Fatal(err)
	}
	game.ProviderId = 1
	blan := BalanceReq{
		UserName:   "myuser123",
		Balance:    500,
		Action:     "out",
		TransferId: "sampleTransfercode",
	}
	arg, err := game.Get_GameBalance(&blan)
	if err != nil {
		t.Fatal(err)
	}
	t.Log(arg)
	data := map[string]interface{}{}
	data["key"] = "67a17dd934c01"
	data["type"] = "1"
	ainfo, err := game.PlayGame(data)
	if err != nil {
		t.Log(err)
	}
	t.Log(ainfo)
}
