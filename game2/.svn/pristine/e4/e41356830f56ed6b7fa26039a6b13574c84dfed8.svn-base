package og

import (
	"encoding/json"
	"errors"
	"fmt"
)

const (
	TEST_OPERATOR_KEY    = "D4NDSJujqQwkZvQaadBj"
	ALLBET_OPERATOR_NAME = "mog074jk"
	ALLBET_API_URL       = "http://mucho.oriental-game.com:8057/"
	PROXYADDR            = "http://127.0.0.1:1080/"
	BLANCE_API_URL       = "http://api01.oriental-game.com:8085/"
)

var error_code map[string]string = map[string]string{"OK": "ok", "INTERNAL_ERROR": "internet error",
	"ILLEGAL_ARGUMENT": "illegal argument", "SYSTEM_MATAINING": "system mataining",
	"AGENT_NOT_EXIST": "agent not exist", "CLIENT_EXIST": "client exist", "CLIENT_PASSWORD_INCORRECT": "client password incorrect",
	"TOO_FREQUENT_REQUEST": "too frequent request", "CLIENT_NOT_EXIST": "client not exist", "TRANS_EXISTED": "trans existed",
	"LACK_OF_MONEY": "lack of money", "DUPLICATE_CONFIRM": "duplicate confirm", "TRANS_NOT_EXIST": "trans not exist",
	"DECRYPTION_FAILURE": "decryption failure", "FORBIDDEN": "forbidden", "INCONSISTENT_WITH_PRE_TRANS": "inconsistent with pre tans",
	"INVALID_PROPERTYID": "invalid propertyid", "INVALID_SIGN": "invalid sign", "TRANS_FAILURE": "trans failure"}

var lang_map map[string]string = map[string]string{"cn": "zh_CN"}

type (
	// OG注单
	TransferActent struct {
		/*************以下是必选参数*************/
		SDate    string `json:"sDate"`
		EDate    string `json:"eDate"`
		Operator string `json:"operator"`
		Key      string `json:"key"`
		/*************以下是可选参数*************/
		Provider          string `json:"provider"`
		PlayerID          string `json:"playerid"`
		TransactionNumber string `json:"transactionNumber"`
		Exact             bool   `json:"exact"`
	}
	// 用户注册
	RegisterReq struct {
		UserName  string `json:"username"`
		Country   string `json:"country"`
		FullName  string `json:"fullname"`
		Email     string `json:"email"`
		Language  string `json:"language"`
		Birthdate string `json:"birthdate"`
	}

	//**** 获取余额&更新余额
	BalanceReq struct {
		UserName   string  //	用户名
		Balance    float64 //	被加或被减数大于0
		Action     string  //	允许值: "IN", "OUT"
		TransferId string  //	经营方转账交易单号
	}
	// 返回消息绑定JSON
	RespGloBal struct {
		Status string `json:"status"`
		Data   struct {
			Balance string `json:"balance"`
			Message string `json:"message"`
			Key     string `json:"key"`
			Url     string `json:"url"`
		} `json:"data"`
	}
	// 查询所有玩家
	QueryPlayer struct {
		Rows int    // 回传记录笔数  预设10
		Page int    // 页数 预设1
		Sidx string // 排序的栏位名称 预设ID
		Sord string // 允许值: "asc", "desc"
	}
	// get all player 消息绑定JSON
	Players struct {
		Username   string `json:"username"`
		Fullname   string `json:"fullname"`
		Email      string `json:"email"`
		Country    string `json:"country"`
		Currency   string `json:"currency"`
		Birthdata  string `json:"birthdata"`
		OperatorId int    `json:"operatorId"`
		CreatedAt  string `json:"createdAt"`
		UpdateAt   string `json:"updatedAt"`
	}
	Meta struct {
		TotalRecords int  `json:"totalRecords"`
		TotalPages   int  `json:"totalPages"`
		CurrentPage  int  `json:"currentPage"`
		HasPrevious  bool `json:"hasPrevious"`
		HasNext      bool `json:"hasNext"`
	}
	ResPlayer struct {
		Status string `json:"status"`
		Data   struct {
			List    []Players `json:"players"`
			Meta    `json:"meta"`
			Message string `json:"message"`
		} `json:"data"`
	}
)

//	更新余额
func (a *GameOG) UpdataGameKey(msg *BalanceReq) (string, error) {
	data := map[string]interface{}{}
	for key, value := range a.Data {
		if key == "token" {
			switch v := value.(type) {
			case string:
				data["X-Token"] = v
			}
		} else {
			return "", errors.New("token of invaild")
		}
	}
	if a.ProviderId == 0 {
		return "", errors.New("ProviderId param error as zero")
	}
	if msg.Action == "" {
		return "", errors.New("Action param error")
	}
	if msg.TransferId == "" {
		return "", errors.New("transferId param error")
	}
	if msg.UserName == "" {
		return "", errors.New("username param error")
	}
	if msg.Balance == 0 {
		return "", errors.New("Balance param error as zero")
	}
	data["action"] = msg.Action
	data["balance"] = msg.Balance
	data["transferId"] = msg.TransferId
	data["username"] = msg.UserName
	url := fmt.Sprintf("%v%v/%v/%v", BLANCE_API_URL, "game-providers", a.ProviderId, "balance")

	cli, err := NewHttpClient(PROXYADDR)
	if err != nil {
		return "", err
	}
	mapres, err := HttpPOST(cli, url, data)
	if err != nil {
		return "", err
	}
	var resp RespGloBal
	if err := json.Unmarshal(mapres, &resp); err != nil {
		return "", err
	}
	if resp.Data.Message != "" {
		return "", errors.New(resp.Data.Message)
	}
	return resp.Data.Balance, nil
}

//	获取余额
func (a *GameOG) GetGameBalance(msg *BalanceReq) (string, error) {
	data := map[string]interface{}{}
	for key, value := range a.Data {
		if key == "token" {
			switch v := value.(type) {
			case string:
				data["X-Token"] = v
			}
		} else {
			return "", errors.New("token of invaild")
		}
	}
	if a.ProviderId == 0 {
		return "", errors.New("ProviderId param error as zero")
	}
	url := fmt.Sprintf("%v%v/%v/%v?username=%v", BLANCE_API_URL, "game-providers", a.ProviderId, "balance", msg.UserName)
	map_res, err := do_requestGet(url, data)
	if err != nil {
		return "", err
	}
	return map_res.Data.Balance, nil
}

//	查询玩家
func (a *GameOG) SearchPlayer(msg *QueryPlayer) (*ResPlayer, error) {
	var url string
	var resp ResPlayer
	data := map[string]interface{}{}
	for key, value := range a.Data {
		if key == "token" {
			switch v := value.(type) {
			case string:
				data["X-Token"] = v
			}
		} else {
			return nil, errors.New("token of invaild")
		}
	}
	url = fmt.Sprintf("%v%v?", BLANCE_API_URL, "players")
	if msg.Page != 0 {
		url += fmt.Sprintf("page=%v", msg.Page)
	}
	if msg.Rows != 0 {
		url += fmt.Sprintf("&rows=%v", msg.Rows)
	}
	if msg.Sidx != "" && msg.Sord != "" {
		url += fmt.Sprintf("&sidx=%v&sord=%v", msg.Sidx, msg.Sord)
	}
	cli, err := NewHttpClient(PROXYADDR)
	if err != nil {
		return nil, err
	}
	res, err := HttpGETGlobal(cli, url, data)

	if err != nil {
		return nil, err
	}

	err = json.Unmarshal(res, &resp)
	if err != nil {
		return nil, err
	}
	return &resp, nil
}

//	获取KEY
func (a *GameOG) GETGameKey(msg map[string]string) (string, error) {
	data := map[string]interface{}{}
	for key, value := range a.Data {
		if key == "token" {
			switch v := value.(type) {
			case string:
				data["X-Token"] = v
			}
		} else {
			return "", errors.New("token of invaild")
		}
	}
	if a.ProviderId == 0 {
		return "", errors.New("ProviderId param error as zero")
	}
	if a.GameCode == "" {
		return "", errors.New("GameCode param error as nil")
	}
	username, ok := msg["username"]
	if ok != true {
		return "", errors.New("username param error as nil")
	}
	url := fmt.Sprintf("%v%v/%v/%v/%v/%v?username=%v", BLANCE_API_URL, "game-providers", a.ProviderId, a.GameCode, "oglive", "key", username)
	map_res, err := do_requestGet(url, data)
	if err != nil {
		return "", err
	}
	return map_res.Data.Key, nil
}

//	注册 register
func (a *GameOG) Register(info *RegisterReq) error {
	data := map[string]interface{}{}
	for key, value := range a.Data {
		if key == "token" {
			switch v := value.(type) {
			case string:
				data["X-Token"] = v
			}
		} else {
			return errors.New("token of invaild")
		}
	}
	if info.Country == "" {
		return errors.New("Country param error")
	}
	if info.Birthdate == "" {
		return errors.New("Birthdate param error")
	}
	if info.Email == "" {
		return errors.New("email param error")
	}
	if info.FullName == "" {
		return errors.New("FullName param error")
	}
	if info.UserName == "" {
		return errors.New("UserName param error")
	}
	data["username"] = info.UserName
	data["country"] = info.Country
	data["email"] = info.Email
	data["fullname"] = info.FullName
	data["birthdate"] = info.Birthdate
	url := fmt.Sprintf("%v%v", BLANCE_API_URL, "register")
	err := do_requestRegister(url, data)
	if err != nil {
		return err
	}
	return nil
}

// 获取token done 详细见TestRegister 案例
func GetToken() (*GameOG, error) {
	var game GameOG
	url := fmt.Sprintf("%v%v", BLANCE_API_URL, "token")
	cli, err := NewHttpClient(PROXYADDR)
	if err != nil {
		return nil, err
	}

	data, err := HttpGET(cli, url)
	if err != nil {
		return nil, err
	}
	json.Unmarshal(data, &game)
	return &game, nil
}

// start play game 返回URL
func PlayGame(params map[string]interface{}) (string, error) {
	var msg RespGloBal
	providerId, ok := params["providerId"]
	if !ok {
		return "", errors.New("providerId invaild")
	}
	key, ok := params["key"]
	if ok != true {
		return "", errors.New("key invaild")
	}
	url := fmt.Sprintf("%v%v/%v/%v?key=%v", BLANCE_API_URL, "game-providers", providerId, "play", key)
	cli, err := NewHttpClient(PROXYADDR)
	if err != nil {
		return "", err
	}

	mapres, err := requestGetPlay(cli, url)
	if err != nil {
		return "", err
	}
	if err := json.Unmarshal(mapres, &msg); err != nil {
		return "", err
	}
	if msg.Data.Message != "" {
		return "", errors.New(msg.Data.Message)
	}
	return msg.Data.Url, nil
}

//用户投注记录(10分钟内)
func QueryPutRecord(msg map[string]interface{}) ([]ResPutRecord, error) {

	url := fmt.Sprintf("%v%v", ALLBET_API_URL, "Transaction")
	if _, ok := msg["SDate"]; !ok {
		return nil, errors.New("SDate param error")

	}
	if _, ok := msg["EDate"]; !ok {
		return nil, errors.New("EData param error")
	}
	if _, ok := msg["Operator"]; !ok {
		return nil, errors.New("Operator param error")
	}
	if _, ok := msg["key"]; !ok {
		return nil, errors.New("key param error")
	}

	res, err := HttpPOSTInquire(url, msg)
	if err != nil {
		return nil, err
	}
	fmt.Println("200:", string(res))
	var msgInfo []ResPutRecord
	//msgInfo := make([]string, 0)
	if res != nil {
		if err := json.Unmarshal(res, &msgInfo); err != nil {
			return nil, err
		}
	}

	return msgInfo, nil
}

//转账记录(10分钟内)
func QueryPayRecord(msg map[string]interface{}) ([]ResPayRecord, error) {
	url := fmt.Sprintf("%v%v", ALLBET_API_URL, "Transfer")
	if _, ok := msg["SDate"]; !ok {
		return nil, errors.New("SDate param error")

	}
	if _, ok := msg["EDate"]; !ok {
		return nil, errors.New("EData param error")
	}
	if _, ok := msg["Operator"]; !ok {
		return nil, errors.New("Operator param error")
	}
	if _, ok := msg["key"]; !ok {
		return nil, errors.New("key param error")
	}

	res, err := HttpPOSTInquire(url, msg)
	if err != nil {
		return nil, err
	}
	fmt.Println("200:", string(res))
	var msgInfo []ResPayRecord
	//msgInfo := make([]string, 0)
	if res != nil {
		if err := json.Unmarshal(res, &msgInfo); err != nil {
			return nil, err
		}
	}
	return msgInfo, nil
}

// 获取key && 查询余额
func do_requestGet(api_url string, params map[string]interface{}) (*RespGloBal, error) {
	cli, err := NewHttpClient(PROXYADDR)
	if err != nil {
		return nil, err
	}
	str, err := HttpGETGlobal(cli, api_url, params)
	if err != nil {
		return nil, err
	}
	var msg RespGloBal
	if err := json.Unmarshal(str, &msg); err != nil {
		return nil, err
	}
	if msg.Data.Message != "" {
		return nil, errors.New(msg.Data.Message)
	}
	return &msg, nil
}

//  register POST请求 done
func do_requestRegister(apiUrl string, data map[string]interface{}) error {
	var msg RespGloBal
	cli, err := NewHttpClient(PROXYADDR)
	if err != nil {
		return err
	}
	//str, err := HttpPOST(cli, url, data)
	str, err := HttpPOST(cli, apiUrl, data)
	if err != nil {
		return err
	}
	json.Unmarshal([]byte(str), &msg)
	if msg.Data.Message != "" {
		return errors.New(msg.Data.Message)
	}
	return nil
}
