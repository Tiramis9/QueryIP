package model

type User struct {
	Id              int     `json:"id"`
	Merch_id        int     `json:"merch_id"`
	User_name       string  `json:"user_name"`
	Password        string  `json:"password,omitempty"`
	Salt            string  `json:"salt,omitempty"`
	True_name       string  `json:"true_name"`
	Phone           string  `json:"phone"`
	Email           string  `json:"email,omitempty"`
	QQ              string  `json:"qq,omitempty"`
	Birthday        string  `json:"birthday,omitempty"`
	Login_time      string  `json:"login_time,omitempty"`
	Login_ip        string  `json:"login_ip,omitempty"`
	Last_login_ip   string  `json:"last_login_ip,omitempty"`
	Last_login_time string  `json:"last_login_time"`
	Balance         float64 `json:"balance"`
	Skype           string  `json:"skype,omitempty"`
	Device          int     `json:"device,omitempty"`
	Source          string  `json:"source,omitempty"`
	Class_id        int     `json:"class_id,omitempty"`
	Group_id        int     `json:"group_id,omitempty"`
	Time_zone       int     `json:"time_zone,omitempty"`
	Lang            string  `json:"lang,omitempty"`
	Area_code       int     `json:"area_code,omitempty"`
}

type UserBank struct {
	Id        int    `json:"id"`
	User_id   int    `json:"user_id,omitempty"`
	True_name string `json:"true_name,omitempty"`
	Phone     int64  `json:"phone,omitempty"`
	Card_no   string `json:"card_no,omitempty"`
	Bank_name string `json:"bank_name,omitempty"`
	Id_card   string `json:"id_card,omitempty"`
	Status    int    `json:"status,omitempty"`
}

type SysSecurityQuestion struct {
	Id       int    `json:"id"`
	Question string `json:"question"`
	Q_type   int    `json:"type"`
	Lang     int    `json:"lang"`
}

type UserInterface interface {
	GetUserById()
	GetUserByName()
}

func (u User) GetUserById(id int) (user User) {
	/*row := Db.QueryRow("SELECT id,merch_id,user_name,true_name,phone,email,qq,birthday FROM user Where id=?", id)
	//defer row.Close()
	conv := User{}
	row.Scan(&conv.Id, &conv.Merch_id, &conv.User_name, &conv.True_name, &conv.Phone, &conv.Email, &conv.QQ, &conv.Birthday)
	return conv*/
	return User{}
}

func (u User) GetUserBaseInfo(id int) (user User) {
	/*row := Db.QueryRow("SELECT id,merch_id,user_name,true_name,phone,balance,last_login_time FROM user Where id=?", id)
	//defer row.Close()
	conv := User{}
	row.Scan(&conv.Id, &conv.Merch_id, &conv.User_name, &conv.True_name, &conv.Phone, &conv.Balance, &conv.Last_login_time)
	return conv*/
	return User{}
}

func (u User) GetUserByName(name string) (user User) {
	/*stmt, errs := Db.Prepare("SELECT id,merch_id,user_name,password,salt,login_time,login_ip,last_login_ip,last_login_time,true_name,phone,email,qq,skype,lang,time_zone,birthday,area_code,device,source,class_id,group_id FROM user Where user_name=? or phone=? ")
	if errs != nil {
		fmt.Println(errs)
		return
	}

	defer stmt.Close()
	row := stmt.QueryRow(name, name)

	conv := User{}

	row.Scan(&conv.Id, &conv.Merch_id, &conv.User_name, &conv.Password, &conv.Salt, &conv.Login_time, &conv.Login_ip, &conv.Last_login_ip, &conv.Last_login_time, &conv.True_name, &conv.Phone, &conv.Email, &conv.QQ, &conv.Skype, &conv.Lang, &conv.Time_zone, &conv.Birthday, &conv.Area_code, &conv.Device, &conv.Source, &conv.Class_id, &conv.Group_id)

	return conv*/
	return User{}
}

func (u User) GetUserByToken(id int) (user User) {
	/*stmt, errs := Db.Prepare("SELECT id,merch_id,user_name,password,salt FROM user " + "Where id=? ")
	if errs != nil {
		fmt.Println(errs)
		return
	}

	defer stmt.Close()
	row := stmt.QueryRow(id)

	conv := User{}

	row.Scan(&conv.Id, &conv.Merch_id, &conv.User_name, &conv.Password, &conv.Salt)

	return conv*/
	return User{}
}

func (u User) InsterUser(data map[string]interface{}) (bool, interface{}) {
	/*stmt, err := Db.Prepare("insert into user(merch_id,user_name,true_name,password,phone,email,salt,reg_time,reg_ip,type,parent_id,pay_pass)values(?,?,?,?,?,?,?,?,?,?,?,?)")
	defer stmt.Close()
	res, err := stmt.Exec(data["merch_id"], data["user_name"], data["true_name"], data["password"], data["phone"], data["email"], data["salt"], data["reg_time"], data["reg_ip"], data["type"], data["parent_id"], data["pay_pass"])
	if err != nil {

		return false, nil
	}
	id, err := res.LastInsertId()
	if err != nil {

		return false, nil
	}
	return true, id
	*/
	return true, 0
}

//修改用户单个字段值
func (u User) UpdateUser(uid int, field string, data string) (bool, int64) {
	/*stmt, err := Db.Prepare("UPDATE user SET " + field + "=? WHERE id=?")
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return false, 0
	}
	res, err := stmt.Exec(data, uid)
	if err != nil {
		fmt.Println(err)
		return false, 0
	}
	num, err := res.RowsAffected()

	if err != nil {
		fmt.Println(err)
		return false, 0
	} else {
		return true, num
	}*/

	return true, 0
}

//修改用户登录ip,登录时间
func (u User) UpdateUser_login_info(login_time int, login_ip string, last_login_time int, last_login_ip string, user_id int) (bool, int64) {
	/*stmt, err := Db.Prepare("UPDATE user SET login_time=?,login_ip=?,last_login_time=?,last_login_ip=? WHERE id=?")
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return false, 0
	}
	res, err := stmt.Exec(login_time, login_ip, last_login_time, last_login_ip, user_id)
	if err != nil {
		fmt.Println(err)
		return false, 0
	}
	num, err := res.RowsAffected()

	if err != nil {
		fmt.Println(err)
		return false, 0
	} else {
		return true, num
	}*/

	return true, 0
}

//修改用户登录ip,登录时间
func (u User) UpdateUser_phone(phone string, area_code int, user_id int) (bool, int64) {
	/*stmt, err := Db.Prepare("UPDATE user SET phone=?,area_code=? WHERE id=?")
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return false, 0
	}
	res, err := stmt.Exec(phone, area_code, user_id)
	if err != nil {
		fmt.Println(err)
		return false, 0
	}
	num, err := res.RowsAffected()

	if err != nil {
		fmt.Println(err)
		return false, 0
	} else {
		return true, num
	}*/

	return true, 0
}

//获取用户银行列表
func (u UserBank) GetUserBankList(user_id int) interface{} {
	var banklist []UserBank
	/*stmt, errs := Db.Prepare("SELECT id,bank_name,card_no,user_id FROM user_bank WHERE user_id=?")
	defer stmt.Close()
	if errs != nil {
		fmt.Println(errs)
		return nil
	}
	rows, err := stmt.Query(user_id)
	if err != nil {
		fmt.Println(err)
		return nil
	}
	for rows.Next() {
		conv := UserBank{}
		rows.Scan(&conv.Id, &conv.Bank_name, &conv.Card_no, &conv.User_id)
		banklist = append(banklist, conv)
	}*/
	return banklist
}

//获取单个用户银行信息
func (u UserBank) GetUserBankInfo(id int, user_id int) UserBank {
	var conv UserBank
	/*stmt, errs := Db.Prepare("SELECT id,bank_name,card_no,user_id FROM user_bank WHERE id=?")
	defer stmt.Close()
	if errs != nil {
		fmt.Println(errs)
		return conv
	}
	row := stmt.QueryRow(id)
	row.Scan(&conv.Id, &conv.Bank_name, &conv.Card_no, &conv.User_id)*/
	return conv
}

//获取安全密保问题
func (u SysSecurityQuestion) GetSecurity(q_type int, lang int) interface{} {
	var securitys []SysSecurityQuestion
	/*stmt, errs := Db.Prepare("SELECT id,question,type,lang FROM sys_security_question where type=? and lang=?")
	if errs != nil {
		fmt.Println(errs)
		return nil
	}
	defer stmt.Close()
	rows, err := stmt.Query(q_type, lang)
	if err != nil {
		fmt.Println(err)
		return nil
	}
	for rows.Next() {
		conv := SysSecurityQuestion{}
		rows.Scan(&conv.Id, &conv.Question, &conv.Q_type, &conv.Lang)
		securitys = append(securitys, conv)
	}*/

	return securitys
}
