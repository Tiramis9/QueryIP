package action

import (
	"fmt"
	"game2/global/status"
	"game2/logic"
	"game2/model"
	"game2/service"
	"github.com/gin-gonic/gin"
	"github.com/sirupsen/logrus"
)

type AccountTransReq struct {
	Direction   int     `json:"direction" binding:"required"`
	GameCode string  `json:"game_code" binding:"required"`
	Amount      float64 `json:"amount" binding:"required"`
}

type AccountInfoReq struct {
	GameCode string `json:"game_code" binding:"required"`
}

type AccountReportReq struct {
	StartTime int64 `json:"start_time"`
	EndTime   int64 `json:"end_time"`
}

//账户列表
func AccountList(c *gin.Context) {
	data := make(map[string]interface{})
	uid, ok := c.Get("user_id")
	if !ok {
		RespServerErr(c)
		return
	}
	userId := int(uid.(float64))
	fmt.Println(userId)
	merchantId, ok := c.Get("merchant_id")
	if !ok {
		RespServerErr(c)
		return
	}
	merchId := int(merchantId.(float64))
	//转为整形
	//获取列表
	list, err := model.GetAccountListByUserId(model.Db, merchId)
	if err != nil {
		RespServerErr(c)
		return
	}
	data["list"] = list
	RespJson(c, status.OK, data)
}

//账户详情
func AccountInfo(c *gin.Context) {
	var m AccountInfoReq
	res := make(map[string]interface{})
	userInfo := make(map[string]interface{})
	if err := c.BindJSON(&m); err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}
	gameCode := m.GameCode
	tokenS, ok := c.Request.Header["Token"]
	if !ok {
		logrus.Error("no token")
		RespParamErr(c)
		return
	}
	mapInfo := logic.UserInfoByRedis(tokenS[0])
	userInfo["user_name"] = mapInfo["user_name"].(string)
	//调用service
	balance, err := service.GameGetBalance(gameCode, userInfo)
	if err != nil {
		logrus.Error(err)
		RespServerErr(c)
		return
	}
	res["game_balance"] = balance
	res["game_code"] = gameCode
	RespJson(c, status.OK, res)
}

//账户间转移
func AccountTrans(c *gin.Context) {
	var m AccountTransReq
	if err := c.BindJSON(&m); err != nil {
		logrus.Error(err)
		RespParamErr(c)
		return
	}
	id, ok := c.Get("user_id")
	if !ok {
		logrus.Error("user_id过期")
		RespTokenExpiredErr(c)
		return
	}
	userId := int(id.(float64))

	if m.Direction != 0 && m.Direction != 1 {
		RespParamErr(c)
		return
	}
	if m.Amount < 0 {
		RespParamErr(c)
		return
	}
	accountService := service.UserAccount2{AccountName: m.GameCode, UserId: userId, Money: m.Amount}
	//获取列表
	res, err := accountService.TransAccount(model.Db, userId, m.Direction, m.GameCode, m.Amount)
	if err != nil {
		RespServerErr(c)
		return
	}
	if res == 101 {
		RespJson(c, status.ErrNoEnoughMoney, nil)
		return
	}
	if res == 500 {
		RespServerErr(c)
		return
	}
	RespSuccess(c)
}

//游戏报表
func AccountReport(c *gin.Context) {
	var suc = make(map[string]interface{})
	id, ok := c.Get("user_id")
	if !ok {
		RespServerErr(c)
		return
	}
	var m AccountReportReq
	if err := c.BindJSON(&m); err != nil {
		RespParamErr(c)
		return
	}
	userId := int(id.(float64))
	startTime, endTime := InitTimeSearch(m.StartTime, m.EndTime)
	fmt.Println(userId)
	fmt.Println(startTime, endTime)
	//调用第三方接口
	data1 := [...]map[string]interface{}{
		{"game_name": "沙巴体育", "num": "100", "bill_amt": "200.00", "win": "30.00"},
		{"game_name": "BB体育", "num": "100", "bill_amt": "100.00", "win": "-10.00"},
		{"game_name": "NEW BB体育", "num": "100", "bill_amt": "101.00", "win": "20.00"},
	}
	data2 := [...]map[string]interface{}{
		{"game_name": "沙巴体育", "num": "100", "bill_amt": "200.00", "win": "30.00"},
		{"game_name": "BB体育", "num": "100", "bill_amt": "100.00", "win": "-10.00"},
		{"game_name": "NEW BB体育", "num": "100", "bill_amt": "101.00", "win": "20.00"},
	}
	data3 := [...]map[string]interface{}{
		{"game_name": "沙巴体育", "num": "100", "bill_amt": "200.00", "win": "30.00"},
		{"game_name": "BB体育", "num": "100", "bill_amt": "100.00", "win": "-10.00"},
		{"game_name": "NEW BB体育", "num": "100", "bill_amt": "101.00", "win": "20.00"},
	}
	data4 := [...]map[string]interface{}{
		{"game_name": "沙巴体育", "num": "100", "bill_amt": "200.00", "win": "30.00"},
		{"game_name": "BB体育", "num": "100", "bill_amt": "100.00", "win": "-10.00"},
		{"game_name": "NEW BB体育", "num": "100", "bill_amt": "101.00", "win": "20.00"},
	}
	data5 := [...]map[string]interface{}{
		{"game_name": "沙巴体育", "num": "100", "bill_amt": "200.00", "win": "30.00"},
		{"game_name": "BB体育", "num": "100", "bill_amt": "100.00", "win": "-10.00"},
		{"game_name": "NEW BB体育", "num": "100", "bill_amt": "101.00", "win": "20.00"},
	}
	count := [...]map[string]interface{}{
		{"name": "sport", "bill_amt": "200.00", "win": "30.00"},
		{"name": "lottery", "bill_amt": "100.00", "win": "-10.00"},
		{"name": "real", "bill_amt": "101.00", "win": "20.00"},
		{"name": "chess", "bill_amt": "101.00", "win": "20.00"},
		{"name": "game", "bill_amt": "101.00", "win": "20.00"},
	}
	dataList := map[string]interface{}{}
	dataList["sport"] = data1
	dataList["lottery"] = data2
	dataList["real"] = data3
	dataList["chess"] = data4
	dataList["game"] = data5
	suc["data"] = dataList
	suc["count"] = count
	RespJson(c, status.OK, suc)
}

//打赏报表
func AccountReward(c *gin.Context) {
	var suc = make(map[string]interface{})
	id, ok := c.Get("user_id")
	if !ok {
		RespServerErr(c)
		return
	}
	var m AccountReportReq
	if err := c.BindJSON(&m); err != nil {
		RespServerErr(c)
		return
	}
	userId := int(id.(float64))
	startTime, endTime := InitTimeSearch(m.StartTime, m.EndTime)
	fmt.Println(userId)
	fmt.Println(startTime, endTime)
	//调用第三方接口
	data := [...]map[string]interface{}{
		{"game_name": "彩播", "reward": "200.00"},
		{"game_name": "BB彩播", "reward": "100.00"},
		{"game_name": "NEW BB彩播", "reward": "101.00"},
	}
	suc["data"] = data
	RespJson(c, status.OK, suc)
}
