package model

type GameType struct {
	Type int `json:"type"`
}

type Game struct {
	Type      int    `json:"type,omitempty"`
	Channel   string `json:"channel"`
	Game_name string `json:"game_name"`
	Game_code string `json:"game_code"`
}

func (g GameType) GetGameTypeList(merchant_id int) []GameType {
	var gametypelist []GameType
	/*stmt, err := Db.Prepare("SELECT sg.type FROM merchant_game mg" +
		" LEFT JOIN sys_game sg ON mg.game_id=sg.id " + " Where mg.merchant_id=? group by sg.type")
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return gametypelist
	}
	rows, err := stmt.Query(merchant_id)
	defer rows.Close()
	if err != nil {
		fmt.Println(err)
		return gametypelist
	}
	for rows.Next() {
		var conv GameType
		rows.Scan(&conv.Type)
		gametypelist = append(gametypelist, conv)
	}*/
	return gametypelist
}

func (g Game) GetGameList(type_ int) interface{} {
	var gamelist []Game
	/*stmt, err := Db.Prepare("SELECT game_name, game_code FROM sys_game Where type=?")
	defer stmt.Close()
	if err != nil {
		fmt.Println(err)
		return nil
	}
	rows, err := stmt.Query(type_)
	defer rows.Close()
	if err != nil {
		fmt.Println(err)
		return nil
	}
	for rows.Next() {
		var conv Game
		rows.Scan(&conv.Game_name, &conv.Game_code)
		gamelist = append(gamelist, conv)
	}*/
	return gamelist
}
